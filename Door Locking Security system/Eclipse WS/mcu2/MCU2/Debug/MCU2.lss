
MCU2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000243c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000016  00800060  0000243c  000024d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000013  00800076  00800076  000024e6  2**0
                  ALLOC
  3 .stab         0000264c  00000000  00000000  000024e8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000135a  00000000  00000000  00004b34  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00005e8e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00005fce  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000613e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00007d87  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00008c72  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00009a20  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00009b80  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  00009e0d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000a5db  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 f1 0d 	jmp	0x1be2	; 0x1be2 <__vector_3>
      10:	0c 94 be 0d 	jmp	0x1b7c	; 0x1b7c <__vector_4>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 8b 0d 	jmp	0x1b16	; 0x1b16 <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 58 0d 	jmp	0x1ab0	; 0x1ab0 <__vector_8>
      24:	0c 94 f2 0c 	jmp	0x19e4	; 0x19e4 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 25 0d 	jmp	0x1a4a	; 0x1a4a <__vector_19>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e3       	ldi	r30, 0x3C	; 60
      68:	f4 e2       	ldi	r31, 0x24	; 36
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 37       	cpi	r26, 0x76	; 118
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a6 e7       	ldi	r26, 0x76	; 118
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a9 38       	cpi	r26, 0x89	; 137
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 be 07 	call	0xf7c	; 0xf7c <main>
      8a:	0c 94 1c 12 	jmp	0x2438	; 0x2438 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 e5 11 	jmp	0x23ca	; 0x23ca <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 01 12 	jmp	0x2402	; 0x2402 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 f1 11 	jmp	0x23e2	; 0x23e2 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 0d 12 	jmp	0x241a	; 0x241a <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 f1 11 	jmp	0x23e2	; 0x23e2 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 0d 12 	jmp	0x241a	; 0x241a <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 e5 11 	jmp	0x23ca	; 0x23ca <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 01 12 	jmp	0x2402	; 0x2402 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 f1 11 	jmp	0x23e2	; 0x23e2 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 0d 12 	jmp	0x241a	; 0x241a <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 f1 11 	jmp	0x23e2	; 0x23e2 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 0d 12 	jmp	0x241a	; 0x241a <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 f1 11 	jmp	0x23e2	; 0x23e2 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 0d 12 	jmp	0x241a	; 0x241a <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 f5 11 	jmp	0x23ea	; 0x23ea <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 11 12 	jmp	0x2422	; 0x2422 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <PASSCODEInit>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

void PASSCODEInit(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <PASSCODEInit+0x6>
     b4c:	00 d0       	rcall	.+0      	; 0xb4e <PASSCODEInit+0x8>
     b4e:	00 d0       	rcall	.+0      	; 0xb50 <PASSCODEInit+0xa>
     b50:	cd b7       	in	r28, 0x3d	; 61
     b52:	de b7       	in	r29, 0x3e	; 62
	uint8 confirmPasscode[PASSCODE_CH_LENGTH];
	uint8 check = 0;
     b54:	19 82       	std	Y+1, r1	; 0x01
     b56:	31 c0       	rjmp	.+98     	; 0xbba <PASSCODEInit+0x74>

	while(!check)
	{

		/* wait for a response from MCU1 */
		while (UART_reciveByte() != MC_READY_SEND);
     b58:	0e 94 48 11 	call	0x2290	; 0x2290 <UART_reciveByte>
     b5c:	85 31       	cpi	r24, 0x15	; 21
     b5e:	e1 f7       	brne	.-8      	; 0xb58 <PASSCODEInit+0x12>

		/* inform HMI that Control ECU ready to receive the passcode */
		UART_sendByte(MC_READY_RECIVE);
     b60:	86 e1       	ldi	r24, 0x16	; 22
     b62:	0e 94 31 11 	call	0x2262	; 0x2262 <UART_sendByte>
		recivePasscodeByUART (g_recivedPasscode);
     b66:	84 e8       	ldi	r24, 0x84	; 132
     b68:	90 e0       	ldi	r25, 0x00	; 0
     b6a:	0e 94 1d 06 	call	0xc3a	; 0xc3a <recivePasscodeByUART>


		while (UART_reciveByte() != MC_READY_SEND);
     b6e:	0e 94 48 11 	call	0x2290	; 0x2290 <UART_reciveByte>
     b72:	85 31       	cpi	r24, 0x15	; 21
     b74:	e1 f7       	brne	.-8      	; 0xb6e <PASSCODEInit+0x28>
		UART_sendByte(MC_READY_RECIVE);
     b76:	86 e1       	ldi	r24, 0x16	; 22
     b78:	0e 94 31 11 	call	0x2262	; 0x2262 <UART_sendByte>

		/* inform HMI to send the confirmation password */
		recivePasscodeByUART(confirmPasscode);
     b7c:	ce 01       	movw	r24, r28
     b7e:	02 96       	adiw	r24, 0x02	; 2
     b80:	0e 94 1d 06 	call	0xc3a	; 0xc3a <recivePasscodeByUART>

		if (comparePasscode(g_recivedPasscode, confirmPasscode) == PASSCODE_MATCH)
     b84:	84 e8       	ldi	r24, 0x84	; 132
     b86:	90 e0       	ldi	r25, 0x00	; 0
     b88:	9e 01       	movw	r18, r28
     b8a:	2e 5f       	subi	r18, 0xFE	; 254
     b8c:	3f 4f       	sbci	r19, 0xFF	; 255
     b8e:	b9 01       	movw	r22, r18
     b90:	0e 94 87 07 	call	0xf0e	; 0xf0e <comparePasscode>
     b94:	81 30       	cpi	r24, 0x01	; 1
     b96:	59 f4       	brne	.+22     	; 0xbae <PASSCODEInit+0x68>
		{
			UART_sendByte(MC_READY_SEND);
     b98:	85 e1       	ldi	r24, 0x15	; 21
     b9a:	0e 94 31 11 	call	0x2262	; 0x2262 <UART_sendByte>
			UART_sendByte(PASSCODE_MATCH);
     b9e:	81 e0       	ldi	r24, 0x01	; 1
     ba0:	0e 94 31 11 	call	0x2262	; 0x2262 <UART_sendByte>
			storePasscode();
     ba4:	0e 94 cd 06 	call	0xd9a	; 0xd9a <storePasscode>

			check = 1;
     ba8:	81 e0       	ldi	r24, 0x01	; 1
     baa:	89 83       	std	Y+1, r24	; 0x01
     bac:	06 c0       	rjmp	.+12     	; 0xbba <PASSCODEInit+0x74>
		}
		else
		{
			UART_sendByte(MC_READY_SEND);
     bae:	85 e1       	ldi	r24, 0x15	; 21
     bb0:	0e 94 31 11 	call	0x2262	; 0x2262 <UART_sendByte>
			UART_sendByte(PASSCODE_NOT_MATCH);
     bb4:	80 e0       	ldi	r24, 0x00	; 0
     bb6:	0e 94 31 11 	call	0x2262	; 0x2262 <UART_sendByte>
void PASSCODEInit(void)
{
	uint8 confirmPasscode[PASSCODE_CH_LENGTH];
	uint8 check = 0;

	while(!check)
     bba:	89 81       	ldd	r24, Y+1	; 0x01
     bbc:	88 23       	and	r24, r24
     bbe:	61 f2       	breq	.-104    	; 0xb58 <PASSCODEInit+0x12>
		{
			UART_sendByte(MC_READY_SEND);
			UART_sendByte(PASSCODE_NOT_MATCH);
		}
	}
}
     bc0:	26 96       	adiw	r28, 0x06	; 6
     bc2:	0f b6       	in	r0, 0x3f	; 63
     bc4:	f8 94       	cli
     bc6:	de bf       	out	0x3e, r29	; 62
     bc8:	0f be       	out	0x3f, r0	; 63
     bca:	cd bf       	out	0x3d, r28	; 61
     bcc:	cf 91       	pop	r28
     bce:	df 91       	pop	r29
     bd0:	08 95       	ret

00000bd2 <DoorOpen>:


void DoorOpen (void)
{
     bd2:	df 93       	push	r29
     bd4:	cf 93       	push	r28
     bd6:	cd b7       	in	r28, 0x3d	; 61
     bd8:	de b7       	in	r29, 0x3e	; 62
	/* OPENINNG THE DOOR */
	g_sec = 0;
     bda:	10 92 77 00 	sts	0x0077, r1
     bde:	10 92 76 00 	sts	0x0076, r1
	DcMotor_Rotate(CW);
     be2:	81 e0       	ldi	r24, 0x01	; 1
     be4:	0e 94 d3 08 	call	0x11a6	; 0x11a6 <DcMotor_Rotate>

	while (g_sec < DOOR_LOCK_UNLOCK_PERIOD);
     be8:	80 91 76 00 	lds	r24, 0x0076
     bec:	90 91 77 00 	lds	r25, 0x0077
     bf0:	8f 30       	cpi	r24, 0x0F	; 15
     bf2:	91 05       	cpc	r25, r1
     bf4:	c8 f3       	brcs	.-14     	; 0xbe8 <DoorOpen+0x16>

	g_sec = 0;
     bf6:	10 92 77 00 	sts	0x0077, r1
     bfa:	10 92 76 00 	sts	0x0076, r1
	/* WAIT 3 SECS  */
	DcMotor_Rotate(STOP);
     bfe:	80 e0       	ldi	r24, 0x00	; 0
     c00:	0e 94 d3 08 	call	0x11a6	; 0x11a6 <DcMotor_Rotate>
	while (g_sec < DOOR_STAND_BY_PERIOD);
     c04:	80 91 76 00 	lds	r24, 0x0076
     c08:	90 91 77 00 	lds	r25, 0x0077
     c0c:	83 30       	cpi	r24, 0x03	; 3
     c0e:	91 05       	cpc	r25, r1
     c10:	c8 f3       	brcs	.-14     	; 0xc04 <DoorOpen+0x32>

	g_sec = 0;
     c12:	10 92 77 00 	sts	0x0077, r1
     c16:	10 92 76 00 	sts	0x0076, r1
	/*CLOSE THE DOOR */
	DcMotor_Rotate(A_CW);
     c1a:	82 e0       	ldi	r24, 0x02	; 2
     c1c:	0e 94 d3 08 	call	0x11a6	; 0x11a6 <DcMotor_Rotate>
	while (g_sec < DOOR_LOCK_UNLOCK_PERIOD);
     c20:	80 91 76 00 	lds	r24, 0x0076
     c24:	90 91 77 00 	lds	r25, 0x0077
     c28:	8f 30       	cpi	r24, 0x0F	; 15
     c2a:	91 05       	cpc	r25, r1
     c2c:	c8 f3       	brcs	.-14     	; 0xc20 <DoorOpen+0x4e>

	DcMotor_Rotate(STOP);
     c2e:	80 e0       	ldi	r24, 0x00	; 0
     c30:	0e 94 d3 08 	call	0x11a6	; 0x11a6 <DcMotor_Rotate>
}
     c34:	cf 91       	pop	r28
     c36:	df 91       	pop	r29
     c38:	08 95       	ret

00000c3a <recivePasscodeByUART>:


void recivePasscodeByUART (uint8 * pass_arr)
{
     c3a:	0f 93       	push	r16
     c3c:	1f 93       	push	r17
     c3e:	df 93       	push	r29
     c40:	cf 93       	push	r28
     c42:	cd b7       	in	r28, 0x3d	; 61
     c44:	de b7       	in	r29, 0x3e	; 62
     c46:	61 97       	sbiw	r28, 0x11	; 17
     c48:	0f b6       	in	r0, 0x3f	; 63
     c4a:	f8 94       	cli
     c4c:	de bf       	out	0x3e, r29	; 62
     c4e:	0f be       	out	0x3f, r0	; 63
     c50:	cd bf       	out	0x3d, r28	; 61
     c52:	99 8b       	std	Y+17, r25	; 0x11
     c54:	88 8b       	std	Y+16, r24	; 0x10
	uint8 count;

	for (count = 0; count < PASSCODE_CH_LENGTH; count++)
     c56:	1f 86       	std	Y+15, r1	; 0x0f
     c58:	81 c0       	rjmp	.+258    	; 0xd5c <recivePasscodeByUART+0x122>
	{
		*(pass_arr+count) = UART_reciveByte();
     c5a:	8f 85       	ldd	r24, Y+15	; 0x0f
     c5c:	28 2f       	mov	r18, r24
     c5e:	30 e0       	ldi	r19, 0x00	; 0
     c60:	88 89       	ldd	r24, Y+16	; 0x10
     c62:	99 89       	ldd	r25, Y+17	; 0x11
     c64:	8c 01       	movw	r16, r24
     c66:	02 0f       	add	r16, r18
     c68:	13 1f       	adc	r17, r19
     c6a:	0e 94 48 11 	call	0x2290	; 0x2290 <UART_reciveByte>
     c6e:	f8 01       	movw	r30, r16
     c70:	80 83       	st	Z, r24
     c72:	80 e0       	ldi	r24, 0x00	; 0
     c74:	90 e0       	ldi	r25, 0x00	; 0
     c76:	a8 ec       	ldi	r26, 0xC8	; 200
     c78:	b2 e4       	ldi	r27, 0x42	; 66
     c7a:	8b 87       	std	Y+11, r24	; 0x0b
     c7c:	9c 87       	std	Y+12, r25	; 0x0c
     c7e:	ad 87       	std	Y+13, r26	; 0x0d
     c80:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     c82:	6b 85       	ldd	r22, Y+11	; 0x0b
     c84:	7c 85       	ldd	r23, Y+12	; 0x0c
     c86:	8d 85       	ldd	r24, Y+13	; 0x0d
     c88:	9e 85       	ldd	r25, Y+14	; 0x0e
     c8a:	20 e0       	ldi	r18, 0x00	; 0
     c8c:	30 e0       	ldi	r19, 0x00	; 0
     c8e:	4a e7       	ldi	r20, 0x7A	; 122
     c90:	53 e4       	ldi	r21, 0x43	; 67
     c92:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c96:	dc 01       	movw	r26, r24
     c98:	cb 01       	movw	r24, r22
     c9a:	8f 83       	std	Y+7, r24	; 0x07
     c9c:	98 87       	std	Y+8, r25	; 0x08
     c9e:	a9 87       	std	Y+9, r26	; 0x09
     ca0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     ca2:	6f 81       	ldd	r22, Y+7	; 0x07
     ca4:	78 85       	ldd	r23, Y+8	; 0x08
     ca6:	89 85       	ldd	r24, Y+9	; 0x09
     ca8:	9a 85       	ldd	r25, Y+10	; 0x0a
     caa:	20 e0       	ldi	r18, 0x00	; 0
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	40 e8       	ldi	r20, 0x80	; 128
     cb0:	5f e3       	ldi	r21, 0x3F	; 63
     cb2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     cb6:	88 23       	and	r24, r24
     cb8:	2c f4       	brge	.+10     	; 0xcc4 <recivePasscodeByUART+0x8a>
		__ticks = 1;
     cba:	81 e0       	ldi	r24, 0x01	; 1
     cbc:	90 e0       	ldi	r25, 0x00	; 0
     cbe:	9e 83       	std	Y+6, r25	; 0x06
     cc0:	8d 83       	std	Y+5, r24	; 0x05
     cc2:	3f c0       	rjmp	.+126    	; 0xd42 <recivePasscodeByUART+0x108>
	else if (__tmp > 65535)
     cc4:	6f 81       	ldd	r22, Y+7	; 0x07
     cc6:	78 85       	ldd	r23, Y+8	; 0x08
     cc8:	89 85       	ldd	r24, Y+9	; 0x09
     cca:	9a 85       	ldd	r25, Y+10	; 0x0a
     ccc:	20 e0       	ldi	r18, 0x00	; 0
     cce:	3f ef       	ldi	r19, 0xFF	; 255
     cd0:	4f e7       	ldi	r20, 0x7F	; 127
     cd2:	57 e4       	ldi	r21, 0x47	; 71
     cd4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     cd8:	18 16       	cp	r1, r24
     cda:	4c f5       	brge	.+82     	; 0xd2e <recivePasscodeByUART+0xf4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     cdc:	6b 85       	ldd	r22, Y+11	; 0x0b
     cde:	7c 85       	ldd	r23, Y+12	; 0x0c
     ce0:	8d 85       	ldd	r24, Y+13	; 0x0d
     ce2:	9e 85       	ldd	r25, Y+14	; 0x0e
     ce4:	20 e0       	ldi	r18, 0x00	; 0
     ce6:	30 e0       	ldi	r19, 0x00	; 0
     ce8:	40 e2       	ldi	r20, 0x20	; 32
     cea:	51 e4       	ldi	r21, 0x41	; 65
     cec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     cf0:	dc 01       	movw	r26, r24
     cf2:	cb 01       	movw	r24, r22
     cf4:	bc 01       	movw	r22, r24
     cf6:	cd 01       	movw	r24, r26
     cf8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     cfc:	dc 01       	movw	r26, r24
     cfe:	cb 01       	movw	r24, r22
     d00:	9e 83       	std	Y+6, r25	; 0x06
     d02:	8d 83       	std	Y+5, r24	; 0x05
     d04:	0f c0       	rjmp	.+30     	; 0xd24 <recivePasscodeByUART+0xea>
     d06:	89 e1       	ldi	r24, 0x19	; 25
     d08:	90 e0       	ldi	r25, 0x00	; 0
     d0a:	9c 83       	std	Y+4, r25	; 0x04
     d0c:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     d0e:	8b 81       	ldd	r24, Y+3	; 0x03
     d10:	9c 81       	ldd	r25, Y+4	; 0x04
     d12:	01 97       	sbiw	r24, 0x01	; 1
     d14:	f1 f7       	brne	.-4      	; 0xd12 <recivePasscodeByUART+0xd8>
     d16:	9c 83       	std	Y+4, r25	; 0x04
     d18:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d1a:	8d 81       	ldd	r24, Y+5	; 0x05
     d1c:	9e 81       	ldd	r25, Y+6	; 0x06
     d1e:	01 97       	sbiw	r24, 0x01	; 1
     d20:	9e 83       	std	Y+6, r25	; 0x06
     d22:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d24:	8d 81       	ldd	r24, Y+5	; 0x05
     d26:	9e 81       	ldd	r25, Y+6	; 0x06
     d28:	00 97       	sbiw	r24, 0x00	; 0
     d2a:	69 f7       	brne	.-38     	; 0xd06 <recivePasscodeByUART+0xcc>
     d2c:	14 c0       	rjmp	.+40     	; 0xd56 <recivePasscodeByUART+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d2e:	6f 81       	ldd	r22, Y+7	; 0x07
     d30:	78 85       	ldd	r23, Y+8	; 0x08
     d32:	89 85       	ldd	r24, Y+9	; 0x09
     d34:	9a 85       	ldd	r25, Y+10	; 0x0a
     d36:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d3a:	dc 01       	movw	r26, r24
     d3c:	cb 01       	movw	r24, r22
     d3e:	9e 83       	std	Y+6, r25	; 0x06
     d40:	8d 83       	std	Y+5, r24	; 0x05
     d42:	8d 81       	ldd	r24, Y+5	; 0x05
     d44:	9e 81       	ldd	r25, Y+6	; 0x06
     d46:	9a 83       	std	Y+2, r25	; 0x02
     d48:	89 83       	std	Y+1, r24	; 0x01
     d4a:	89 81       	ldd	r24, Y+1	; 0x01
     d4c:	9a 81       	ldd	r25, Y+2	; 0x02
     d4e:	01 97       	sbiw	r24, 0x01	; 1
     d50:	f1 f7       	brne	.-4      	; 0xd4e <recivePasscodeByUART+0x114>
     d52:	9a 83       	std	Y+2, r25	; 0x02
     d54:	89 83       	std	Y+1, r24	; 0x01

void recivePasscodeByUART (uint8 * pass_arr)
{
	uint8 count;

	for (count = 0; count < PASSCODE_CH_LENGTH; count++)
     d56:	8f 85       	ldd	r24, Y+15	; 0x0f
     d58:	8f 5f       	subi	r24, 0xFF	; 255
     d5a:	8f 87       	std	Y+15, r24	; 0x0f
     d5c:	8f 85       	ldd	r24, Y+15	; 0x0f
     d5e:	85 30       	cpi	r24, 0x05	; 5
     d60:	08 f4       	brcc	.+2      	; 0xd64 <recivePasscodeByUART+0x12a>
     d62:	7b cf       	rjmp	.-266    	; 0xc5a <recivePasscodeByUART+0x20>
	{
		*(pass_arr+count) = UART_reciveByte();
		_delay_ms(100);
	}
}
     d64:	61 96       	adiw	r28, 0x11	; 17
     d66:	0f b6       	in	r0, 0x3f	; 63
     d68:	f8 94       	cli
     d6a:	de bf       	out	0x3e, r29	; 62
     d6c:	0f be       	out	0x3f, r0	; 63
     d6e:	cd bf       	out	0x3d, r28	; 61
     d70:	cf 91       	pop	r28
     d72:	df 91       	pop	r29
     d74:	1f 91       	pop	r17
     d76:	0f 91       	pop	r16
     d78:	08 95       	ret

00000d7a <timerCallBack>:

void timerCallBack (void)
{
     d7a:	df 93       	push	r29
     d7c:	cf 93       	push	r28
     d7e:	cd b7       	in	r28, 0x3d	; 61
     d80:	de b7       	in	r29, 0x3e	; 62
	g_sec++;
     d82:	80 91 76 00 	lds	r24, 0x0076
     d86:	90 91 77 00 	lds	r25, 0x0077
     d8a:	01 96       	adiw	r24, 0x01	; 1
     d8c:	90 93 77 00 	sts	0x0077, r25
     d90:	80 93 76 00 	sts	0x0076, r24
}
     d94:	cf 91       	pop	r28
     d96:	df 91       	pop	r29
     d98:	08 95       	ret

00000d9a <storePasscode>:

void storePasscode(void)
{
     d9a:	df 93       	push	r29
     d9c:	cf 93       	push	r28
     d9e:	cd b7       	in	r28, 0x3d	; 61
     da0:	de b7       	in	r29, 0x3e	; 62
     da2:	2f 97       	sbiw	r28, 0x0f	; 15
     da4:	0f b6       	in	r0, 0x3f	; 63
     da6:	f8 94       	cli
     da8:	de bf       	out	0x3e, r29	; 62
     daa:	0f be       	out	0x3f, r0	; 63
     dac:	cd bf       	out	0x3d, r28	; 61
	uint8 i ;
	for (i=0 ;i<PASSCODE_CH_LENGTH ; i++)
     dae:	1f 86       	std	Y+15, r1	; 0x0f
     db0:	83 c0       	rjmp	.+262    	; 0xeb8 <storePasscode+0x11e>
	{
		EEPROM_writeByte(EEPROM_STORE_ADDREESS + i, g_recivedPasscode[i]);
     db2:	8f 85       	ldd	r24, Y+15	; 0x0f
     db4:	48 2f       	mov	r20, r24
     db6:	50 e0       	ldi	r21, 0x00	; 0
     db8:	8f 85       	ldd	r24, Y+15	; 0x0f
     dba:	88 2f       	mov	r24, r24
     dbc:	90 e0       	ldi	r25, 0x00	; 0
     dbe:	fc 01       	movw	r30, r24
     dc0:	ec 57       	subi	r30, 0x7C	; 124
     dc2:	ff 4f       	sbci	r31, 0xFF	; 255
     dc4:	20 81       	ld	r18, Z
     dc6:	ca 01       	movw	r24, r20
     dc8:	62 2f       	mov	r22, r18
     dca:	0e 94 13 09 	call	0x1226	; 0x1226 <EEPROM_writeByte>
     dce:	80 e0       	ldi	r24, 0x00	; 0
     dd0:	90 e0       	ldi	r25, 0x00	; 0
     dd2:	a8 ec       	ldi	r26, 0xC8	; 200
     dd4:	b2 e4       	ldi	r27, 0x42	; 66
     dd6:	8b 87       	std	Y+11, r24	; 0x0b
     dd8:	9c 87       	std	Y+12, r25	; 0x0c
     dda:	ad 87       	std	Y+13, r26	; 0x0d
     ddc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     dde:	6b 85       	ldd	r22, Y+11	; 0x0b
     de0:	7c 85       	ldd	r23, Y+12	; 0x0c
     de2:	8d 85       	ldd	r24, Y+13	; 0x0d
     de4:	9e 85       	ldd	r25, Y+14	; 0x0e
     de6:	20 e0       	ldi	r18, 0x00	; 0
     de8:	30 e0       	ldi	r19, 0x00	; 0
     dea:	4a e7       	ldi	r20, 0x7A	; 122
     dec:	53 e4       	ldi	r21, 0x43	; 67
     dee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     df2:	dc 01       	movw	r26, r24
     df4:	cb 01       	movw	r24, r22
     df6:	8f 83       	std	Y+7, r24	; 0x07
     df8:	98 87       	std	Y+8, r25	; 0x08
     dfa:	a9 87       	std	Y+9, r26	; 0x09
     dfc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     dfe:	6f 81       	ldd	r22, Y+7	; 0x07
     e00:	78 85       	ldd	r23, Y+8	; 0x08
     e02:	89 85       	ldd	r24, Y+9	; 0x09
     e04:	9a 85       	ldd	r25, Y+10	; 0x0a
     e06:	20 e0       	ldi	r18, 0x00	; 0
     e08:	30 e0       	ldi	r19, 0x00	; 0
     e0a:	40 e8       	ldi	r20, 0x80	; 128
     e0c:	5f e3       	ldi	r21, 0x3F	; 63
     e0e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     e12:	88 23       	and	r24, r24
     e14:	2c f4       	brge	.+10     	; 0xe20 <storePasscode+0x86>
		__ticks = 1;
     e16:	81 e0       	ldi	r24, 0x01	; 1
     e18:	90 e0       	ldi	r25, 0x00	; 0
     e1a:	9e 83       	std	Y+6, r25	; 0x06
     e1c:	8d 83       	std	Y+5, r24	; 0x05
     e1e:	3f c0       	rjmp	.+126    	; 0xe9e <storePasscode+0x104>
	else if (__tmp > 65535)
     e20:	6f 81       	ldd	r22, Y+7	; 0x07
     e22:	78 85       	ldd	r23, Y+8	; 0x08
     e24:	89 85       	ldd	r24, Y+9	; 0x09
     e26:	9a 85       	ldd	r25, Y+10	; 0x0a
     e28:	20 e0       	ldi	r18, 0x00	; 0
     e2a:	3f ef       	ldi	r19, 0xFF	; 255
     e2c:	4f e7       	ldi	r20, 0x7F	; 127
     e2e:	57 e4       	ldi	r21, 0x47	; 71
     e30:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     e34:	18 16       	cp	r1, r24
     e36:	4c f5       	brge	.+82     	; 0xe8a <storePasscode+0xf0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e38:	6b 85       	ldd	r22, Y+11	; 0x0b
     e3a:	7c 85       	ldd	r23, Y+12	; 0x0c
     e3c:	8d 85       	ldd	r24, Y+13	; 0x0d
     e3e:	9e 85       	ldd	r25, Y+14	; 0x0e
     e40:	20 e0       	ldi	r18, 0x00	; 0
     e42:	30 e0       	ldi	r19, 0x00	; 0
     e44:	40 e2       	ldi	r20, 0x20	; 32
     e46:	51 e4       	ldi	r21, 0x41	; 65
     e48:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e4c:	dc 01       	movw	r26, r24
     e4e:	cb 01       	movw	r24, r22
     e50:	bc 01       	movw	r22, r24
     e52:	cd 01       	movw	r24, r26
     e54:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e58:	dc 01       	movw	r26, r24
     e5a:	cb 01       	movw	r24, r22
     e5c:	9e 83       	std	Y+6, r25	; 0x06
     e5e:	8d 83       	std	Y+5, r24	; 0x05
     e60:	0f c0       	rjmp	.+30     	; 0xe80 <storePasscode+0xe6>
     e62:	89 e1       	ldi	r24, 0x19	; 25
     e64:	90 e0       	ldi	r25, 0x00	; 0
     e66:	9c 83       	std	Y+4, r25	; 0x04
     e68:	8b 83       	std	Y+3, r24	; 0x03
     e6a:	8b 81       	ldd	r24, Y+3	; 0x03
     e6c:	9c 81       	ldd	r25, Y+4	; 0x04
     e6e:	01 97       	sbiw	r24, 0x01	; 1
     e70:	f1 f7       	brne	.-4      	; 0xe6e <storePasscode+0xd4>
     e72:	9c 83       	std	Y+4, r25	; 0x04
     e74:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e76:	8d 81       	ldd	r24, Y+5	; 0x05
     e78:	9e 81       	ldd	r25, Y+6	; 0x06
     e7a:	01 97       	sbiw	r24, 0x01	; 1
     e7c:	9e 83       	std	Y+6, r25	; 0x06
     e7e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e80:	8d 81       	ldd	r24, Y+5	; 0x05
     e82:	9e 81       	ldd	r25, Y+6	; 0x06
     e84:	00 97       	sbiw	r24, 0x00	; 0
     e86:	69 f7       	brne	.-38     	; 0xe62 <storePasscode+0xc8>
     e88:	14 c0       	rjmp	.+40     	; 0xeb2 <storePasscode+0x118>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e8a:	6f 81       	ldd	r22, Y+7	; 0x07
     e8c:	78 85       	ldd	r23, Y+8	; 0x08
     e8e:	89 85       	ldd	r24, Y+9	; 0x09
     e90:	9a 85       	ldd	r25, Y+10	; 0x0a
     e92:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e96:	dc 01       	movw	r26, r24
     e98:	cb 01       	movw	r24, r22
     e9a:	9e 83       	std	Y+6, r25	; 0x06
     e9c:	8d 83       	std	Y+5, r24	; 0x05
     e9e:	8d 81       	ldd	r24, Y+5	; 0x05
     ea0:	9e 81       	ldd	r25, Y+6	; 0x06
     ea2:	9a 83       	std	Y+2, r25	; 0x02
     ea4:	89 83       	std	Y+1, r24	; 0x01
     ea6:	89 81       	ldd	r24, Y+1	; 0x01
     ea8:	9a 81       	ldd	r25, Y+2	; 0x02
     eaa:	01 97       	sbiw	r24, 0x01	; 1
     eac:	f1 f7       	brne	.-4      	; 0xeaa <storePasscode+0x110>
     eae:	9a 83       	std	Y+2, r25	; 0x02
     eb0:	89 83       	std	Y+1, r24	; 0x01
}

void storePasscode(void)
{
	uint8 i ;
	for (i=0 ;i<PASSCODE_CH_LENGTH ; i++)
     eb2:	8f 85       	ldd	r24, Y+15	; 0x0f
     eb4:	8f 5f       	subi	r24, 0xFF	; 255
     eb6:	8f 87       	std	Y+15, r24	; 0x0f
     eb8:	8f 85       	ldd	r24, Y+15	; 0x0f
     eba:	85 30       	cpi	r24, 0x05	; 5
     ebc:	08 f4       	brcc	.+2      	; 0xec0 <storePasscode+0x126>
     ebe:	79 cf       	rjmp	.-270    	; 0xdb2 <storePasscode+0x18>
	{
		EEPROM_writeByte(EEPROM_STORE_ADDREESS + i, g_recivedPasscode[i]);
		_delay_ms(100);
	}
}
     ec0:	2f 96       	adiw	r28, 0x0f	; 15
     ec2:	0f b6       	in	r0, 0x3f	; 63
     ec4:	f8 94       	cli
     ec6:	de bf       	out	0x3e, r29	; 62
     ec8:	0f be       	out	0x3f, r0	; 63
     eca:	cd bf       	out	0x3d, r28	; 61
     ecc:	cf 91       	pop	r28
     ece:	df 91       	pop	r29
     ed0:	08 95       	ret

00000ed2 <updateStoredPasscode>:


void updateStoredPasscode(void)
{
     ed2:	df 93       	push	r29
     ed4:	cf 93       	push	r28
     ed6:	0f 92       	push	r0
     ed8:	cd b7       	in	r28, 0x3d	; 61
     eda:	de b7       	in	r29, 0x3e	; 62

	uint8 i;
	for (i = 0; i < PASSCODE_CH_LENGTH; i++)
     edc:	19 82       	std	Y+1, r1	; 0x01
     ede:	10 c0       	rjmp	.+32     	; 0xf00 <updateStoredPasscode+0x2e>
	{
		EEPROM_readByte(EEPROM_STORE_ADDREESS+i, g_storedPasscode+i);
     ee0:	89 81       	ldd	r24, Y+1	; 0x01
     ee2:	48 2f       	mov	r20, r24
     ee4:	50 e0       	ldi	r21, 0x00	; 0
     ee6:	89 81       	ldd	r24, Y+1	; 0x01
     ee8:	88 2f       	mov	r24, r24
     eea:	90 e0       	ldi	r25, 0x00	; 0
     eec:	9c 01       	movw	r18, r24
     eee:	21 58       	subi	r18, 0x81	; 129
     ef0:	3f 4f       	sbci	r19, 0xFF	; 255
     ef2:	ca 01       	movw	r24, r20
     ef4:	b9 01       	movw	r22, r18
     ef6:	0e 94 54 09 	call	0x12a8	; 0x12a8 <EEPROM_readByte>

void updateStoredPasscode(void)
{

	uint8 i;
	for (i = 0; i < PASSCODE_CH_LENGTH; i++)
     efa:	89 81       	ldd	r24, Y+1	; 0x01
     efc:	8f 5f       	subi	r24, 0xFF	; 255
     efe:	89 83       	std	Y+1, r24	; 0x01
     f00:	89 81       	ldd	r24, Y+1	; 0x01
     f02:	85 30       	cpi	r24, 0x05	; 5
     f04:	68 f3       	brcs	.-38     	; 0xee0 <updateStoredPasscode+0xe>
	{
		EEPROM_readByte(EEPROM_STORE_ADDREESS+i, g_storedPasscode+i);
	}
}
     f06:	0f 90       	pop	r0
     f08:	cf 91       	pop	r28
     f0a:	df 91       	pop	r29
     f0c:	08 95       	ret

00000f0e <comparePasscode>:

uint8 comparePasscode(uint8 a_passcode1[PASSCODE_CH_LENGTH],uint8 a_passcode2[PASSCODE_CH_LENGTH])
{
     f0e:	df 93       	push	r29
     f10:	cf 93       	push	r28
     f12:	00 d0       	rcall	.+0      	; 0xf14 <comparePasscode+0x6>
     f14:	00 d0       	rcall	.+0      	; 0xf16 <comparePasscode+0x8>
     f16:	00 d0       	rcall	.+0      	; 0xf18 <comparePasscode+0xa>
     f18:	cd b7       	in	r28, 0x3d	; 61
     f1a:	de b7       	in	r29, 0x3e	; 62
     f1c:	9b 83       	std	Y+3, r25	; 0x03
     f1e:	8a 83       	std	Y+2, r24	; 0x02
     f20:	7d 83       	std	Y+5, r23	; 0x05
     f22:	6c 83       	std	Y+4, r22	; 0x04
	updateStoredPasscode();
     f24:	0e 94 69 07 	call	0xed2	; 0xed2 <updateStoredPasscode>

	uint8 i;

	for(i = 0; i < PASSCODE_CH_LENGTH; i++)
     f28:	19 82       	std	Y+1, r1	; 0x01
     f2a:	19 c0       	rjmp	.+50     	; 0xf5e <comparePasscode+0x50>
	{
		if (a_passcode1[i] != a_passcode2[i])
     f2c:	89 81       	ldd	r24, Y+1	; 0x01
     f2e:	28 2f       	mov	r18, r24
     f30:	30 e0       	ldi	r19, 0x00	; 0
     f32:	8a 81       	ldd	r24, Y+2	; 0x02
     f34:	9b 81       	ldd	r25, Y+3	; 0x03
     f36:	fc 01       	movw	r30, r24
     f38:	e2 0f       	add	r30, r18
     f3a:	f3 1f       	adc	r31, r19
     f3c:	40 81       	ld	r20, Z
     f3e:	89 81       	ldd	r24, Y+1	; 0x01
     f40:	28 2f       	mov	r18, r24
     f42:	30 e0       	ldi	r19, 0x00	; 0
     f44:	8c 81       	ldd	r24, Y+4	; 0x04
     f46:	9d 81       	ldd	r25, Y+5	; 0x05
     f48:	fc 01       	movw	r30, r24
     f4a:	e2 0f       	add	r30, r18
     f4c:	f3 1f       	adc	r31, r19
     f4e:	80 81       	ld	r24, Z
     f50:	48 17       	cp	r20, r24
     f52:	11 f0       	breq	.+4      	; 0xf58 <comparePasscode+0x4a>
		{
			return PASSCODE_NOT_MATCH;
     f54:	1e 82       	std	Y+6, r1	; 0x06
     f56:	08 c0       	rjmp	.+16     	; 0xf68 <comparePasscode+0x5a>
{
	updateStoredPasscode();

	uint8 i;

	for(i = 0; i < PASSCODE_CH_LENGTH; i++)
     f58:	89 81       	ldd	r24, Y+1	; 0x01
     f5a:	8f 5f       	subi	r24, 0xFF	; 255
     f5c:	89 83       	std	Y+1, r24	; 0x01
     f5e:	89 81       	ldd	r24, Y+1	; 0x01
     f60:	85 30       	cpi	r24, 0x05	; 5
     f62:	20 f3       	brcs	.-56     	; 0xf2c <comparePasscode+0x1e>
		{
			return PASSCODE_NOT_MATCH;
		}
	}

	return PASSCODE_MATCH;
     f64:	81 e0       	ldi	r24, 0x01	; 1
     f66:	8e 83       	std	Y+6, r24	; 0x06
     f68:	8e 81       	ldd	r24, Y+6	; 0x06
}
     f6a:	26 96       	adiw	r28, 0x06	; 6
     f6c:	0f b6       	in	r0, 0x3f	; 63
     f6e:	f8 94       	cli
     f70:	de bf       	out	0x3e, r29	; 62
     f72:	0f be       	out	0x3f, r0	; 63
     f74:	cd bf       	out	0x3d, r28	; 61
     f76:	cf 91       	pop	r28
     f78:	df 91       	pop	r29
     f7a:	08 95       	ret

00000f7c <main>:
/*******************************************************************************
 *                                APPLICATION                                  *
 *******************************************************************************/

int main (void)
{
     f7c:	df 93       	push	r29
     f7e:	cf 93       	push	r28
     f80:	cd b7       	in	r28, 0x3d	; 61
     f82:	de b7       	in	r29, 0x3e	; 62
     f84:	69 97       	sbiw	r28, 0x19	; 25
     f86:	0f b6       	in	r0, 0x3f	; 63
     f88:	f8 94       	cli
     f8a:	de bf       	out	0x3e, r29	; 62
     f8c:	0f be       	out	0x3f, r0	; 63
     f8e:	cd bf       	out	0x3d, r28	; 61
	/*enable global interrupt*/
	SREG |= (1 << 7);
     f90:	af e5       	ldi	r26, 0x5F	; 95
     f92:	b0 e0       	ldi	r27, 0x00	; 0
     f94:	ef e5       	ldi	r30, 0x5F	; 95
     f96:	f0 e0       	ldi	r31, 0x00	; 0
     f98:	80 81       	ld	r24, Z
     f9a:	80 68       	ori	r24, 0x80	; 128
     f9c:	8c 93       	st	X, r24


	/*initialize Timer */

	TIMER_ConfigType Timer_Config = {TIMER1 , F_CPU_1024 , CTC, 7813 , 0};
     f9e:	ce 01       	movw	r24, r28
     fa0:	02 96       	adiw	r24, 0x02	; 2
     fa2:	99 8b       	std	Y+17, r25	; 0x11
     fa4:	88 8b       	std	Y+16, r24	; 0x10
     fa6:	eb e6       	ldi	r30, 0x6B	; 107
     fa8:	f0 e0       	ldi	r31, 0x00	; 0
     faa:	fb 8b       	std	Y+19, r31	; 0x13
     fac:	ea 8b       	std	Y+18, r30	; 0x12
     fae:	fb e0       	ldi	r31, 0x0B	; 11
     fb0:	fc 8b       	std	Y+20, r31	; 0x14
     fb2:	ea 89       	ldd	r30, Y+18	; 0x12
     fb4:	fb 89       	ldd	r31, Y+19	; 0x13
     fb6:	00 80       	ld	r0, Z
     fb8:	8a 89       	ldd	r24, Y+18	; 0x12
     fba:	9b 89       	ldd	r25, Y+19	; 0x13
     fbc:	01 96       	adiw	r24, 0x01	; 1
     fbe:	9b 8b       	std	Y+19, r25	; 0x13
     fc0:	8a 8b       	std	Y+18, r24	; 0x12
     fc2:	e8 89       	ldd	r30, Y+16	; 0x10
     fc4:	f9 89       	ldd	r31, Y+17	; 0x11
     fc6:	00 82       	st	Z, r0
     fc8:	88 89       	ldd	r24, Y+16	; 0x10
     fca:	99 89       	ldd	r25, Y+17	; 0x11
     fcc:	01 96       	adiw	r24, 0x01	; 1
     fce:	99 8b       	std	Y+17, r25	; 0x11
     fd0:	88 8b       	std	Y+16, r24	; 0x10
     fd2:	9c 89       	ldd	r25, Y+20	; 0x14
     fd4:	91 50       	subi	r25, 0x01	; 1
     fd6:	9c 8b       	std	Y+20, r25	; 0x14
     fd8:	ec 89       	ldd	r30, Y+20	; 0x14
     fda:	ee 23       	and	r30, r30
     fdc:	51 f7       	brne	.-44     	; 0xfb2 <main+0x36>
	Timer_init(&Timer_Config);
     fde:	ce 01       	movw	r24, r28
     fe0:	02 96       	adiw	r24, 0x02	; 2
     fe2:	0e 94 24 0e 	call	0x1c48	; 0x1c48 <Timer_init>
	Timer1_setCallBack(timerCallBack);
     fe6:	8d eb       	ldi	r24, 0xBD	; 189
     fe8:	96 e0       	ldi	r25, 0x06	; 6
     fea:	0e 94 77 0f 	call	0x1eee	; 0x1eee <Timer1_setCallBack>


	UART_ConfigType UART_Config= {DISABLED ,  _8_BIT , _1_BIT} ;
     fee:	ce 01       	movw	r24, r28
     ff0:	0d 96       	adiw	r24, 0x0d	; 13
     ff2:	9e 8b       	std	Y+22, r25	; 0x16
     ff4:	8d 8b       	std	Y+21, r24	; 0x15
     ff6:	e8 e6       	ldi	r30, 0x68	; 104
     ff8:	f0 e0       	ldi	r31, 0x00	; 0
     ffa:	f8 8f       	std	Y+24, r31	; 0x18
     ffc:	ef 8b       	std	Y+23, r30	; 0x17
     ffe:	f3 e0       	ldi	r31, 0x03	; 3
    1000:	f9 8f       	std	Y+25, r31	; 0x19
    1002:	ef 89       	ldd	r30, Y+23	; 0x17
    1004:	f8 8d       	ldd	r31, Y+24	; 0x18
    1006:	00 80       	ld	r0, Z
    1008:	8f 89       	ldd	r24, Y+23	; 0x17
    100a:	98 8d       	ldd	r25, Y+24	; 0x18
    100c:	01 96       	adiw	r24, 0x01	; 1
    100e:	98 8f       	std	Y+24, r25	; 0x18
    1010:	8f 8b       	std	Y+23, r24	; 0x17
    1012:	ed 89       	ldd	r30, Y+21	; 0x15
    1014:	fe 89       	ldd	r31, Y+22	; 0x16
    1016:	00 82       	st	Z, r0
    1018:	8d 89       	ldd	r24, Y+21	; 0x15
    101a:	9e 89       	ldd	r25, Y+22	; 0x16
    101c:	01 96       	adiw	r24, 0x01	; 1
    101e:	9e 8b       	std	Y+22, r25	; 0x16
    1020:	8d 8b       	std	Y+21, r24	; 0x15
    1022:	99 8d       	ldd	r25, Y+25	; 0x19
    1024:	91 50       	subi	r25, 0x01	; 1
    1026:	99 8f       	std	Y+25, r25	; 0x19
    1028:	e9 8d       	ldd	r30, Y+25	; 0x19
    102a:	ee 23       	and	r30, r30
    102c:	51 f7       	brne	.-44     	; 0x1002 <main+0x86>

	UART_init(9600,&UART_Config)	;
    102e:	9e 01       	movw	r18, r28
    1030:	23 5f       	subi	r18, 0xF3	; 243
    1032:	3f 4f       	sbci	r19, 0xFF	; 255
    1034:	60 e8       	ldi	r22, 0x80	; 128
    1036:	75 e2       	ldi	r23, 0x25	; 37
    1038:	80 e0       	ldi	r24, 0x00	; 0
    103a:	90 e0       	ldi	r25, 0x00	; 0
    103c:	a9 01       	movw	r20, r18
    103e:	0e 94 9f 10 	call	0x213e	; 0x213e <UART_init>

	DcMotor_Init();
    1042:	0e 94 b8 08 	call	0x1170	; 0x1170 <DcMotor_Init>

	BUZZER_init();
    1046:	0e 94 94 08 	call	0x1128	; 0x1128 <BUZZER_init>

	PASSCODEInit();
    104a:	0e 94 a3 05 	call	0xb46	; 0xb46 <PASSCODEInit>

	uint8 byteRecived = 0;
    104e:	19 82       	std	Y+1, r1	; 0x01



	while (1)
	{
		if (UART_reciveByte() == MC_READY_SEND)
    1050:	0e 94 48 11 	call	0x2290	; 0x2290 <UART_reciveByte>
    1054:	85 31       	cpi	r24, 0x15	; 21
    1056:	e1 f7       	brne	.-8      	; 0x1050 <main+0xd4>
		{
			recivePasscodeByUART(g_recivedPasscode);
    1058:	84 e8       	ldi	r24, 0x84	; 132
    105a:	90 e0       	ldi	r25, 0x00	; 0
    105c:	0e 94 1d 06 	call	0xc3a	; 0xc3a <recivePasscodeByUART>
			byteRecived = UART_reciveByte();
    1060:	0e 94 48 11 	call	0x2290	; 0x2290 <UART_reciveByte>
    1064:	89 83       	std	Y+1, r24	; 0x01

			if ( byteRecived == '+')
    1066:	89 81       	ldd	r24, Y+1	; 0x01
    1068:	8b 32       	cpi	r24, 0x2B	; 43
    106a:	69 f5       	brne	.+90     	; 0x10c6 <main+0x14a>
			{
				if (comparePasscode(g_storedPasscode, g_recivedPasscode) == PASSCODE_MATCH)
    106c:	8f e7       	ldi	r24, 0x7F	; 127
    106e:	90 e0       	ldi	r25, 0x00	; 0
    1070:	24 e8       	ldi	r18, 0x84	; 132
    1072:	30 e0       	ldi	r19, 0x00	; 0
    1074:	b9 01       	movw	r22, r18
    1076:	0e 94 87 07 	call	0xf0e	; 0xf0e <comparePasscode>
    107a:	81 30       	cpi	r24, 0x01	; 1
    107c:	31 f4       	brne	.+12     	; 0x108a <main+0x10e>
				{
					UART_sendByte(DOOR_UNLOOK); /* inform HMI ECU to display that door is unlocking */
    107e:	85 e2       	ldi	r24, 0x25	; 37
    1080:	0e 94 31 11 	call	0x2262	; 0x2262 <UART_sendByte>
					DoorOpen(); /* start opening door process/task */
    1084:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <DoorOpen>
    1088:	e3 cf       	rjmp	.-58     	; 0x1050 <main+0xd4>
				}
				else
				{
					UART_sendByte(PASSCODE_WRONG);
    108a:	80 e3       	ldi	r24, 0x30	; 48
    108c:	0e 94 31 11 	call	0x2262	; 0x2262 <UART_sendByte>
					/* count number of wrong attempts, and turn on a buzzer of it exceeds the limit */
					g_wrongAttemptCtr++;
    1090:	80 91 78 00 	lds	r24, 0x0078
    1094:	8f 5f       	subi	r24, 0xFF	; 255
    1096:	80 93 78 00 	sts	0x0078, r24

					if (g_wrongAttemptCtr == NUMBER_OF_ALLOWED_WRONG_ATTEMPTS)
    109a:	80 91 78 00 	lds	r24, 0x0078
    109e:	83 30       	cpi	r24, 0x03	; 3
    10a0:	b9 f6       	brne	.-82     	; 0x1050 <main+0xd4>
					{
						BUZZER_On();
    10a2:	0e 94 a0 08 	call	0x1140	; 0x1140 <BUZZER_On>
						g_sec = 0;
    10a6:	10 92 77 00 	sts	0x0077, r1
    10aa:	10 92 76 00 	sts	0x0076, r1
						while(g_sec < ALARM_PERIOD); /* turn on alarm for a certain period */
    10ae:	80 91 76 00 	lds	r24, 0x0076
    10b2:	90 91 77 00 	lds	r25, 0x0077
    10b6:	8c 33       	cpi	r24, 0x3C	; 60
    10b8:	91 05       	cpc	r25, r1
    10ba:	c8 f3       	brcs	.-14     	; 0x10ae <main+0x132>
						BUZZER_Off();
    10bc:	0e 94 ac 08 	call	0x1158	; 0x1158 <BUZZER_Off>
						g_wrongAttemptCtr = 0; /* reset the counter */
    10c0:	10 92 78 00 	sts	0x0078, r1
    10c4:	c5 cf       	rjmp	.-118    	; 0x1050 <main+0xd4>
					}
				}


			}
			else if (byteRecived == CHANGE_PASSCODE_OPTION)
    10c6:	89 81       	ldd	r24, Y+1	; 0x01
    10c8:	88 31       	cpi	r24, 0x18	; 24
    10ca:	11 f6       	brne	.-124    	; 0x1050 <main+0xd4>
			{
				if (comparePasscode(g_storedPasscode, g_recivedPasscode) == PASSCODE_MATCH)
    10cc:	8f e7       	ldi	r24, 0x7F	; 127
    10ce:	90 e0       	ldi	r25, 0x00	; 0
    10d0:	24 e8       	ldi	r18, 0x84	; 132
    10d2:	30 e0       	ldi	r19, 0x00	; 0
    10d4:	b9 01       	movw	r22, r18
    10d6:	0e 94 87 07 	call	0xf0e	; 0xf0e <comparePasscode>
    10da:	81 30       	cpi	r24, 0x01	; 1
    10dc:	31 f4       	brne	.+12     	; 0x10ea <main+0x16e>
				{
					UART_sendByte(CHANGE_PASSCODE); /* inform HMI to process changing password */
    10de:	81 e3       	ldi	r24, 0x31	; 49
    10e0:	0e 94 31 11 	call	0x2262	; 0x2262 <UART_sendByte>
					PASSCODEInit();
    10e4:	0e 94 a3 05 	call	0xb46	; 0xb46 <PASSCODEInit>
    10e8:	b3 cf       	rjmp	.-154    	; 0x1050 <main+0xd4>
				}
				else
				{
					UART_sendByte(PASSCODE_WRONG);
    10ea:	80 e3       	ldi	r24, 0x30	; 48
    10ec:	0e 94 31 11 	call	0x2262	; 0x2262 <UART_sendByte>
					/* count number of wrong attempts, and turn on a buzzer of it exceeds the limit */
					g_wrongAttemptCtr++;
    10f0:	80 91 78 00 	lds	r24, 0x0078
    10f4:	8f 5f       	subi	r24, 0xFF	; 255
    10f6:	80 93 78 00 	sts	0x0078, r24

					if (g_wrongAttemptCtr == NUMBER_OF_ALLOWED_WRONG_ATTEMPTS)
    10fa:	80 91 78 00 	lds	r24, 0x0078
    10fe:	83 30       	cpi	r24, 0x03	; 3
    1100:	09 f0       	breq	.+2      	; 0x1104 <main+0x188>
    1102:	a6 cf       	rjmp	.-180    	; 0x1050 <main+0xd4>
					{
						BUZZER_On();
    1104:	0e 94 a0 08 	call	0x1140	; 0x1140 <BUZZER_On>
						g_sec = 0;
    1108:	10 92 77 00 	sts	0x0077, r1
    110c:	10 92 76 00 	sts	0x0076, r1
						while(g_sec < ALARM_PERIOD); /* turn on alarm for a certain period */
    1110:	80 91 76 00 	lds	r24, 0x0076
    1114:	90 91 77 00 	lds	r25, 0x0077
    1118:	8c 33       	cpi	r24, 0x3C	; 60
    111a:	91 05       	cpc	r25, r1
    111c:	c8 f3       	brcs	.-14     	; 0x1110 <main+0x194>
						BUZZER_Off();
    111e:	0e 94 ac 08 	call	0x1158	; 0x1158 <BUZZER_Off>
						g_wrongAttemptCtr = 0; /* reset the counter */
    1122:	10 92 78 00 	sts	0x0078, r1
    1126:	94 cf       	rjmp	.-216    	; 0x1050 <main+0xd4>

00001128 <BUZZER_init>:




void BUZZER_init(void)
{
    1128:	df 93       	push	r29
    112a:	cf 93       	push	r28
    112c:	cd b7       	in	r28, 0x3d	; 61
    112e:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(BUZZER_PORT_ID,Buzzer_PIN_ID,PIN_OUTPUT);
    1130:	82 e0       	ldi	r24, 0x02	; 2
    1132:	62 e0       	ldi	r22, 0x02	; 2
    1134:	41 e0       	ldi	r20, 0x01	; 1
    1136:	0e 94 b4 09 	call	0x1368	; 0x1368 <GPIO_setupPinDirection>

}
    113a:	cf 91       	pop	r28
    113c:	df 91       	pop	r29
    113e:	08 95       	ret

00001140 <BUZZER_On>:


void BUZZER_On(void)
{
    1140:	df 93       	push	r29
    1142:	cf 93       	push	r28
    1144:	cd b7       	in	r28, 0x3d	; 61
    1146:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT_ID, Buzzer_PIN_ID, LOGIC_HIGH);
    1148:	82 e0       	ldi	r24, 0x02	; 2
    114a:	62 e0       	ldi	r22, 0x02	; 2
    114c:	41 e0       	ldi	r20, 0x01	; 1
    114e:	0e 94 9f 0a 	call	0x153e	; 0x153e <GPIO_writePin>

}
    1152:	cf 91       	pop	r28
    1154:	df 91       	pop	r29
    1156:	08 95       	ret

00001158 <BUZZER_Off>:

void BUZZER_Off(void)
{
    1158:	df 93       	push	r29
    115a:	cf 93       	push	r28
    115c:	cd b7       	in	r28, 0x3d	; 61
    115e:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT_ID, Buzzer_PIN_ID, LOGIC_LOW);
    1160:	82 e0       	ldi	r24, 0x02	; 2
    1162:	62 e0       	ldi	r22, 0x02	; 2
    1164:	40 e0       	ldi	r20, 0x00	; 0
    1166:	0e 94 9f 0a 	call	0x153e	; 0x153e <GPIO_writePin>

}
    116a:	cf 91       	pop	r28
    116c:	df 91       	pop	r29
    116e:	08 95       	ret

00001170 <DcMotor_Init>:
 *                      Functions Definitions                                  *
 *******************************************************************************/


void DcMotor_Init(void)
{
    1170:	df 93       	push	r29
    1172:	cf 93       	push	r28
    1174:	cd b7       	in	r28, 0x3d	; 61
    1176:	de b7       	in	r29, 0x3e	; 62

	/*  The Function responsible for setup the direction for the two motor pins through the GPIO driver.	 */
	GPIO_setupPinDirection(DC_MOTOR_PORT_ID, DC_MOTOR_IN1_PIN_ID, PIN_OUTPUT);
    1178:	82 e0       	ldi	r24, 0x02	; 2
    117a:	63 e0       	ldi	r22, 0x03	; 3
    117c:	41 e0       	ldi	r20, 0x01	; 1
    117e:	0e 94 b4 09 	call	0x1368	; 0x1368 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(DC_MOTOR_PORT_ID, DC_MOTOR_IN2_PIN_ID, PIN_OUTPUT);
    1182:	82 e0       	ldi	r24, 0x02	; 2
    1184:	64 e0       	ldi	r22, 0x04	; 4
    1186:	41 e0       	ldi	r20, 0x01	; 1
    1188:	0e 94 b4 09 	call	0x1368	; 0x1368 <GPIO_setupPinDirection>




	/* Stop at the DC-Motor at the beginning through the GPIO driver. */
	GPIO_writePin(DC_MOTOR_PORT_ID,DC_MOTOR_IN1_PIN_ID,LOGIC_LOW);
    118c:	82 e0       	ldi	r24, 0x02	; 2
    118e:	63 e0       	ldi	r22, 0x03	; 3
    1190:	40 e0       	ldi	r20, 0x00	; 0
    1192:	0e 94 9f 0a 	call	0x153e	; 0x153e <GPIO_writePin>
	GPIO_writePin(DC_MOTOR_PORT_ID,DC_MOTOR_IN2_PIN_ID,LOGIC_LOW);
    1196:	82 e0       	ldi	r24, 0x02	; 2
    1198:	64 e0       	ldi	r22, 0x04	; 4
    119a:	40 e0       	ldi	r20, 0x00	; 0
    119c:	0e 94 9f 0a 	call	0x153e	; 0x153e <GPIO_writePin>


}
    11a0:	cf 91       	pop	r28
    11a2:	df 91       	pop	r29
    11a4:	08 95       	ret

000011a6 <DcMotor_Rotate>:


void DcMotor_Rotate(DcMotor_State state)
{
    11a6:	df 93       	push	r29
    11a8:	cf 93       	push	r28
    11aa:	00 d0       	rcall	.+0      	; 0x11ac <DcMotor_Rotate+0x6>
    11ac:	0f 92       	push	r0
    11ae:	cd b7       	in	r28, 0x3d	; 61
    11b0:	de b7       	in	r29, 0x3e	; 62
    11b2:	89 83       	std	Y+1, r24	; 0x01

	switch(state)
    11b4:	89 81       	ldd	r24, Y+1	; 0x01
    11b6:	28 2f       	mov	r18, r24
    11b8:	30 e0       	ldi	r19, 0x00	; 0
    11ba:	3b 83       	std	Y+3, r19	; 0x03
    11bc:	2a 83       	std	Y+2, r18	; 0x02
    11be:	8a 81       	ldd	r24, Y+2	; 0x02
    11c0:	9b 81       	ldd	r25, Y+3	; 0x03
    11c2:	81 30       	cpi	r24, 0x01	; 1
    11c4:	91 05       	cpc	r25, r1
    11c6:	a1 f0       	breq	.+40     	; 0x11f0 <DcMotor_Rotate+0x4a>
    11c8:	2a 81       	ldd	r18, Y+2	; 0x02
    11ca:	3b 81       	ldd	r19, Y+3	; 0x03
    11cc:	22 30       	cpi	r18, 0x02	; 2
    11ce:	31 05       	cpc	r19, r1
    11d0:	d1 f0       	breq	.+52     	; 0x1206 <DcMotor_Rotate+0x60>
    11d2:	8a 81       	ldd	r24, Y+2	; 0x02
    11d4:	9b 81       	ldd	r25, Y+3	; 0x03
    11d6:	00 97       	sbiw	r24, 0x00	; 0
    11d8:	01 f5       	brne	.+64     	; 0x121a <DcMotor_Rotate+0x74>
	{
	case STOP:
/*Stop the Motor*/
		GPIO_writePin(DC_MOTOR_PORT_ID,DC_MOTOR_IN1_PIN_ID,LOGIC_LOW);
    11da:	82 e0       	ldi	r24, 0x02	; 2
    11dc:	63 e0       	ldi	r22, 0x03	; 3
    11de:	40 e0       	ldi	r20, 0x00	; 0
    11e0:	0e 94 9f 0a 	call	0x153e	; 0x153e <GPIO_writePin>
		GPIO_writePin(DC_MOTOR_PORT_ID,DC_MOTOR_IN2_PIN_ID,LOGIC_LOW);
    11e4:	82 e0       	ldi	r24, 0x02	; 2
    11e6:	64 e0       	ldi	r22, 0x04	; 4
    11e8:	40 e0       	ldi	r20, 0x00	; 0
    11ea:	0e 94 9f 0a 	call	0x153e	; 0x153e <GPIO_writePin>
    11ee:	15 c0       	rjmp	.+42     	; 0x121a <DcMotor_Rotate+0x74>

		break;
	case CW:
		/*Rotate the Motor Clockwise*/

		GPIO_writePin(DC_MOTOR_PORT_ID,DC_MOTOR_IN1_PIN_ID,LOGIC_LOW);
    11f0:	82 e0       	ldi	r24, 0x02	; 2
    11f2:	63 e0       	ldi	r22, 0x03	; 3
    11f4:	40 e0       	ldi	r20, 0x00	; 0
    11f6:	0e 94 9f 0a 	call	0x153e	; 0x153e <GPIO_writePin>
		GPIO_writePin(DC_MOTOR_PORT_ID,DC_MOTOR_IN2_PIN_ID,LOGIC_HIGH);
    11fa:	82 e0       	ldi	r24, 0x02	; 2
    11fc:	64 e0       	ldi	r22, 0x04	; 4
    11fe:	41 e0       	ldi	r20, 0x01	; 1
    1200:	0e 94 9f 0a 	call	0x153e	; 0x153e <GPIO_writePin>
    1204:	0a c0       	rjmp	.+20     	; 0x121a <DcMotor_Rotate+0x74>
		break;
	case A_CW:
		/*Rotate the Motor Anti-Clockwise*/

		GPIO_writePin(DC_MOTOR_PORT_ID,DC_MOTOR_IN1_PIN_ID,LOGIC_HIGH);
    1206:	82 e0       	ldi	r24, 0x02	; 2
    1208:	63 e0       	ldi	r22, 0x03	; 3
    120a:	41 e0       	ldi	r20, 0x01	; 1
    120c:	0e 94 9f 0a 	call	0x153e	; 0x153e <GPIO_writePin>
		GPIO_writePin(DC_MOTOR_PORT_ID,DC_MOTOR_IN2_PIN_ID,LOGIC_LOW);
    1210:	82 e0       	ldi	r24, 0x02	; 2
    1212:	64 e0       	ldi	r22, 0x04	; 4
    1214:	40 e0       	ldi	r20, 0x00	; 0
    1216:	0e 94 9f 0a 	call	0x153e	; 0x153e <GPIO_writePin>
		break;
	}



}
    121a:	0f 90       	pop	r0
    121c:	0f 90       	pop	r0
    121e:	0f 90       	pop	r0
    1220:	cf 91       	pop	r28
    1222:	df 91       	pop	r29
    1224:	08 95       	ret

00001226 <EEPROM_writeByte>:
 *******************************************************************************/
#include "external_eeprom.h"
#include "twi.h"

uint8 EEPROM_writeByte(uint16 u16addr, uint8 u8data)
{
    1226:	df 93       	push	r29
    1228:	cf 93       	push	r28
    122a:	00 d0       	rcall	.+0      	; 0x122c <EEPROM_writeByte+0x6>
    122c:	00 d0       	rcall	.+0      	; 0x122e <EEPROM_writeByte+0x8>
    122e:	cd b7       	in	r28, 0x3d	; 61
    1230:	de b7       	in	r29, 0x3e	; 62
    1232:	9a 83       	std	Y+2, r25	; 0x02
    1234:	89 83       	std	Y+1, r24	; 0x01
    1236:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    1238:	0e 94 38 10 	call	0x2070	; 0x2070 <TWI_start>
    if (TWI_getStatus() != TWI_START)
    123c:	0e 94 90 10 	call	0x2120	; 0x2120 <TWI_getStatus>
    1240:	88 30       	cpi	r24, 0x08	; 8
    1242:	11 f0       	breq	.+4      	; 0x1248 <EEPROM_writeByte+0x22>
        return ERROR;
    1244:	1c 82       	std	Y+4, r1	; 0x04
    1246:	28 c0       	rjmp	.+80     	; 0x1298 <EEPROM_writeByte+0x72>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)(0xA0 | ((u16addr & 0x0700)>>7)));
    1248:	89 81       	ldd	r24, Y+1	; 0x01
    124a:	9a 81       	ldd	r25, Y+2	; 0x02
    124c:	80 70       	andi	r24, 0x00	; 0
    124e:	97 70       	andi	r25, 0x07	; 7
    1250:	88 0f       	add	r24, r24
    1252:	89 2f       	mov	r24, r25
    1254:	88 1f       	adc	r24, r24
    1256:	99 0b       	sbc	r25, r25
    1258:	91 95       	neg	r25
    125a:	80 6a       	ori	r24, 0xA0	; 160
    125c:	0e 94 53 10 	call	0x20a6	; 0x20a6 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    1260:	0e 94 90 10 	call	0x2120	; 0x2120 <TWI_getStatus>
    1264:	88 31       	cpi	r24, 0x18	; 24
    1266:	11 f0       	breq	.+4      	; 0x126c <EEPROM_writeByte+0x46>
        return ERROR; 
    1268:	1c 82       	std	Y+4, r1	; 0x04
    126a:	16 c0       	rjmp	.+44     	; 0x1298 <EEPROM_writeByte+0x72>
		 
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    126c:	89 81       	ldd	r24, Y+1	; 0x01
    126e:	0e 94 53 10 	call	0x20a6	; 0x20a6 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    1272:	0e 94 90 10 	call	0x2120	; 0x2120 <TWI_getStatus>
    1276:	88 32       	cpi	r24, 0x28	; 40
    1278:	11 f0       	breq	.+4      	; 0x127e <EEPROM_writeByte+0x58>
        return ERROR;
    127a:	1c 82       	std	Y+4, r1	; 0x04
    127c:	0d c0       	rjmp	.+26     	; 0x1298 <EEPROM_writeByte+0x72>
		
    /* write byte to eeprom */
    TWI_writeByte(u8data);
    127e:	8b 81       	ldd	r24, Y+3	; 0x03
    1280:	0e 94 53 10 	call	0x20a6	; 0x20a6 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    1284:	0e 94 90 10 	call	0x2120	; 0x2120 <TWI_getStatus>
    1288:	88 32       	cpi	r24, 0x28	; 40
    128a:	11 f0       	breq	.+4      	; 0x1290 <EEPROM_writeByte+0x6a>
        return ERROR;
    128c:	1c 82       	std	Y+4, r1	; 0x04
    128e:	04 c0       	rjmp	.+8      	; 0x1298 <EEPROM_writeByte+0x72>

    /* Send the Stop Bit */
    TWI_stop();
    1290:	0e 94 48 10 	call	0x2090	; 0x2090 <TWI_stop>
	
    return SUCCESS;
    1294:	81 e0       	ldi	r24, 0x01	; 1
    1296:	8c 83       	std	Y+4, r24	; 0x04
    1298:	8c 81       	ldd	r24, Y+4	; 0x04
}
    129a:	0f 90       	pop	r0
    129c:	0f 90       	pop	r0
    129e:	0f 90       	pop	r0
    12a0:	0f 90       	pop	r0
    12a2:	cf 91       	pop	r28
    12a4:	df 91       	pop	r29
    12a6:	08 95       	ret

000012a8 <EEPROM_readByte>:

uint8 EEPROM_readByte(uint16 u16addr, uint8 *u8data)
{
    12a8:	df 93       	push	r29
    12aa:	cf 93       	push	r28
    12ac:	00 d0       	rcall	.+0      	; 0x12ae <EEPROM_readByte+0x6>
    12ae:	00 d0       	rcall	.+0      	; 0x12b0 <EEPROM_readByte+0x8>
    12b0:	0f 92       	push	r0
    12b2:	cd b7       	in	r28, 0x3d	; 61
    12b4:	de b7       	in	r29, 0x3e	; 62
    12b6:	9a 83       	std	Y+2, r25	; 0x02
    12b8:	89 83       	std	Y+1, r24	; 0x01
    12ba:	7c 83       	std	Y+4, r23	; 0x04
    12bc:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    12be:	0e 94 38 10 	call	0x2070	; 0x2070 <TWI_start>
    if (TWI_getStatus() != TWI_START)
    12c2:	0e 94 90 10 	call	0x2120	; 0x2120 <TWI_getStatus>
    12c6:	88 30       	cpi	r24, 0x08	; 8
    12c8:	11 f0       	breq	.+4      	; 0x12ce <EEPROM_readByte+0x26>
        return ERROR;
    12ca:	1d 82       	std	Y+5, r1	; 0x05
    12cc:	44 c0       	rjmp	.+136    	; 0x1356 <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7)));
    12ce:	89 81       	ldd	r24, Y+1	; 0x01
    12d0:	9a 81       	ldd	r25, Y+2	; 0x02
    12d2:	80 70       	andi	r24, 0x00	; 0
    12d4:	97 70       	andi	r25, 0x07	; 7
    12d6:	88 0f       	add	r24, r24
    12d8:	89 2f       	mov	r24, r25
    12da:	88 1f       	adc	r24, r24
    12dc:	99 0b       	sbc	r25, r25
    12de:	91 95       	neg	r25
    12e0:	80 6a       	ori	r24, 0xA0	; 160
    12e2:	0e 94 53 10 	call	0x20a6	; 0x20a6 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    12e6:	0e 94 90 10 	call	0x2120	; 0x2120 <TWI_getStatus>
    12ea:	88 31       	cpi	r24, 0x18	; 24
    12ec:	11 f0       	breq	.+4      	; 0x12f2 <EEPROM_readByte+0x4a>
        return ERROR;
    12ee:	1d 82       	std	Y+5, r1	; 0x05
    12f0:	32 c0       	rjmp	.+100    	; 0x1356 <EEPROM_readByte+0xae>
		
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    12f2:	89 81       	ldd	r24, Y+1	; 0x01
    12f4:	0e 94 53 10 	call	0x20a6	; 0x20a6 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    12f8:	0e 94 90 10 	call	0x2120	; 0x2120 <TWI_getStatus>
    12fc:	88 32       	cpi	r24, 0x28	; 40
    12fe:	11 f0       	breq	.+4      	; 0x1304 <EEPROM_readByte+0x5c>
        return ERROR;
    1300:	1d 82       	std	Y+5, r1	; 0x05
    1302:	29 c0       	rjmp	.+82     	; 0x1356 <EEPROM_readByte+0xae>
		
    /* Send the Repeated Start Bit */
    TWI_start();
    1304:	0e 94 38 10 	call	0x2070	; 0x2070 <TWI_start>
    if (TWI_getStatus() != TWI_REP_START)
    1308:	0e 94 90 10 	call	0x2120	; 0x2120 <TWI_getStatus>
    130c:	80 31       	cpi	r24, 0x10	; 16
    130e:	11 f0       	breq	.+4      	; 0x1314 <EEPROM_readByte+0x6c>
        return ERROR;
    1310:	1d 82       	std	Y+5, r1	; 0x05
    1312:	21 c0       	rjmp	.+66     	; 0x1356 <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=1 (Read) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
    1314:	89 81       	ldd	r24, Y+1	; 0x01
    1316:	9a 81       	ldd	r25, Y+2	; 0x02
    1318:	80 70       	andi	r24, 0x00	; 0
    131a:	97 70       	andi	r25, 0x07	; 7
    131c:	88 0f       	add	r24, r24
    131e:	89 2f       	mov	r24, r25
    1320:	88 1f       	adc	r24, r24
    1322:	99 0b       	sbc	r25, r25
    1324:	91 95       	neg	r25
    1326:	81 6a       	ori	r24, 0xA1	; 161
    1328:	0e 94 53 10 	call	0x20a6	; 0x20a6 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_R_ACK)
    132c:	0e 94 90 10 	call	0x2120	; 0x2120 <TWI_getStatus>
    1330:	80 34       	cpi	r24, 0x40	; 64
    1332:	11 f0       	breq	.+4      	; 0x1338 <EEPROM_readByte+0x90>
        return ERROR;
    1334:	1d 82       	std	Y+5, r1	; 0x05
    1336:	0f c0       	rjmp	.+30     	; 0x1356 <EEPROM_readByte+0xae>

    /* Read Byte from Memory without send ACK */
    *u8data = TWI_readByteWithNACK();
    1338:	0e 94 7d 10 	call	0x20fa	; 0x20fa <TWI_readByteWithNACK>
    133c:	eb 81       	ldd	r30, Y+3	; 0x03
    133e:	fc 81       	ldd	r31, Y+4	; 0x04
    1340:	80 83       	st	Z, r24
    if (TWI_getStatus() != TWI_MR_DATA_NACK)
    1342:	0e 94 90 10 	call	0x2120	; 0x2120 <TWI_getStatus>
    1346:	88 35       	cpi	r24, 0x58	; 88
    1348:	11 f0       	breq	.+4      	; 0x134e <EEPROM_readByte+0xa6>
        return ERROR;
    134a:	1d 82       	std	Y+5, r1	; 0x05
    134c:	04 c0       	rjmp	.+8      	; 0x1356 <EEPROM_readByte+0xae>

    /* Send the Stop Bit */
    TWI_stop();
    134e:	0e 94 48 10 	call	0x2090	; 0x2090 <TWI_stop>

    return SUCCESS;
    1352:	81 e0       	ldi	r24, 0x01	; 1
    1354:	8d 83       	std	Y+5, r24	; 0x05
    1356:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1358:	0f 90       	pop	r0
    135a:	0f 90       	pop	r0
    135c:	0f 90       	pop	r0
    135e:	0f 90       	pop	r0
    1360:	0f 90       	pop	r0
    1362:	cf 91       	pop	r28
    1364:	df 91       	pop	r29
    1366:	08 95       	ret

00001368 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    1368:	df 93       	push	r29
    136a:	cf 93       	push	r28
    136c:	00 d0       	rcall	.+0      	; 0x136e <GPIO_setupPinDirection+0x6>
    136e:	00 d0       	rcall	.+0      	; 0x1370 <GPIO_setupPinDirection+0x8>
    1370:	0f 92       	push	r0
    1372:	cd b7       	in	r28, 0x3d	; 61
    1374:	de b7       	in	r29, 0x3e	; 62
    1376:	89 83       	std	Y+1, r24	; 0x01
    1378:	6a 83       	std	Y+2, r22	; 0x02
    137a:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    137c:	8a 81       	ldd	r24, Y+2	; 0x02
    137e:	88 30       	cpi	r24, 0x08	; 8
    1380:	08 f0       	brcs	.+2      	; 0x1384 <GPIO_setupPinDirection+0x1c>
    1382:	d5 c0       	rjmp	.+426    	; 0x152e <GPIO_setupPinDirection+0x1c6>
    1384:	89 81       	ldd	r24, Y+1	; 0x01
    1386:	84 30       	cpi	r24, 0x04	; 4
    1388:	08 f0       	brcs	.+2      	; 0x138c <GPIO_setupPinDirection+0x24>
    138a:	d1 c0       	rjmp	.+418    	; 0x152e <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    138c:	89 81       	ldd	r24, Y+1	; 0x01
    138e:	28 2f       	mov	r18, r24
    1390:	30 e0       	ldi	r19, 0x00	; 0
    1392:	3d 83       	std	Y+5, r19	; 0x05
    1394:	2c 83       	std	Y+4, r18	; 0x04
    1396:	8c 81       	ldd	r24, Y+4	; 0x04
    1398:	9d 81       	ldd	r25, Y+5	; 0x05
    139a:	81 30       	cpi	r24, 0x01	; 1
    139c:	91 05       	cpc	r25, r1
    139e:	09 f4       	brne	.+2      	; 0x13a2 <GPIO_setupPinDirection+0x3a>
    13a0:	43 c0       	rjmp	.+134    	; 0x1428 <GPIO_setupPinDirection+0xc0>
    13a2:	2c 81       	ldd	r18, Y+4	; 0x04
    13a4:	3d 81       	ldd	r19, Y+5	; 0x05
    13a6:	22 30       	cpi	r18, 0x02	; 2
    13a8:	31 05       	cpc	r19, r1
    13aa:	2c f4       	brge	.+10     	; 0x13b6 <GPIO_setupPinDirection+0x4e>
    13ac:	8c 81       	ldd	r24, Y+4	; 0x04
    13ae:	9d 81       	ldd	r25, Y+5	; 0x05
    13b0:	00 97       	sbiw	r24, 0x00	; 0
    13b2:	71 f0       	breq	.+28     	; 0x13d0 <GPIO_setupPinDirection+0x68>
    13b4:	bc c0       	rjmp	.+376    	; 0x152e <GPIO_setupPinDirection+0x1c6>
    13b6:	2c 81       	ldd	r18, Y+4	; 0x04
    13b8:	3d 81       	ldd	r19, Y+5	; 0x05
    13ba:	22 30       	cpi	r18, 0x02	; 2
    13bc:	31 05       	cpc	r19, r1
    13be:	09 f4       	brne	.+2      	; 0x13c2 <GPIO_setupPinDirection+0x5a>
    13c0:	5f c0       	rjmp	.+190    	; 0x1480 <GPIO_setupPinDirection+0x118>
    13c2:	8c 81       	ldd	r24, Y+4	; 0x04
    13c4:	9d 81       	ldd	r25, Y+5	; 0x05
    13c6:	83 30       	cpi	r24, 0x03	; 3
    13c8:	91 05       	cpc	r25, r1
    13ca:	09 f4       	brne	.+2      	; 0x13ce <GPIO_setupPinDirection+0x66>
    13cc:	85 c0       	rjmp	.+266    	; 0x14d8 <GPIO_setupPinDirection+0x170>
    13ce:	af c0       	rjmp	.+350    	; 0x152e <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    13d0:	8b 81       	ldd	r24, Y+3	; 0x03
    13d2:	81 30       	cpi	r24, 0x01	; 1
    13d4:	a1 f4       	brne	.+40     	; 0x13fe <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    13d6:	aa e3       	ldi	r26, 0x3A	; 58
    13d8:	b0 e0       	ldi	r27, 0x00	; 0
    13da:	ea e3       	ldi	r30, 0x3A	; 58
    13dc:	f0 e0       	ldi	r31, 0x00	; 0
    13de:	80 81       	ld	r24, Z
    13e0:	48 2f       	mov	r20, r24
    13e2:	8a 81       	ldd	r24, Y+2	; 0x02
    13e4:	28 2f       	mov	r18, r24
    13e6:	30 e0       	ldi	r19, 0x00	; 0
    13e8:	81 e0       	ldi	r24, 0x01	; 1
    13ea:	90 e0       	ldi	r25, 0x00	; 0
    13ec:	02 2e       	mov	r0, r18
    13ee:	02 c0       	rjmp	.+4      	; 0x13f4 <GPIO_setupPinDirection+0x8c>
    13f0:	88 0f       	add	r24, r24
    13f2:	99 1f       	adc	r25, r25
    13f4:	0a 94       	dec	r0
    13f6:	e2 f7       	brpl	.-8      	; 0x13f0 <GPIO_setupPinDirection+0x88>
    13f8:	84 2b       	or	r24, r20
    13fa:	8c 93       	st	X, r24
    13fc:	98 c0       	rjmp	.+304    	; 0x152e <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    13fe:	aa e3       	ldi	r26, 0x3A	; 58
    1400:	b0 e0       	ldi	r27, 0x00	; 0
    1402:	ea e3       	ldi	r30, 0x3A	; 58
    1404:	f0 e0       	ldi	r31, 0x00	; 0
    1406:	80 81       	ld	r24, Z
    1408:	48 2f       	mov	r20, r24
    140a:	8a 81       	ldd	r24, Y+2	; 0x02
    140c:	28 2f       	mov	r18, r24
    140e:	30 e0       	ldi	r19, 0x00	; 0
    1410:	81 e0       	ldi	r24, 0x01	; 1
    1412:	90 e0       	ldi	r25, 0x00	; 0
    1414:	02 2e       	mov	r0, r18
    1416:	02 c0       	rjmp	.+4      	; 0x141c <GPIO_setupPinDirection+0xb4>
    1418:	88 0f       	add	r24, r24
    141a:	99 1f       	adc	r25, r25
    141c:	0a 94       	dec	r0
    141e:	e2 f7       	brpl	.-8      	; 0x1418 <GPIO_setupPinDirection+0xb0>
    1420:	80 95       	com	r24
    1422:	84 23       	and	r24, r20
    1424:	8c 93       	st	X, r24
    1426:	83 c0       	rjmp	.+262    	; 0x152e <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    1428:	8b 81       	ldd	r24, Y+3	; 0x03
    142a:	81 30       	cpi	r24, 0x01	; 1
    142c:	a1 f4       	brne	.+40     	; 0x1456 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    142e:	a7 e3       	ldi	r26, 0x37	; 55
    1430:	b0 e0       	ldi	r27, 0x00	; 0
    1432:	e7 e3       	ldi	r30, 0x37	; 55
    1434:	f0 e0       	ldi	r31, 0x00	; 0
    1436:	80 81       	ld	r24, Z
    1438:	48 2f       	mov	r20, r24
    143a:	8a 81       	ldd	r24, Y+2	; 0x02
    143c:	28 2f       	mov	r18, r24
    143e:	30 e0       	ldi	r19, 0x00	; 0
    1440:	81 e0       	ldi	r24, 0x01	; 1
    1442:	90 e0       	ldi	r25, 0x00	; 0
    1444:	02 2e       	mov	r0, r18
    1446:	02 c0       	rjmp	.+4      	; 0x144c <GPIO_setupPinDirection+0xe4>
    1448:	88 0f       	add	r24, r24
    144a:	99 1f       	adc	r25, r25
    144c:	0a 94       	dec	r0
    144e:	e2 f7       	brpl	.-8      	; 0x1448 <GPIO_setupPinDirection+0xe0>
    1450:	84 2b       	or	r24, r20
    1452:	8c 93       	st	X, r24
    1454:	6c c0       	rjmp	.+216    	; 0x152e <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    1456:	a7 e3       	ldi	r26, 0x37	; 55
    1458:	b0 e0       	ldi	r27, 0x00	; 0
    145a:	e7 e3       	ldi	r30, 0x37	; 55
    145c:	f0 e0       	ldi	r31, 0x00	; 0
    145e:	80 81       	ld	r24, Z
    1460:	48 2f       	mov	r20, r24
    1462:	8a 81       	ldd	r24, Y+2	; 0x02
    1464:	28 2f       	mov	r18, r24
    1466:	30 e0       	ldi	r19, 0x00	; 0
    1468:	81 e0       	ldi	r24, 0x01	; 1
    146a:	90 e0       	ldi	r25, 0x00	; 0
    146c:	02 2e       	mov	r0, r18
    146e:	02 c0       	rjmp	.+4      	; 0x1474 <GPIO_setupPinDirection+0x10c>
    1470:	88 0f       	add	r24, r24
    1472:	99 1f       	adc	r25, r25
    1474:	0a 94       	dec	r0
    1476:	e2 f7       	brpl	.-8      	; 0x1470 <GPIO_setupPinDirection+0x108>
    1478:	80 95       	com	r24
    147a:	84 23       	and	r24, r20
    147c:	8c 93       	st	X, r24
    147e:	57 c0       	rjmp	.+174    	; 0x152e <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    1480:	8b 81       	ldd	r24, Y+3	; 0x03
    1482:	81 30       	cpi	r24, 0x01	; 1
    1484:	a1 f4       	brne	.+40     	; 0x14ae <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    1486:	a4 e3       	ldi	r26, 0x34	; 52
    1488:	b0 e0       	ldi	r27, 0x00	; 0
    148a:	e4 e3       	ldi	r30, 0x34	; 52
    148c:	f0 e0       	ldi	r31, 0x00	; 0
    148e:	80 81       	ld	r24, Z
    1490:	48 2f       	mov	r20, r24
    1492:	8a 81       	ldd	r24, Y+2	; 0x02
    1494:	28 2f       	mov	r18, r24
    1496:	30 e0       	ldi	r19, 0x00	; 0
    1498:	81 e0       	ldi	r24, 0x01	; 1
    149a:	90 e0       	ldi	r25, 0x00	; 0
    149c:	02 2e       	mov	r0, r18
    149e:	02 c0       	rjmp	.+4      	; 0x14a4 <GPIO_setupPinDirection+0x13c>
    14a0:	88 0f       	add	r24, r24
    14a2:	99 1f       	adc	r25, r25
    14a4:	0a 94       	dec	r0
    14a6:	e2 f7       	brpl	.-8      	; 0x14a0 <GPIO_setupPinDirection+0x138>
    14a8:	84 2b       	or	r24, r20
    14aa:	8c 93       	st	X, r24
    14ac:	40 c0       	rjmp	.+128    	; 0x152e <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    14ae:	a4 e3       	ldi	r26, 0x34	; 52
    14b0:	b0 e0       	ldi	r27, 0x00	; 0
    14b2:	e4 e3       	ldi	r30, 0x34	; 52
    14b4:	f0 e0       	ldi	r31, 0x00	; 0
    14b6:	80 81       	ld	r24, Z
    14b8:	48 2f       	mov	r20, r24
    14ba:	8a 81       	ldd	r24, Y+2	; 0x02
    14bc:	28 2f       	mov	r18, r24
    14be:	30 e0       	ldi	r19, 0x00	; 0
    14c0:	81 e0       	ldi	r24, 0x01	; 1
    14c2:	90 e0       	ldi	r25, 0x00	; 0
    14c4:	02 2e       	mov	r0, r18
    14c6:	02 c0       	rjmp	.+4      	; 0x14cc <GPIO_setupPinDirection+0x164>
    14c8:	88 0f       	add	r24, r24
    14ca:	99 1f       	adc	r25, r25
    14cc:	0a 94       	dec	r0
    14ce:	e2 f7       	brpl	.-8      	; 0x14c8 <GPIO_setupPinDirection+0x160>
    14d0:	80 95       	com	r24
    14d2:	84 23       	and	r24, r20
    14d4:	8c 93       	st	X, r24
    14d6:	2b c0       	rjmp	.+86     	; 0x152e <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    14d8:	8b 81       	ldd	r24, Y+3	; 0x03
    14da:	81 30       	cpi	r24, 0x01	; 1
    14dc:	a1 f4       	brne	.+40     	; 0x1506 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    14de:	a1 e3       	ldi	r26, 0x31	; 49
    14e0:	b0 e0       	ldi	r27, 0x00	; 0
    14e2:	e1 e3       	ldi	r30, 0x31	; 49
    14e4:	f0 e0       	ldi	r31, 0x00	; 0
    14e6:	80 81       	ld	r24, Z
    14e8:	48 2f       	mov	r20, r24
    14ea:	8a 81       	ldd	r24, Y+2	; 0x02
    14ec:	28 2f       	mov	r18, r24
    14ee:	30 e0       	ldi	r19, 0x00	; 0
    14f0:	81 e0       	ldi	r24, 0x01	; 1
    14f2:	90 e0       	ldi	r25, 0x00	; 0
    14f4:	02 2e       	mov	r0, r18
    14f6:	02 c0       	rjmp	.+4      	; 0x14fc <GPIO_setupPinDirection+0x194>
    14f8:	88 0f       	add	r24, r24
    14fa:	99 1f       	adc	r25, r25
    14fc:	0a 94       	dec	r0
    14fe:	e2 f7       	brpl	.-8      	; 0x14f8 <GPIO_setupPinDirection+0x190>
    1500:	84 2b       	or	r24, r20
    1502:	8c 93       	st	X, r24
    1504:	14 c0       	rjmp	.+40     	; 0x152e <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    1506:	a1 e3       	ldi	r26, 0x31	; 49
    1508:	b0 e0       	ldi	r27, 0x00	; 0
    150a:	e1 e3       	ldi	r30, 0x31	; 49
    150c:	f0 e0       	ldi	r31, 0x00	; 0
    150e:	80 81       	ld	r24, Z
    1510:	48 2f       	mov	r20, r24
    1512:	8a 81       	ldd	r24, Y+2	; 0x02
    1514:	28 2f       	mov	r18, r24
    1516:	30 e0       	ldi	r19, 0x00	; 0
    1518:	81 e0       	ldi	r24, 0x01	; 1
    151a:	90 e0       	ldi	r25, 0x00	; 0
    151c:	02 2e       	mov	r0, r18
    151e:	02 c0       	rjmp	.+4      	; 0x1524 <GPIO_setupPinDirection+0x1bc>
    1520:	88 0f       	add	r24, r24
    1522:	99 1f       	adc	r25, r25
    1524:	0a 94       	dec	r0
    1526:	e2 f7       	brpl	.-8      	; 0x1520 <GPIO_setupPinDirection+0x1b8>
    1528:	80 95       	com	r24
    152a:	84 23       	and	r24, r20
    152c:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    152e:	0f 90       	pop	r0
    1530:	0f 90       	pop	r0
    1532:	0f 90       	pop	r0
    1534:	0f 90       	pop	r0
    1536:	0f 90       	pop	r0
    1538:	cf 91       	pop	r28
    153a:	df 91       	pop	r29
    153c:	08 95       	ret

0000153e <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    153e:	df 93       	push	r29
    1540:	cf 93       	push	r28
    1542:	00 d0       	rcall	.+0      	; 0x1544 <GPIO_writePin+0x6>
    1544:	00 d0       	rcall	.+0      	; 0x1546 <GPIO_writePin+0x8>
    1546:	0f 92       	push	r0
    1548:	cd b7       	in	r28, 0x3d	; 61
    154a:	de b7       	in	r29, 0x3e	; 62
    154c:	89 83       	std	Y+1, r24	; 0x01
    154e:	6a 83       	std	Y+2, r22	; 0x02
    1550:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1552:	8a 81       	ldd	r24, Y+2	; 0x02
    1554:	88 30       	cpi	r24, 0x08	; 8
    1556:	08 f0       	brcs	.+2      	; 0x155a <GPIO_writePin+0x1c>
    1558:	d5 c0       	rjmp	.+426    	; 0x1704 <GPIO_writePin+0x1c6>
    155a:	89 81       	ldd	r24, Y+1	; 0x01
    155c:	84 30       	cpi	r24, 0x04	; 4
    155e:	08 f0       	brcs	.+2      	; 0x1562 <GPIO_writePin+0x24>
    1560:	d1 c0       	rjmp	.+418    	; 0x1704 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    1562:	89 81       	ldd	r24, Y+1	; 0x01
    1564:	28 2f       	mov	r18, r24
    1566:	30 e0       	ldi	r19, 0x00	; 0
    1568:	3d 83       	std	Y+5, r19	; 0x05
    156a:	2c 83       	std	Y+4, r18	; 0x04
    156c:	8c 81       	ldd	r24, Y+4	; 0x04
    156e:	9d 81       	ldd	r25, Y+5	; 0x05
    1570:	81 30       	cpi	r24, 0x01	; 1
    1572:	91 05       	cpc	r25, r1
    1574:	09 f4       	brne	.+2      	; 0x1578 <GPIO_writePin+0x3a>
    1576:	43 c0       	rjmp	.+134    	; 0x15fe <GPIO_writePin+0xc0>
    1578:	2c 81       	ldd	r18, Y+4	; 0x04
    157a:	3d 81       	ldd	r19, Y+5	; 0x05
    157c:	22 30       	cpi	r18, 0x02	; 2
    157e:	31 05       	cpc	r19, r1
    1580:	2c f4       	brge	.+10     	; 0x158c <GPIO_writePin+0x4e>
    1582:	8c 81       	ldd	r24, Y+4	; 0x04
    1584:	9d 81       	ldd	r25, Y+5	; 0x05
    1586:	00 97       	sbiw	r24, 0x00	; 0
    1588:	71 f0       	breq	.+28     	; 0x15a6 <GPIO_writePin+0x68>
    158a:	bc c0       	rjmp	.+376    	; 0x1704 <GPIO_writePin+0x1c6>
    158c:	2c 81       	ldd	r18, Y+4	; 0x04
    158e:	3d 81       	ldd	r19, Y+5	; 0x05
    1590:	22 30       	cpi	r18, 0x02	; 2
    1592:	31 05       	cpc	r19, r1
    1594:	09 f4       	brne	.+2      	; 0x1598 <GPIO_writePin+0x5a>
    1596:	5f c0       	rjmp	.+190    	; 0x1656 <GPIO_writePin+0x118>
    1598:	8c 81       	ldd	r24, Y+4	; 0x04
    159a:	9d 81       	ldd	r25, Y+5	; 0x05
    159c:	83 30       	cpi	r24, 0x03	; 3
    159e:	91 05       	cpc	r25, r1
    15a0:	09 f4       	brne	.+2      	; 0x15a4 <GPIO_writePin+0x66>
    15a2:	85 c0       	rjmp	.+266    	; 0x16ae <GPIO_writePin+0x170>
    15a4:	af c0       	rjmp	.+350    	; 0x1704 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    15a6:	8b 81       	ldd	r24, Y+3	; 0x03
    15a8:	81 30       	cpi	r24, 0x01	; 1
    15aa:	a1 f4       	brne	.+40     	; 0x15d4 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    15ac:	ab e3       	ldi	r26, 0x3B	; 59
    15ae:	b0 e0       	ldi	r27, 0x00	; 0
    15b0:	eb e3       	ldi	r30, 0x3B	; 59
    15b2:	f0 e0       	ldi	r31, 0x00	; 0
    15b4:	80 81       	ld	r24, Z
    15b6:	48 2f       	mov	r20, r24
    15b8:	8a 81       	ldd	r24, Y+2	; 0x02
    15ba:	28 2f       	mov	r18, r24
    15bc:	30 e0       	ldi	r19, 0x00	; 0
    15be:	81 e0       	ldi	r24, 0x01	; 1
    15c0:	90 e0       	ldi	r25, 0x00	; 0
    15c2:	02 2e       	mov	r0, r18
    15c4:	02 c0       	rjmp	.+4      	; 0x15ca <GPIO_writePin+0x8c>
    15c6:	88 0f       	add	r24, r24
    15c8:	99 1f       	adc	r25, r25
    15ca:	0a 94       	dec	r0
    15cc:	e2 f7       	brpl	.-8      	; 0x15c6 <GPIO_writePin+0x88>
    15ce:	84 2b       	or	r24, r20
    15d0:	8c 93       	st	X, r24
    15d2:	98 c0       	rjmp	.+304    	; 0x1704 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    15d4:	ab e3       	ldi	r26, 0x3B	; 59
    15d6:	b0 e0       	ldi	r27, 0x00	; 0
    15d8:	eb e3       	ldi	r30, 0x3B	; 59
    15da:	f0 e0       	ldi	r31, 0x00	; 0
    15dc:	80 81       	ld	r24, Z
    15de:	48 2f       	mov	r20, r24
    15e0:	8a 81       	ldd	r24, Y+2	; 0x02
    15e2:	28 2f       	mov	r18, r24
    15e4:	30 e0       	ldi	r19, 0x00	; 0
    15e6:	81 e0       	ldi	r24, 0x01	; 1
    15e8:	90 e0       	ldi	r25, 0x00	; 0
    15ea:	02 2e       	mov	r0, r18
    15ec:	02 c0       	rjmp	.+4      	; 0x15f2 <GPIO_writePin+0xb4>
    15ee:	88 0f       	add	r24, r24
    15f0:	99 1f       	adc	r25, r25
    15f2:	0a 94       	dec	r0
    15f4:	e2 f7       	brpl	.-8      	; 0x15ee <GPIO_writePin+0xb0>
    15f6:	80 95       	com	r24
    15f8:	84 23       	and	r24, r20
    15fa:	8c 93       	st	X, r24
    15fc:	83 c0       	rjmp	.+262    	; 0x1704 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    15fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1600:	81 30       	cpi	r24, 0x01	; 1
    1602:	a1 f4       	brne	.+40     	; 0x162c <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    1604:	a8 e3       	ldi	r26, 0x38	; 56
    1606:	b0 e0       	ldi	r27, 0x00	; 0
    1608:	e8 e3       	ldi	r30, 0x38	; 56
    160a:	f0 e0       	ldi	r31, 0x00	; 0
    160c:	80 81       	ld	r24, Z
    160e:	48 2f       	mov	r20, r24
    1610:	8a 81       	ldd	r24, Y+2	; 0x02
    1612:	28 2f       	mov	r18, r24
    1614:	30 e0       	ldi	r19, 0x00	; 0
    1616:	81 e0       	ldi	r24, 0x01	; 1
    1618:	90 e0       	ldi	r25, 0x00	; 0
    161a:	02 2e       	mov	r0, r18
    161c:	02 c0       	rjmp	.+4      	; 0x1622 <GPIO_writePin+0xe4>
    161e:	88 0f       	add	r24, r24
    1620:	99 1f       	adc	r25, r25
    1622:	0a 94       	dec	r0
    1624:	e2 f7       	brpl	.-8      	; 0x161e <GPIO_writePin+0xe0>
    1626:	84 2b       	or	r24, r20
    1628:	8c 93       	st	X, r24
    162a:	6c c0       	rjmp	.+216    	; 0x1704 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    162c:	a8 e3       	ldi	r26, 0x38	; 56
    162e:	b0 e0       	ldi	r27, 0x00	; 0
    1630:	e8 e3       	ldi	r30, 0x38	; 56
    1632:	f0 e0       	ldi	r31, 0x00	; 0
    1634:	80 81       	ld	r24, Z
    1636:	48 2f       	mov	r20, r24
    1638:	8a 81       	ldd	r24, Y+2	; 0x02
    163a:	28 2f       	mov	r18, r24
    163c:	30 e0       	ldi	r19, 0x00	; 0
    163e:	81 e0       	ldi	r24, 0x01	; 1
    1640:	90 e0       	ldi	r25, 0x00	; 0
    1642:	02 2e       	mov	r0, r18
    1644:	02 c0       	rjmp	.+4      	; 0x164a <GPIO_writePin+0x10c>
    1646:	88 0f       	add	r24, r24
    1648:	99 1f       	adc	r25, r25
    164a:	0a 94       	dec	r0
    164c:	e2 f7       	brpl	.-8      	; 0x1646 <GPIO_writePin+0x108>
    164e:	80 95       	com	r24
    1650:	84 23       	and	r24, r20
    1652:	8c 93       	st	X, r24
    1654:	57 c0       	rjmp	.+174    	; 0x1704 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    1656:	8b 81       	ldd	r24, Y+3	; 0x03
    1658:	81 30       	cpi	r24, 0x01	; 1
    165a:	a1 f4       	brne	.+40     	; 0x1684 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    165c:	a5 e3       	ldi	r26, 0x35	; 53
    165e:	b0 e0       	ldi	r27, 0x00	; 0
    1660:	e5 e3       	ldi	r30, 0x35	; 53
    1662:	f0 e0       	ldi	r31, 0x00	; 0
    1664:	80 81       	ld	r24, Z
    1666:	48 2f       	mov	r20, r24
    1668:	8a 81       	ldd	r24, Y+2	; 0x02
    166a:	28 2f       	mov	r18, r24
    166c:	30 e0       	ldi	r19, 0x00	; 0
    166e:	81 e0       	ldi	r24, 0x01	; 1
    1670:	90 e0       	ldi	r25, 0x00	; 0
    1672:	02 2e       	mov	r0, r18
    1674:	02 c0       	rjmp	.+4      	; 0x167a <GPIO_writePin+0x13c>
    1676:	88 0f       	add	r24, r24
    1678:	99 1f       	adc	r25, r25
    167a:	0a 94       	dec	r0
    167c:	e2 f7       	brpl	.-8      	; 0x1676 <GPIO_writePin+0x138>
    167e:	84 2b       	or	r24, r20
    1680:	8c 93       	st	X, r24
    1682:	40 c0       	rjmp	.+128    	; 0x1704 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    1684:	a5 e3       	ldi	r26, 0x35	; 53
    1686:	b0 e0       	ldi	r27, 0x00	; 0
    1688:	e5 e3       	ldi	r30, 0x35	; 53
    168a:	f0 e0       	ldi	r31, 0x00	; 0
    168c:	80 81       	ld	r24, Z
    168e:	48 2f       	mov	r20, r24
    1690:	8a 81       	ldd	r24, Y+2	; 0x02
    1692:	28 2f       	mov	r18, r24
    1694:	30 e0       	ldi	r19, 0x00	; 0
    1696:	81 e0       	ldi	r24, 0x01	; 1
    1698:	90 e0       	ldi	r25, 0x00	; 0
    169a:	02 2e       	mov	r0, r18
    169c:	02 c0       	rjmp	.+4      	; 0x16a2 <GPIO_writePin+0x164>
    169e:	88 0f       	add	r24, r24
    16a0:	99 1f       	adc	r25, r25
    16a2:	0a 94       	dec	r0
    16a4:	e2 f7       	brpl	.-8      	; 0x169e <GPIO_writePin+0x160>
    16a6:	80 95       	com	r24
    16a8:	84 23       	and	r24, r20
    16aa:	8c 93       	st	X, r24
    16ac:	2b c0       	rjmp	.+86     	; 0x1704 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    16ae:	8b 81       	ldd	r24, Y+3	; 0x03
    16b0:	81 30       	cpi	r24, 0x01	; 1
    16b2:	a1 f4       	brne	.+40     	; 0x16dc <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    16b4:	a2 e3       	ldi	r26, 0x32	; 50
    16b6:	b0 e0       	ldi	r27, 0x00	; 0
    16b8:	e2 e3       	ldi	r30, 0x32	; 50
    16ba:	f0 e0       	ldi	r31, 0x00	; 0
    16bc:	80 81       	ld	r24, Z
    16be:	48 2f       	mov	r20, r24
    16c0:	8a 81       	ldd	r24, Y+2	; 0x02
    16c2:	28 2f       	mov	r18, r24
    16c4:	30 e0       	ldi	r19, 0x00	; 0
    16c6:	81 e0       	ldi	r24, 0x01	; 1
    16c8:	90 e0       	ldi	r25, 0x00	; 0
    16ca:	02 2e       	mov	r0, r18
    16cc:	02 c0       	rjmp	.+4      	; 0x16d2 <GPIO_writePin+0x194>
    16ce:	88 0f       	add	r24, r24
    16d0:	99 1f       	adc	r25, r25
    16d2:	0a 94       	dec	r0
    16d4:	e2 f7       	brpl	.-8      	; 0x16ce <GPIO_writePin+0x190>
    16d6:	84 2b       	or	r24, r20
    16d8:	8c 93       	st	X, r24
    16da:	14 c0       	rjmp	.+40     	; 0x1704 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    16dc:	a2 e3       	ldi	r26, 0x32	; 50
    16de:	b0 e0       	ldi	r27, 0x00	; 0
    16e0:	e2 e3       	ldi	r30, 0x32	; 50
    16e2:	f0 e0       	ldi	r31, 0x00	; 0
    16e4:	80 81       	ld	r24, Z
    16e6:	48 2f       	mov	r20, r24
    16e8:	8a 81       	ldd	r24, Y+2	; 0x02
    16ea:	28 2f       	mov	r18, r24
    16ec:	30 e0       	ldi	r19, 0x00	; 0
    16ee:	81 e0       	ldi	r24, 0x01	; 1
    16f0:	90 e0       	ldi	r25, 0x00	; 0
    16f2:	02 2e       	mov	r0, r18
    16f4:	02 c0       	rjmp	.+4      	; 0x16fa <GPIO_writePin+0x1bc>
    16f6:	88 0f       	add	r24, r24
    16f8:	99 1f       	adc	r25, r25
    16fa:	0a 94       	dec	r0
    16fc:	e2 f7       	brpl	.-8      	; 0x16f6 <GPIO_writePin+0x1b8>
    16fe:	80 95       	com	r24
    1700:	84 23       	and	r24, r20
    1702:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1704:	0f 90       	pop	r0
    1706:	0f 90       	pop	r0
    1708:	0f 90       	pop	r0
    170a:	0f 90       	pop	r0
    170c:	0f 90       	pop	r0
    170e:	cf 91       	pop	r28
    1710:	df 91       	pop	r29
    1712:	08 95       	ret

00001714 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    1714:	df 93       	push	r29
    1716:	cf 93       	push	r28
    1718:	00 d0       	rcall	.+0      	; 0x171a <GPIO_readPin+0x6>
    171a:	00 d0       	rcall	.+0      	; 0x171c <GPIO_readPin+0x8>
    171c:	0f 92       	push	r0
    171e:	cd b7       	in	r28, 0x3d	; 61
    1720:	de b7       	in	r29, 0x3e	; 62
    1722:	8a 83       	std	Y+2, r24	; 0x02
    1724:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    1726:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1728:	8b 81       	ldd	r24, Y+3	; 0x03
    172a:	88 30       	cpi	r24, 0x08	; 8
    172c:	08 f0       	brcs	.+2      	; 0x1730 <GPIO_readPin+0x1c>
    172e:	84 c0       	rjmp	.+264    	; 0x1838 <GPIO_readPin+0x124>
    1730:	8a 81       	ldd	r24, Y+2	; 0x02
    1732:	84 30       	cpi	r24, 0x04	; 4
    1734:	08 f0       	brcs	.+2      	; 0x1738 <GPIO_readPin+0x24>
    1736:	80 c0       	rjmp	.+256    	; 0x1838 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    1738:	8a 81       	ldd	r24, Y+2	; 0x02
    173a:	28 2f       	mov	r18, r24
    173c:	30 e0       	ldi	r19, 0x00	; 0
    173e:	3d 83       	std	Y+5, r19	; 0x05
    1740:	2c 83       	std	Y+4, r18	; 0x04
    1742:	4c 81       	ldd	r20, Y+4	; 0x04
    1744:	5d 81       	ldd	r21, Y+5	; 0x05
    1746:	41 30       	cpi	r20, 0x01	; 1
    1748:	51 05       	cpc	r21, r1
    174a:	79 f1       	breq	.+94     	; 0x17aa <GPIO_readPin+0x96>
    174c:	8c 81       	ldd	r24, Y+4	; 0x04
    174e:	9d 81       	ldd	r25, Y+5	; 0x05
    1750:	82 30       	cpi	r24, 0x02	; 2
    1752:	91 05       	cpc	r25, r1
    1754:	34 f4       	brge	.+12     	; 0x1762 <GPIO_readPin+0x4e>
    1756:	2c 81       	ldd	r18, Y+4	; 0x04
    1758:	3d 81       	ldd	r19, Y+5	; 0x05
    175a:	21 15       	cp	r18, r1
    175c:	31 05       	cpc	r19, r1
    175e:	69 f0       	breq	.+26     	; 0x177a <GPIO_readPin+0x66>
    1760:	6b c0       	rjmp	.+214    	; 0x1838 <GPIO_readPin+0x124>
    1762:	4c 81       	ldd	r20, Y+4	; 0x04
    1764:	5d 81       	ldd	r21, Y+5	; 0x05
    1766:	42 30       	cpi	r20, 0x02	; 2
    1768:	51 05       	cpc	r21, r1
    176a:	b9 f1       	breq	.+110    	; 0x17da <GPIO_readPin+0xc6>
    176c:	8c 81       	ldd	r24, Y+4	; 0x04
    176e:	9d 81       	ldd	r25, Y+5	; 0x05
    1770:	83 30       	cpi	r24, 0x03	; 3
    1772:	91 05       	cpc	r25, r1
    1774:	09 f4       	brne	.+2      	; 0x1778 <GPIO_readPin+0x64>
    1776:	49 c0       	rjmp	.+146    	; 0x180a <GPIO_readPin+0xf6>
    1778:	5f c0       	rjmp	.+190    	; 0x1838 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    177a:	e9 e3       	ldi	r30, 0x39	; 57
    177c:	f0 e0       	ldi	r31, 0x00	; 0
    177e:	80 81       	ld	r24, Z
    1780:	28 2f       	mov	r18, r24
    1782:	30 e0       	ldi	r19, 0x00	; 0
    1784:	8b 81       	ldd	r24, Y+3	; 0x03
    1786:	88 2f       	mov	r24, r24
    1788:	90 e0       	ldi	r25, 0x00	; 0
    178a:	a9 01       	movw	r20, r18
    178c:	02 c0       	rjmp	.+4      	; 0x1792 <GPIO_readPin+0x7e>
    178e:	55 95       	asr	r21
    1790:	47 95       	ror	r20
    1792:	8a 95       	dec	r24
    1794:	e2 f7       	brpl	.-8      	; 0x178e <GPIO_readPin+0x7a>
    1796:	ca 01       	movw	r24, r20
    1798:	81 70       	andi	r24, 0x01	; 1
    179a:	90 70       	andi	r25, 0x00	; 0
    179c:	88 23       	and	r24, r24
    179e:	19 f0       	breq	.+6      	; 0x17a6 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    17a0:	81 e0       	ldi	r24, 0x01	; 1
    17a2:	89 83       	std	Y+1, r24	; 0x01
    17a4:	49 c0       	rjmp	.+146    	; 0x1838 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    17a6:	19 82       	std	Y+1, r1	; 0x01
    17a8:	47 c0       	rjmp	.+142    	; 0x1838 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    17aa:	e6 e3       	ldi	r30, 0x36	; 54
    17ac:	f0 e0       	ldi	r31, 0x00	; 0
    17ae:	80 81       	ld	r24, Z
    17b0:	28 2f       	mov	r18, r24
    17b2:	30 e0       	ldi	r19, 0x00	; 0
    17b4:	8b 81       	ldd	r24, Y+3	; 0x03
    17b6:	88 2f       	mov	r24, r24
    17b8:	90 e0       	ldi	r25, 0x00	; 0
    17ba:	a9 01       	movw	r20, r18
    17bc:	02 c0       	rjmp	.+4      	; 0x17c2 <GPIO_readPin+0xae>
    17be:	55 95       	asr	r21
    17c0:	47 95       	ror	r20
    17c2:	8a 95       	dec	r24
    17c4:	e2 f7       	brpl	.-8      	; 0x17be <GPIO_readPin+0xaa>
    17c6:	ca 01       	movw	r24, r20
    17c8:	81 70       	andi	r24, 0x01	; 1
    17ca:	90 70       	andi	r25, 0x00	; 0
    17cc:	88 23       	and	r24, r24
    17ce:	19 f0       	breq	.+6      	; 0x17d6 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    17d0:	81 e0       	ldi	r24, 0x01	; 1
    17d2:	89 83       	std	Y+1, r24	; 0x01
    17d4:	31 c0       	rjmp	.+98     	; 0x1838 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    17d6:	19 82       	std	Y+1, r1	; 0x01
    17d8:	2f c0       	rjmp	.+94     	; 0x1838 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    17da:	e3 e3       	ldi	r30, 0x33	; 51
    17dc:	f0 e0       	ldi	r31, 0x00	; 0
    17de:	80 81       	ld	r24, Z
    17e0:	28 2f       	mov	r18, r24
    17e2:	30 e0       	ldi	r19, 0x00	; 0
    17e4:	8b 81       	ldd	r24, Y+3	; 0x03
    17e6:	88 2f       	mov	r24, r24
    17e8:	90 e0       	ldi	r25, 0x00	; 0
    17ea:	a9 01       	movw	r20, r18
    17ec:	02 c0       	rjmp	.+4      	; 0x17f2 <GPIO_readPin+0xde>
    17ee:	55 95       	asr	r21
    17f0:	47 95       	ror	r20
    17f2:	8a 95       	dec	r24
    17f4:	e2 f7       	brpl	.-8      	; 0x17ee <GPIO_readPin+0xda>
    17f6:	ca 01       	movw	r24, r20
    17f8:	81 70       	andi	r24, 0x01	; 1
    17fa:	90 70       	andi	r25, 0x00	; 0
    17fc:	88 23       	and	r24, r24
    17fe:	19 f0       	breq	.+6      	; 0x1806 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    1800:	81 e0       	ldi	r24, 0x01	; 1
    1802:	89 83       	std	Y+1, r24	; 0x01
    1804:	19 c0       	rjmp	.+50     	; 0x1838 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1806:	19 82       	std	Y+1, r1	; 0x01
    1808:	17 c0       	rjmp	.+46     	; 0x1838 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    180a:	e0 e3       	ldi	r30, 0x30	; 48
    180c:	f0 e0       	ldi	r31, 0x00	; 0
    180e:	80 81       	ld	r24, Z
    1810:	28 2f       	mov	r18, r24
    1812:	30 e0       	ldi	r19, 0x00	; 0
    1814:	8b 81       	ldd	r24, Y+3	; 0x03
    1816:	88 2f       	mov	r24, r24
    1818:	90 e0       	ldi	r25, 0x00	; 0
    181a:	a9 01       	movw	r20, r18
    181c:	02 c0       	rjmp	.+4      	; 0x1822 <GPIO_readPin+0x10e>
    181e:	55 95       	asr	r21
    1820:	47 95       	ror	r20
    1822:	8a 95       	dec	r24
    1824:	e2 f7       	brpl	.-8      	; 0x181e <GPIO_readPin+0x10a>
    1826:	ca 01       	movw	r24, r20
    1828:	81 70       	andi	r24, 0x01	; 1
    182a:	90 70       	andi	r25, 0x00	; 0
    182c:	88 23       	and	r24, r24
    182e:	19 f0       	breq	.+6      	; 0x1836 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    1830:	81 e0       	ldi	r24, 0x01	; 1
    1832:	89 83       	std	Y+1, r24	; 0x01
    1834:	01 c0       	rjmp	.+2      	; 0x1838 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1836:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    1838:	89 81       	ldd	r24, Y+1	; 0x01
}
    183a:	0f 90       	pop	r0
    183c:	0f 90       	pop	r0
    183e:	0f 90       	pop	r0
    1840:	0f 90       	pop	r0
    1842:	0f 90       	pop	r0
    1844:	cf 91       	pop	r28
    1846:	df 91       	pop	r29
    1848:	08 95       	ret

0000184a <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    184a:	df 93       	push	r29
    184c:	cf 93       	push	r28
    184e:	00 d0       	rcall	.+0      	; 0x1850 <GPIO_setupPortDirection+0x6>
    1850:	00 d0       	rcall	.+0      	; 0x1852 <GPIO_setupPortDirection+0x8>
    1852:	cd b7       	in	r28, 0x3d	; 61
    1854:	de b7       	in	r29, 0x3e	; 62
    1856:	89 83       	std	Y+1, r24	; 0x01
    1858:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    185a:	89 81       	ldd	r24, Y+1	; 0x01
    185c:	84 30       	cpi	r24, 0x04	; 4
    185e:	90 f5       	brcc	.+100    	; 0x18c4 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    1860:	89 81       	ldd	r24, Y+1	; 0x01
    1862:	28 2f       	mov	r18, r24
    1864:	30 e0       	ldi	r19, 0x00	; 0
    1866:	3c 83       	std	Y+4, r19	; 0x04
    1868:	2b 83       	std	Y+3, r18	; 0x03
    186a:	8b 81       	ldd	r24, Y+3	; 0x03
    186c:	9c 81       	ldd	r25, Y+4	; 0x04
    186e:	81 30       	cpi	r24, 0x01	; 1
    1870:	91 05       	cpc	r25, r1
    1872:	d1 f0       	breq	.+52     	; 0x18a8 <GPIO_setupPortDirection+0x5e>
    1874:	2b 81       	ldd	r18, Y+3	; 0x03
    1876:	3c 81       	ldd	r19, Y+4	; 0x04
    1878:	22 30       	cpi	r18, 0x02	; 2
    187a:	31 05       	cpc	r19, r1
    187c:	2c f4       	brge	.+10     	; 0x1888 <GPIO_setupPortDirection+0x3e>
    187e:	8b 81       	ldd	r24, Y+3	; 0x03
    1880:	9c 81       	ldd	r25, Y+4	; 0x04
    1882:	00 97       	sbiw	r24, 0x00	; 0
    1884:	61 f0       	breq	.+24     	; 0x189e <GPIO_setupPortDirection+0x54>
    1886:	1e c0       	rjmp	.+60     	; 0x18c4 <GPIO_setupPortDirection+0x7a>
    1888:	2b 81       	ldd	r18, Y+3	; 0x03
    188a:	3c 81       	ldd	r19, Y+4	; 0x04
    188c:	22 30       	cpi	r18, 0x02	; 2
    188e:	31 05       	cpc	r19, r1
    1890:	81 f0       	breq	.+32     	; 0x18b2 <GPIO_setupPortDirection+0x68>
    1892:	8b 81       	ldd	r24, Y+3	; 0x03
    1894:	9c 81       	ldd	r25, Y+4	; 0x04
    1896:	83 30       	cpi	r24, 0x03	; 3
    1898:	91 05       	cpc	r25, r1
    189a:	81 f0       	breq	.+32     	; 0x18bc <GPIO_setupPortDirection+0x72>
    189c:	13 c0       	rjmp	.+38     	; 0x18c4 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    189e:	ea e3       	ldi	r30, 0x3A	; 58
    18a0:	f0 e0       	ldi	r31, 0x00	; 0
    18a2:	8a 81       	ldd	r24, Y+2	; 0x02
    18a4:	80 83       	st	Z, r24
    18a6:	0e c0       	rjmp	.+28     	; 0x18c4 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    18a8:	e7 e3       	ldi	r30, 0x37	; 55
    18aa:	f0 e0       	ldi	r31, 0x00	; 0
    18ac:	8a 81       	ldd	r24, Y+2	; 0x02
    18ae:	80 83       	st	Z, r24
    18b0:	09 c0       	rjmp	.+18     	; 0x18c4 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    18b2:	e4 e3       	ldi	r30, 0x34	; 52
    18b4:	f0 e0       	ldi	r31, 0x00	; 0
    18b6:	8a 81       	ldd	r24, Y+2	; 0x02
    18b8:	80 83       	st	Z, r24
    18ba:	04 c0       	rjmp	.+8      	; 0x18c4 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    18bc:	e1 e3       	ldi	r30, 0x31	; 49
    18be:	f0 e0       	ldi	r31, 0x00	; 0
    18c0:	8a 81       	ldd	r24, Y+2	; 0x02
    18c2:	80 83       	st	Z, r24
			break;
		}
	}
}
    18c4:	0f 90       	pop	r0
    18c6:	0f 90       	pop	r0
    18c8:	0f 90       	pop	r0
    18ca:	0f 90       	pop	r0
    18cc:	cf 91       	pop	r28
    18ce:	df 91       	pop	r29
    18d0:	08 95       	ret

000018d2 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    18d2:	df 93       	push	r29
    18d4:	cf 93       	push	r28
    18d6:	00 d0       	rcall	.+0      	; 0x18d8 <GPIO_writePort+0x6>
    18d8:	00 d0       	rcall	.+0      	; 0x18da <GPIO_writePort+0x8>
    18da:	cd b7       	in	r28, 0x3d	; 61
    18dc:	de b7       	in	r29, 0x3e	; 62
    18de:	89 83       	std	Y+1, r24	; 0x01
    18e0:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    18e2:	89 81       	ldd	r24, Y+1	; 0x01
    18e4:	84 30       	cpi	r24, 0x04	; 4
    18e6:	90 f5       	brcc	.+100    	; 0x194c <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    18e8:	89 81       	ldd	r24, Y+1	; 0x01
    18ea:	28 2f       	mov	r18, r24
    18ec:	30 e0       	ldi	r19, 0x00	; 0
    18ee:	3c 83       	std	Y+4, r19	; 0x04
    18f0:	2b 83       	std	Y+3, r18	; 0x03
    18f2:	8b 81       	ldd	r24, Y+3	; 0x03
    18f4:	9c 81       	ldd	r25, Y+4	; 0x04
    18f6:	81 30       	cpi	r24, 0x01	; 1
    18f8:	91 05       	cpc	r25, r1
    18fa:	d1 f0       	breq	.+52     	; 0x1930 <GPIO_writePort+0x5e>
    18fc:	2b 81       	ldd	r18, Y+3	; 0x03
    18fe:	3c 81       	ldd	r19, Y+4	; 0x04
    1900:	22 30       	cpi	r18, 0x02	; 2
    1902:	31 05       	cpc	r19, r1
    1904:	2c f4       	brge	.+10     	; 0x1910 <GPIO_writePort+0x3e>
    1906:	8b 81       	ldd	r24, Y+3	; 0x03
    1908:	9c 81       	ldd	r25, Y+4	; 0x04
    190a:	00 97       	sbiw	r24, 0x00	; 0
    190c:	61 f0       	breq	.+24     	; 0x1926 <GPIO_writePort+0x54>
    190e:	1e c0       	rjmp	.+60     	; 0x194c <GPIO_writePort+0x7a>
    1910:	2b 81       	ldd	r18, Y+3	; 0x03
    1912:	3c 81       	ldd	r19, Y+4	; 0x04
    1914:	22 30       	cpi	r18, 0x02	; 2
    1916:	31 05       	cpc	r19, r1
    1918:	81 f0       	breq	.+32     	; 0x193a <GPIO_writePort+0x68>
    191a:	8b 81       	ldd	r24, Y+3	; 0x03
    191c:	9c 81       	ldd	r25, Y+4	; 0x04
    191e:	83 30       	cpi	r24, 0x03	; 3
    1920:	91 05       	cpc	r25, r1
    1922:	81 f0       	breq	.+32     	; 0x1944 <GPIO_writePort+0x72>
    1924:	13 c0       	rjmp	.+38     	; 0x194c <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    1926:	eb e3       	ldi	r30, 0x3B	; 59
    1928:	f0 e0       	ldi	r31, 0x00	; 0
    192a:	8a 81       	ldd	r24, Y+2	; 0x02
    192c:	80 83       	st	Z, r24
    192e:	0e c0       	rjmp	.+28     	; 0x194c <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    1930:	e8 e3       	ldi	r30, 0x38	; 56
    1932:	f0 e0       	ldi	r31, 0x00	; 0
    1934:	8a 81       	ldd	r24, Y+2	; 0x02
    1936:	80 83       	st	Z, r24
    1938:	09 c0       	rjmp	.+18     	; 0x194c <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    193a:	e5 e3       	ldi	r30, 0x35	; 53
    193c:	f0 e0       	ldi	r31, 0x00	; 0
    193e:	8a 81       	ldd	r24, Y+2	; 0x02
    1940:	80 83       	st	Z, r24
    1942:	04 c0       	rjmp	.+8      	; 0x194c <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1944:	e2 e3       	ldi	r30, 0x32	; 50
    1946:	f0 e0       	ldi	r31, 0x00	; 0
    1948:	8a 81       	ldd	r24, Y+2	; 0x02
    194a:	80 83       	st	Z, r24
			break;
		}
	}
}
    194c:	0f 90       	pop	r0
    194e:	0f 90       	pop	r0
    1950:	0f 90       	pop	r0
    1952:	0f 90       	pop	r0
    1954:	cf 91       	pop	r28
    1956:	df 91       	pop	r29
    1958:	08 95       	ret

0000195a <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    195a:	df 93       	push	r29
    195c:	cf 93       	push	r28
    195e:	00 d0       	rcall	.+0      	; 0x1960 <GPIO_readPort+0x6>
    1960:	00 d0       	rcall	.+0      	; 0x1962 <GPIO_readPort+0x8>
    1962:	cd b7       	in	r28, 0x3d	; 61
    1964:	de b7       	in	r29, 0x3e	; 62
    1966:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    1968:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    196a:	8a 81       	ldd	r24, Y+2	; 0x02
    196c:	84 30       	cpi	r24, 0x04	; 4
    196e:	90 f5       	brcc	.+100    	; 0x19d4 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    1970:	8a 81       	ldd	r24, Y+2	; 0x02
    1972:	28 2f       	mov	r18, r24
    1974:	30 e0       	ldi	r19, 0x00	; 0
    1976:	3c 83       	std	Y+4, r19	; 0x04
    1978:	2b 83       	std	Y+3, r18	; 0x03
    197a:	8b 81       	ldd	r24, Y+3	; 0x03
    197c:	9c 81       	ldd	r25, Y+4	; 0x04
    197e:	81 30       	cpi	r24, 0x01	; 1
    1980:	91 05       	cpc	r25, r1
    1982:	d1 f0       	breq	.+52     	; 0x19b8 <GPIO_readPort+0x5e>
    1984:	2b 81       	ldd	r18, Y+3	; 0x03
    1986:	3c 81       	ldd	r19, Y+4	; 0x04
    1988:	22 30       	cpi	r18, 0x02	; 2
    198a:	31 05       	cpc	r19, r1
    198c:	2c f4       	brge	.+10     	; 0x1998 <GPIO_readPort+0x3e>
    198e:	8b 81       	ldd	r24, Y+3	; 0x03
    1990:	9c 81       	ldd	r25, Y+4	; 0x04
    1992:	00 97       	sbiw	r24, 0x00	; 0
    1994:	61 f0       	breq	.+24     	; 0x19ae <GPIO_readPort+0x54>
    1996:	1e c0       	rjmp	.+60     	; 0x19d4 <GPIO_readPort+0x7a>
    1998:	2b 81       	ldd	r18, Y+3	; 0x03
    199a:	3c 81       	ldd	r19, Y+4	; 0x04
    199c:	22 30       	cpi	r18, 0x02	; 2
    199e:	31 05       	cpc	r19, r1
    19a0:	81 f0       	breq	.+32     	; 0x19c2 <GPIO_readPort+0x68>
    19a2:	8b 81       	ldd	r24, Y+3	; 0x03
    19a4:	9c 81       	ldd	r25, Y+4	; 0x04
    19a6:	83 30       	cpi	r24, 0x03	; 3
    19a8:	91 05       	cpc	r25, r1
    19aa:	81 f0       	breq	.+32     	; 0x19cc <GPIO_readPort+0x72>
    19ac:	13 c0       	rjmp	.+38     	; 0x19d4 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    19ae:	e9 e3       	ldi	r30, 0x39	; 57
    19b0:	f0 e0       	ldi	r31, 0x00	; 0
    19b2:	80 81       	ld	r24, Z
    19b4:	89 83       	std	Y+1, r24	; 0x01
    19b6:	0e c0       	rjmp	.+28     	; 0x19d4 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    19b8:	e6 e3       	ldi	r30, 0x36	; 54
    19ba:	f0 e0       	ldi	r31, 0x00	; 0
    19bc:	80 81       	ld	r24, Z
    19be:	89 83       	std	Y+1, r24	; 0x01
    19c0:	09 c0       	rjmp	.+18     	; 0x19d4 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    19c2:	e3 e3       	ldi	r30, 0x33	; 51
    19c4:	f0 e0       	ldi	r31, 0x00	; 0
    19c6:	80 81       	ld	r24, Z
    19c8:	89 83       	std	Y+1, r24	; 0x01
    19ca:	04 c0       	rjmp	.+8      	; 0x19d4 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    19cc:	e0 e3       	ldi	r30, 0x30	; 48
    19ce:	f0 e0       	ldi	r31, 0x00	; 0
    19d0:	80 81       	ld	r24, Z
    19d2:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    19d4:	89 81       	ldd	r24, Y+1	; 0x01
}
    19d6:	0f 90       	pop	r0
    19d8:	0f 90       	pop	r0
    19da:	0f 90       	pop	r0
    19dc:	0f 90       	pop	r0
    19de:	cf 91       	pop	r28
    19e0:	df 91       	pop	r29
    19e2:	08 95       	ret

000019e4 <__vector_9>:


/*************************************Timer0***********************************/

ISR(TIMER0_OVF_vect)
{
    19e4:	1f 92       	push	r1
    19e6:	0f 92       	push	r0
    19e8:	0f b6       	in	r0, 0x3f	; 63
    19ea:	0f 92       	push	r0
    19ec:	11 24       	eor	r1, r1
    19ee:	2f 93       	push	r18
    19f0:	3f 93       	push	r19
    19f2:	4f 93       	push	r20
    19f4:	5f 93       	push	r21
    19f6:	6f 93       	push	r22
    19f8:	7f 93       	push	r23
    19fa:	8f 93       	push	r24
    19fc:	9f 93       	push	r25
    19fe:	af 93       	push	r26
    1a00:	bf 93       	push	r27
    1a02:	ef 93       	push	r30
    1a04:	ff 93       	push	r31
    1a06:	df 93       	push	r29
    1a08:	cf 93       	push	r28
    1a0a:	cd b7       	in	r28, 0x3d	; 61
    1a0c:	de b7       	in	r29, 0x3e	; 62
	if(g_Timer0CallBackPtr != NULL_PTR)
    1a0e:	80 91 79 00 	lds	r24, 0x0079
    1a12:	90 91 7a 00 	lds	r25, 0x007A
    1a16:	00 97       	sbiw	r24, 0x00	; 0
    1a18:	29 f0       	breq	.+10     	; 0x1a24 <__vector_9+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_Timer0CallBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    1a1a:	e0 91 79 00 	lds	r30, 0x0079
    1a1e:	f0 91 7a 00 	lds	r31, 0x007A
    1a22:	09 95       	icall
	}
}
    1a24:	cf 91       	pop	r28
    1a26:	df 91       	pop	r29
    1a28:	ff 91       	pop	r31
    1a2a:	ef 91       	pop	r30
    1a2c:	bf 91       	pop	r27
    1a2e:	af 91       	pop	r26
    1a30:	9f 91       	pop	r25
    1a32:	8f 91       	pop	r24
    1a34:	7f 91       	pop	r23
    1a36:	6f 91       	pop	r22
    1a38:	5f 91       	pop	r21
    1a3a:	4f 91       	pop	r20
    1a3c:	3f 91       	pop	r19
    1a3e:	2f 91       	pop	r18
    1a40:	0f 90       	pop	r0
    1a42:	0f be       	out	0x3f, r0	; 63
    1a44:	0f 90       	pop	r0
    1a46:	1f 90       	pop	r1
    1a48:	18 95       	reti

00001a4a <__vector_19>:


ISR(TIMER0_COMP_vect)
{
    1a4a:	1f 92       	push	r1
    1a4c:	0f 92       	push	r0
    1a4e:	0f b6       	in	r0, 0x3f	; 63
    1a50:	0f 92       	push	r0
    1a52:	11 24       	eor	r1, r1
    1a54:	2f 93       	push	r18
    1a56:	3f 93       	push	r19
    1a58:	4f 93       	push	r20
    1a5a:	5f 93       	push	r21
    1a5c:	6f 93       	push	r22
    1a5e:	7f 93       	push	r23
    1a60:	8f 93       	push	r24
    1a62:	9f 93       	push	r25
    1a64:	af 93       	push	r26
    1a66:	bf 93       	push	r27
    1a68:	ef 93       	push	r30
    1a6a:	ff 93       	push	r31
    1a6c:	df 93       	push	r29
    1a6e:	cf 93       	push	r28
    1a70:	cd b7       	in	r28, 0x3d	; 61
    1a72:	de b7       	in	r29, 0x3e	; 62
	if(g_Timer0CallBackPtr != NULL_PTR)
    1a74:	80 91 79 00 	lds	r24, 0x0079
    1a78:	90 91 7a 00 	lds	r25, 0x007A
    1a7c:	00 97       	sbiw	r24, 0x00	; 0
    1a7e:	29 f0       	breq	.+10     	; 0x1a8a <__vector_19+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_Timer0CallBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    1a80:	e0 91 79 00 	lds	r30, 0x0079
    1a84:	f0 91 7a 00 	lds	r31, 0x007A
    1a88:	09 95       	icall
	}
}
    1a8a:	cf 91       	pop	r28
    1a8c:	df 91       	pop	r29
    1a8e:	ff 91       	pop	r31
    1a90:	ef 91       	pop	r30
    1a92:	bf 91       	pop	r27
    1a94:	af 91       	pop	r26
    1a96:	9f 91       	pop	r25
    1a98:	8f 91       	pop	r24
    1a9a:	7f 91       	pop	r23
    1a9c:	6f 91       	pop	r22
    1a9e:	5f 91       	pop	r21
    1aa0:	4f 91       	pop	r20
    1aa2:	3f 91       	pop	r19
    1aa4:	2f 91       	pop	r18
    1aa6:	0f 90       	pop	r0
    1aa8:	0f be       	out	0x3f, r0	; 63
    1aaa:	0f 90       	pop	r0
    1aac:	1f 90       	pop	r1
    1aae:	18 95       	reti

00001ab0 <__vector_8>:
/*************************************Timer1***********************************/

ISR(TIMER1_OVF_vect)
{
    1ab0:	1f 92       	push	r1
    1ab2:	0f 92       	push	r0
    1ab4:	0f b6       	in	r0, 0x3f	; 63
    1ab6:	0f 92       	push	r0
    1ab8:	11 24       	eor	r1, r1
    1aba:	2f 93       	push	r18
    1abc:	3f 93       	push	r19
    1abe:	4f 93       	push	r20
    1ac0:	5f 93       	push	r21
    1ac2:	6f 93       	push	r22
    1ac4:	7f 93       	push	r23
    1ac6:	8f 93       	push	r24
    1ac8:	9f 93       	push	r25
    1aca:	af 93       	push	r26
    1acc:	bf 93       	push	r27
    1ace:	ef 93       	push	r30
    1ad0:	ff 93       	push	r31
    1ad2:	df 93       	push	r29
    1ad4:	cf 93       	push	r28
    1ad6:	cd b7       	in	r28, 0x3d	; 61
    1ad8:	de b7       	in	r29, 0x3e	; 62
	if(g_Timer1CallBackPtr != NULL_PTR)
    1ada:	80 91 7b 00 	lds	r24, 0x007B
    1ade:	90 91 7c 00 	lds	r25, 0x007C
    1ae2:	00 97       	sbiw	r24, 0x00	; 0
    1ae4:	29 f0       	breq	.+10     	; 0x1af0 <__vector_8+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_Timer1CallBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    1ae6:	e0 91 7b 00 	lds	r30, 0x007B
    1aea:	f0 91 7c 00 	lds	r31, 0x007C
    1aee:	09 95       	icall
	}
}
    1af0:	cf 91       	pop	r28
    1af2:	df 91       	pop	r29
    1af4:	ff 91       	pop	r31
    1af6:	ef 91       	pop	r30
    1af8:	bf 91       	pop	r27
    1afa:	af 91       	pop	r26
    1afc:	9f 91       	pop	r25
    1afe:	8f 91       	pop	r24
    1b00:	7f 91       	pop	r23
    1b02:	6f 91       	pop	r22
    1b04:	5f 91       	pop	r21
    1b06:	4f 91       	pop	r20
    1b08:	3f 91       	pop	r19
    1b0a:	2f 91       	pop	r18
    1b0c:	0f 90       	pop	r0
    1b0e:	0f be       	out	0x3f, r0	; 63
    1b10:	0f 90       	pop	r0
    1b12:	1f 90       	pop	r1
    1b14:	18 95       	reti

00001b16 <__vector_6>:


ISR(TIMER1_COMPA_vect)
{
    1b16:	1f 92       	push	r1
    1b18:	0f 92       	push	r0
    1b1a:	0f b6       	in	r0, 0x3f	; 63
    1b1c:	0f 92       	push	r0
    1b1e:	11 24       	eor	r1, r1
    1b20:	2f 93       	push	r18
    1b22:	3f 93       	push	r19
    1b24:	4f 93       	push	r20
    1b26:	5f 93       	push	r21
    1b28:	6f 93       	push	r22
    1b2a:	7f 93       	push	r23
    1b2c:	8f 93       	push	r24
    1b2e:	9f 93       	push	r25
    1b30:	af 93       	push	r26
    1b32:	bf 93       	push	r27
    1b34:	ef 93       	push	r30
    1b36:	ff 93       	push	r31
    1b38:	df 93       	push	r29
    1b3a:	cf 93       	push	r28
    1b3c:	cd b7       	in	r28, 0x3d	; 61
    1b3e:	de b7       	in	r29, 0x3e	; 62
	if(g_Timer1CallBackPtr != NULL_PTR)
    1b40:	80 91 7b 00 	lds	r24, 0x007B
    1b44:	90 91 7c 00 	lds	r25, 0x007C
    1b48:	00 97       	sbiw	r24, 0x00	; 0
    1b4a:	29 f0       	breq	.+10     	; 0x1b56 <__vector_6+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_Timer1CallBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    1b4c:	e0 91 7b 00 	lds	r30, 0x007B
    1b50:	f0 91 7c 00 	lds	r31, 0x007C
    1b54:	09 95       	icall
	}
}
    1b56:	cf 91       	pop	r28
    1b58:	df 91       	pop	r29
    1b5a:	ff 91       	pop	r31
    1b5c:	ef 91       	pop	r30
    1b5e:	bf 91       	pop	r27
    1b60:	af 91       	pop	r26
    1b62:	9f 91       	pop	r25
    1b64:	8f 91       	pop	r24
    1b66:	7f 91       	pop	r23
    1b68:	6f 91       	pop	r22
    1b6a:	5f 91       	pop	r21
    1b6c:	4f 91       	pop	r20
    1b6e:	3f 91       	pop	r19
    1b70:	2f 91       	pop	r18
    1b72:	0f 90       	pop	r0
    1b74:	0f be       	out	0x3f, r0	; 63
    1b76:	0f 90       	pop	r0
    1b78:	1f 90       	pop	r1
    1b7a:	18 95       	reti

00001b7c <__vector_4>:
/*************************************Timer2***********************************/
ISR(TIMER2_OVF_vect)
{
    1b7c:	1f 92       	push	r1
    1b7e:	0f 92       	push	r0
    1b80:	0f b6       	in	r0, 0x3f	; 63
    1b82:	0f 92       	push	r0
    1b84:	11 24       	eor	r1, r1
    1b86:	2f 93       	push	r18
    1b88:	3f 93       	push	r19
    1b8a:	4f 93       	push	r20
    1b8c:	5f 93       	push	r21
    1b8e:	6f 93       	push	r22
    1b90:	7f 93       	push	r23
    1b92:	8f 93       	push	r24
    1b94:	9f 93       	push	r25
    1b96:	af 93       	push	r26
    1b98:	bf 93       	push	r27
    1b9a:	ef 93       	push	r30
    1b9c:	ff 93       	push	r31
    1b9e:	df 93       	push	r29
    1ba0:	cf 93       	push	r28
    1ba2:	cd b7       	in	r28, 0x3d	; 61
    1ba4:	de b7       	in	r29, 0x3e	; 62
	if(g_Timer2CallBackPtr != NULL_PTR)
    1ba6:	80 91 7d 00 	lds	r24, 0x007D
    1baa:	90 91 7e 00 	lds	r25, 0x007E
    1bae:	00 97       	sbiw	r24, 0x00	; 0
    1bb0:	29 f0       	breq	.+10     	; 0x1bbc <__vector_4+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_Timer2CallBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    1bb2:	e0 91 7d 00 	lds	r30, 0x007D
    1bb6:	f0 91 7e 00 	lds	r31, 0x007E
    1bba:	09 95       	icall
	}
}
    1bbc:	cf 91       	pop	r28
    1bbe:	df 91       	pop	r29
    1bc0:	ff 91       	pop	r31
    1bc2:	ef 91       	pop	r30
    1bc4:	bf 91       	pop	r27
    1bc6:	af 91       	pop	r26
    1bc8:	9f 91       	pop	r25
    1bca:	8f 91       	pop	r24
    1bcc:	7f 91       	pop	r23
    1bce:	6f 91       	pop	r22
    1bd0:	5f 91       	pop	r21
    1bd2:	4f 91       	pop	r20
    1bd4:	3f 91       	pop	r19
    1bd6:	2f 91       	pop	r18
    1bd8:	0f 90       	pop	r0
    1bda:	0f be       	out	0x3f, r0	; 63
    1bdc:	0f 90       	pop	r0
    1bde:	1f 90       	pop	r1
    1be0:	18 95       	reti

00001be2 <__vector_3>:


ISR(TIMER2_COMP_vect)
{
    1be2:	1f 92       	push	r1
    1be4:	0f 92       	push	r0
    1be6:	0f b6       	in	r0, 0x3f	; 63
    1be8:	0f 92       	push	r0
    1bea:	11 24       	eor	r1, r1
    1bec:	2f 93       	push	r18
    1bee:	3f 93       	push	r19
    1bf0:	4f 93       	push	r20
    1bf2:	5f 93       	push	r21
    1bf4:	6f 93       	push	r22
    1bf6:	7f 93       	push	r23
    1bf8:	8f 93       	push	r24
    1bfa:	9f 93       	push	r25
    1bfc:	af 93       	push	r26
    1bfe:	bf 93       	push	r27
    1c00:	ef 93       	push	r30
    1c02:	ff 93       	push	r31
    1c04:	df 93       	push	r29
    1c06:	cf 93       	push	r28
    1c08:	cd b7       	in	r28, 0x3d	; 61
    1c0a:	de b7       	in	r29, 0x3e	; 62
	if(g_Timer2CallBackPtr != NULL_PTR)
    1c0c:	80 91 7d 00 	lds	r24, 0x007D
    1c10:	90 91 7e 00 	lds	r25, 0x007E
    1c14:	00 97       	sbiw	r24, 0x00	; 0
    1c16:	29 f0       	breq	.+10     	; 0x1c22 <__vector_3+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_Timer2CallBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    1c18:	e0 91 7d 00 	lds	r30, 0x007D
    1c1c:	f0 91 7e 00 	lds	r31, 0x007E
    1c20:	09 95       	icall
	}
}
    1c22:	cf 91       	pop	r28
    1c24:	df 91       	pop	r29
    1c26:	ff 91       	pop	r31
    1c28:	ef 91       	pop	r30
    1c2a:	bf 91       	pop	r27
    1c2c:	af 91       	pop	r26
    1c2e:	9f 91       	pop	r25
    1c30:	8f 91       	pop	r24
    1c32:	7f 91       	pop	r23
    1c34:	6f 91       	pop	r22
    1c36:	5f 91       	pop	r21
    1c38:	4f 91       	pop	r20
    1c3a:	3f 91       	pop	r19
    1c3c:	2f 91       	pop	r18
    1c3e:	0f 90       	pop	r0
    1c40:	0f be       	out	0x3f, r0	; 63
    1c42:	0f 90       	pop	r0
    1c44:	1f 90       	pop	r1
    1c46:	18 95       	reti

00001c48 <Timer_init>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

void Timer_init(const TIMER_ConfigType * config_Ptr)
{
    1c48:	df 93       	push	r29
    1c4a:	cf 93       	push	r28
    1c4c:	00 d0       	rcall	.+0      	; 0x1c4e <Timer_init+0x6>
    1c4e:	cd b7       	in	r28, 0x3d	; 61
    1c50:	de b7       	in	r29, 0x3e	; 62
    1c52:	9a 83       	std	Y+2, r25	; 0x02
    1c54:	89 83       	std	Y+1, r24	; 0x01
	if (config_Ptr->Timer_ID == TIMER0)
    1c56:	e9 81       	ldd	r30, Y+1	; 0x01
    1c58:	fa 81       	ldd	r31, Y+2	; 0x02
    1c5a:	80 81       	ld	r24, Z
    1c5c:	88 23       	and	r24, r24
    1c5e:	09 f0       	breq	.+2      	; 0x1c62 <Timer_init+0x1a>
    1c60:	70 c0       	rjmp	.+224    	; 0x1d42 <Timer_init+0xfa>
	{
		TCNT0 = (config_Ptr->Init_Value); /* Set Timer Initial Value to 0*/
    1c62:	22 e5       	ldi	r18, 0x52	; 82
    1c64:	30 e0       	ldi	r19, 0x00	; 0
    1c66:	e9 81       	ldd	r30, Y+1	; 0x01
    1c68:	fa 81       	ldd	r31, Y+2	; 0x02
    1c6a:	87 81       	ldd	r24, Z+7	; 0x07
    1c6c:	90 85       	ldd	r25, Z+8	; 0x08
    1c6e:	a1 85       	ldd	r26, Z+9	; 0x09
    1c70:	b2 85       	ldd	r27, Z+10	; 0x0a
    1c72:	f9 01       	movw	r30, r18
    1c74:	80 83       	st	Z, r24

		if (config_Ptr->mode == NORMAL)
    1c76:	e9 81       	ldd	r30, Y+1	; 0x01
    1c78:	fa 81       	ldd	r31, Y+2	; 0x02
    1c7a:	82 81       	ldd	r24, Z+2	; 0x02
    1c7c:	88 23       	and	r24, r24
    1c7e:	41 f4       	brne	.+16     	; 0x1c90 <Timer_init+0x48>
		{
			SET_BIT(TIMSK,OCIE0);
    1c80:	a9 e5       	ldi	r26, 0x59	; 89
    1c82:	b0 e0       	ldi	r27, 0x00	; 0
    1c84:	e9 e5       	ldi	r30, 0x59	; 89
    1c86:	f0 e0       	ldi	r31, 0x00	; 0
    1c88:	80 81       	ld	r24, Z
    1c8a:	82 60       	ori	r24, 0x02	; 2
    1c8c:	8c 93       	st	X, r24
    1c8e:	16 c0       	rjmp	.+44     	; 0x1cbc <Timer_init+0x74>
		}
		else if (config_Ptr->mode == CTC)
    1c90:	e9 81       	ldd	r30, Y+1	; 0x01
    1c92:	fa 81       	ldd	r31, Y+2	; 0x02
    1c94:	82 81       	ldd	r24, Z+2	; 0x02
    1c96:	82 30       	cpi	r24, 0x02	; 2
    1c98:	89 f4       	brne	.+34     	; 0x1cbc <Timer_init+0x74>
		{
			SET_BIT(TIMSK,TOIE0);
    1c9a:	a9 e5       	ldi	r26, 0x59	; 89
    1c9c:	b0 e0       	ldi	r27, 0x00	; 0
    1c9e:	e9 e5       	ldi	r30, 0x59	; 89
    1ca0:	f0 e0       	ldi	r31, 0x00	; 0
    1ca2:	80 81       	ld	r24, Z
    1ca4:	81 60       	ori	r24, 0x01	; 1
    1ca6:	8c 93       	st	X, r24


			/*Set Timer compare Value*/
			OCR0 = (config_Ptr->Comp_Value) ;
    1ca8:	2c e5       	ldi	r18, 0x5C	; 92
    1caa:	30 e0       	ldi	r19, 0x00	; 0
    1cac:	e9 81       	ldd	r30, Y+1	; 0x01
    1cae:	fa 81       	ldd	r31, Y+2	; 0x02
    1cb0:	83 81       	ldd	r24, Z+3	; 0x03
    1cb2:	94 81       	ldd	r25, Z+4	; 0x04
    1cb4:	a5 81       	ldd	r26, Z+5	; 0x05
    1cb6:	b6 81       	ldd	r27, Z+6	; 0x06
    1cb8:	f9 01       	movw	r30, r18
    1cba:	80 83       	st	Z, r24
		/* Configure timer control register
		 * 1.Overflow mode & Compare mode FOC0 = 1
		 * 2.clock = F_CPU/8
		 */

		SET_BIT(TCCR0,FOC0);
    1cbc:	a3 e5       	ldi	r26, 0x53	; 83
    1cbe:	b0 e0       	ldi	r27, 0x00	; 0
    1cc0:	e3 e5       	ldi	r30, 0x53	; 83
    1cc2:	f0 e0       	ldi	r31, 0x00	; 0
    1cc4:	80 81       	ld	r24, Z
    1cc6:	80 68       	ori	r24, 0x80	; 128
    1cc8:	8c 93       	st	X, r24

		/* CLOCK configuration */
		TCCR0 = (TCCR0 & 0xF8) | (config_Ptr->clock);
    1cca:	a3 e5       	ldi	r26, 0x53	; 83
    1ccc:	b0 e0       	ldi	r27, 0x00	; 0
    1cce:	e3 e5       	ldi	r30, 0x53	; 83
    1cd0:	f0 e0       	ldi	r31, 0x00	; 0
    1cd2:	80 81       	ld	r24, Z
    1cd4:	98 2f       	mov	r25, r24
    1cd6:	98 7f       	andi	r25, 0xF8	; 248
    1cd8:	e9 81       	ldd	r30, Y+1	; 0x01
    1cda:	fa 81       	ldd	r31, Y+2	; 0x02
    1cdc:	81 81       	ldd	r24, Z+1	; 0x01
    1cde:	89 2b       	or	r24, r25
    1ce0:	8c 93       	st	X, r24

		/* MODE Configuration */
		TCCR0 = (TCCR0 & 0xB7) | (((config_Ptr->mode)&0x01)<<WGM00);
    1ce2:	a3 e5       	ldi	r26, 0x53	; 83
    1ce4:	b0 e0       	ldi	r27, 0x00	; 0
    1ce6:	e3 e5       	ldi	r30, 0x53	; 83
    1ce8:	f0 e0       	ldi	r31, 0x00	; 0
    1cea:	80 81       	ld	r24, Z
    1cec:	28 2f       	mov	r18, r24
    1cee:	27 7b       	andi	r18, 0xB7	; 183
    1cf0:	e9 81       	ldd	r30, Y+1	; 0x01
    1cf2:	fa 81       	ldd	r31, Y+2	; 0x02
    1cf4:	82 81       	ldd	r24, Z+2	; 0x02
    1cf6:	88 2f       	mov	r24, r24
    1cf8:	90 e0       	ldi	r25, 0x00	; 0
    1cfa:	81 70       	andi	r24, 0x01	; 1
    1cfc:	90 70       	andi	r25, 0x00	; 0
    1cfe:	00 24       	eor	r0, r0
    1d00:	96 95       	lsr	r25
    1d02:	87 95       	ror	r24
    1d04:	07 94       	ror	r0
    1d06:	96 95       	lsr	r25
    1d08:	87 95       	ror	r24
    1d0a:	07 94       	ror	r0
    1d0c:	98 2f       	mov	r25, r24
    1d0e:	80 2d       	mov	r24, r0
    1d10:	82 2b       	or	r24, r18
    1d12:	8c 93       	st	X, r24
		TCCR0 = (TCCR0 & 0xB7) | (((config_Ptr->mode)&0x02)<<WGM01);
    1d14:	a3 e5       	ldi	r26, 0x53	; 83
    1d16:	b0 e0       	ldi	r27, 0x00	; 0
    1d18:	e3 e5       	ldi	r30, 0x53	; 83
    1d1a:	f0 e0       	ldi	r31, 0x00	; 0
    1d1c:	80 81       	ld	r24, Z
    1d1e:	28 2f       	mov	r18, r24
    1d20:	27 7b       	andi	r18, 0xB7	; 183
    1d22:	e9 81       	ldd	r30, Y+1	; 0x01
    1d24:	fa 81       	ldd	r31, Y+2	; 0x02
    1d26:	82 81       	ldd	r24, Z+2	; 0x02
    1d28:	88 2f       	mov	r24, r24
    1d2a:	90 e0       	ldi	r25, 0x00	; 0
    1d2c:	82 70       	andi	r24, 0x02	; 2
    1d2e:	90 70       	andi	r25, 0x00	; 0
    1d30:	88 0f       	add	r24, r24
    1d32:	99 1f       	adc	r25, r25
    1d34:	88 0f       	add	r24, r24
    1d36:	99 1f       	adc	r25, r25
    1d38:	88 0f       	add	r24, r24
    1d3a:	99 1f       	adc	r25, r25
    1d3c:	82 2b       	or	r24, r18
    1d3e:	8c 93       	st	X, r24
    1d40:	bf c0       	rjmp	.+382    	; 0x1ec0 <Timer_init+0x278>

	}
	else if (config_Ptr -> Timer_ID == TIMER1)
    1d42:	e9 81       	ldd	r30, Y+1	; 0x01
    1d44:	fa 81       	ldd	r31, Y+2	; 0x02
    1d46:	80 81       	ld	r24, Z
    1d48:	81 30       	cpi	r24, 0x01	; 1
    1d4a:	09 f0       	breq	.+2      	; 0x1d4e <Timer_init+0x106>
    1d4c:	5d c0       	rjmp	.+186    	; 0x1e08 <Timer_init+0x1c0>
	{
		TCCR1A =0;
    1d4e:	ef e4       	ldi	r30, 0x4F	; 79
    1d50:	f0 e0       	ldi	r31, 0x00	; 0
    1d52:	10 82       	st	Z, r1
		SET_BIT(TCCR1A,FOC1A); /* for non-PWM mode */
    1d54:	af e4       	ldi	r26, 0x4F	; 79
    1d56:	b0 e0       	ldi	r27, 0x00	; 0
    1d58:	ef e4       	ldi	r30, 0x4F	; 79
    1d5a:	f0 e0       	ldi	r31, 0x00	; 0
    1d5c:	80 81       	ld	r24, Z
    1d5e:	88 60       	ori	r24, 0x08	; 8
    1d60:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,FOC1B);
    1d62:	af e4       	ldi	r26, 0x4F	; 79
    1d64:	b0 e0       	ldi	r27, 0x00	; 0
    1d66:	ef e4       	ldi	r30, 0x4F	; 79
    1d68:	f0 e0       	ldi	r31, 0x00	; 0
    1d6a:	80 81       	ld	r24, Z
    1d6c:	84 60       	ori	r24, 0x04	; 4
    1d6e:	8c 93       	st	X, r24
		TCCR1B = config_Ptr -> clock;
    1d70:	ae e4       	ldi	r26, 0x4E	; 78
    1d72:	b0 e0       	ldi	r27, 0x00	; 0
    1d74:	e9 81       	ldd	r30, Y+1	; 0x01
    1d76:	fa 81       	ldd	r31, Y+2	; 0x02
    1d78:	81 81       	ldd	r24, Z+1	; 0x01
    1d7a:	8c 93       	st	X, r24
		TCNT1 = config_Ptr -> Init_Value;
    1d7c:	2c e4       	ldi	r18, 0x4C	; 76
    1d7e:	30 e0       	ldi	r19, 0x00	; 0
    1d80:	e9 81       	ldd	r30, Y+1	; 0x01
    1d82:	fa 81       	ldd	r31, Y+2	; 0x02
    1d84:	87 81       	ldd	r24, Z+7	; 0x07
    1d86:	90 85       	ldd	r25, Z+8	; 0x08
    1d88:	a1 85       	ldd	r26, Z+9	; 0x09
    1d8a:	b2 85       	ldd	r27, Z+10	; 0x0a
    1d8c:	f9 01       	movw	r30, r18
    1d8e:	91 83       	std	Z+1, r25	; 0x01
    1d90:	80 83       	st	Z, r24

		if (config_Ptr -> mode == NORMAL)
    1d92:	e9 81       	ldd	r30, Y+1	; 0x01
    1d94:	fa 81       	ldd	r31, Y+2	; 0x02
    1d96:	82 81       	ldd	r24, Z+2	; 0x02
    1d98:	88 23       	and	r24, r24
    1d9a:	79 f4       	brne	.+30     	; 0x1dba <Timer_init+0x172>
		{
			SET_BIT(TIMSK, TOIE1); /* enable interrupts for overflow mode */
    1d9c:	a9 e5       	ldi	r26, 0x59	; 89
    1d9e:	b0 e0       	ldi	r27, 0x00	; 0
    1da0:	e9 e5       	ldi	r30, 0x59	; 89
    1da2:	f0 e0       	ldi	r31, 0x00	; 0
    1da4:	80 81       	ld	r24, Z
    1da6:	84 60       	ori	r24, 0x04	; 4
    1da8:	8c 93       	st	X, r24
			SET_BIT(TIFR,TOV1);
    1daa:	a8 e5       	ldi	r26, 0x58	; 88
    1dac:	b0 e0       	ldi	r27, 0x00	; 0
    1dae:	e8 e5       	ldi	r30, 0x58	; 88
    1db0:	f0 e0       	ldi	r31, 0x00	; 0
    1db2:	80 81       	ld	r24, Z
    1db4:	84 60       	ori	r24, 0x04	; 4
    1db6:	8c 93       	st	X, r24
    1db8:	83 c0       	rjmp	.+262    	; 0x1ec0 <Timer_init+0x278>

		}
		else if (config_Ptr -> mode == CTC)
    1dba:	e9 81       	ldd	r30, Y+1	; 0x01
    1dbc:	fa 81       	ldd	r31, Y+2	; 0x02
    1dbe:	82 81       	ldd	r24, Z+2	; 0x02
    1dc0:	82 30       	cpi	r24, 0x02	; 2
    1dc2:	09 f0       	breq	.+2      	; 0x1dc6 <Timer_init+0x17e>
    1dc4:	7d c0       	rjmp	.+250    	; 0x1ec0 <Timer_init+0x278>
		{
			SET_BIT(TCCR1B, WGM12);
    1dc6:	ae e4       	ldi	r26, 0x4E	; 78
    1dc8:	b0 e0       	ldi	r27, 0x00	; 0
    1dca:	ee e4       	ldi	r30, 0x4E	; 78
    1dcc:	f0 e0       	ldi	r31, 0x00	; 0
    1dce:	80 81       	ld	r24, Z
    1dd0:	88 60       	ori	r24, 0x08	; 8
    1dd2:	8c 93       	st	X, r24
			OCR1A = config_Ptr -> Comp_Value;
    1dd4:	2a e4       	ldi	r18, 0x4A	; 74
    1dd6:	30 e0       	ldi	r19, 0x00	; 0
    1dd8:	e9 81       	ldd	r30, Y+1	; 0x01
    1dda:	fa 81       	ldd	r31, Y+2	; 0x02
    1ddc:	83 81       	ldd	r24, Z+3	; 0x03
    1dde:	94 81       	ldd	r25, Z+4	; 0x04
    1de0:	a5 81       	ldd	r26, Z+5	; 0x05
    1de2:	b6 81       	ldd	r27, Z+6	; 0x06
    1de4:	f9 01       	movw	r30, r18
    1de6:	91 83       	std	Z+1, r25	; 0x01
    1de8:	80 83       	st	Z, r24
			SET_BIT(TIMSK, OCIE1A); /* enable interrupts for CTC mode */
    1dea:	a9 e5       	ldi	r26, 0x59	; 89
    1dec:	b0 e0       	ldi	r27, 0x00	; 0
    1dee:	e9 e5       	ldi	r30, 0x59	; 89
    1df0:	f0 e0       	ldi	r31, 0x00	; 0
    1df2:	80 81       	ld	r24, Z
    1df4:	80 61       	ori	r24, 0x10	; 16
    1df6:	8c 93       	st	X, r24
			SET_BIT(TIFR,OCF1A); /* enable CTC flag */
    1df8:	a8 e5       	ldi	r26, 0x58	; 88
    1dfa:	b0 e0       	ldi	r27, 0x00	; 0
    1dfc:	e8 e5       	ldi	r30, 0x58	; 88
    1dfe:	f0 e0       	ldi	r31, 0x00	; 0
    1e00:	80 81       	ld	r24, Z
    1e02:	80 61       	ori	r24, 0x10	; 16
    1e04:	8c 93       	st	X, r24
    1e06:	5c c0       	rjmp	.+184    	; 0x1ec0 <Timer_init+0x278>
		}
	}

	else if (config_Ptr -> Timer_ID == TIMER2)
    1e08:	e9 81       	ldd	r30, Y+1	; 0x01
    1e0a:	fa 81       	ldd	r31, Y+2	; 0x02
    1e0c:	80 81       	ld	r24, Z
    1e0e:	82 30       	cpi	r24, 0x02	; 2
    1e10:	09 f0       	breq	.+2      	; 0x1e14 <Timer_init+0x1cc>
    1e12:	56 c0       	rjmp	.+172    	; 0x1ec0 <Timer_init+0x278>
	{
		if (config_Ptr -> mode == NORMAL)
    1e14:	e9 81       	ldd	r30, Y+1	; 0x01
    1e16:	fa 81       	ldd	r31, Y+2	; 0x02
    1e18:	82 81       	ldd	r24, Z+2	; 0x02
    1e1a:	88 23       	and	r24, r24
    1e1c:	79 f4       	brne	.+30     	; 0x1e3c <Timer_init+0x1f4>
		{
			SET_BIT(TIMSK, TOIE2); /* enable interrupts for overflow mode */
    1e1e:	a9 e5       	ldi	r26, 0x59	; 89
    1e20:	b0 e0       	ldi	r27, 0x00	; 0
    1e22:	e9 e5       	ldi	r30, 0x59	; 89
    1e24:	f0 e0       	ldi	r31, 0x00	; 0
    1e26:	80 81       	ld	r24, Z
    1e28:	80 64       	ori	r24, 0x40	; 64
    1e2a:	8c 93       	st	X, r24
			SET_BIT(TIFR,TOV2); /* enable overflow flag */
    1e2c:	a8 e5       	ldi	r26, 0x58	; 88
    1e2e:	b0 e0       	ldi	r27, 0x00	; 0
    1e30:	e8 e5       	ldi	r30, 0x58	; 88
    1e32:	f0 e0       	ldi	r31, 0x00	; 0
    1e34:	80 81       	ld	r24, Z
    1e36:	80 64       	ori	r24, 0x40	; 64
    1e38:	8c 93       	st	X, r24
    1e3a:	24 c0       	rjmp	.+72     	; 0x1e84 <Timer_init+0x23c>

		}
		else if (config_Ptr -> mode == CTC)
    1e3c:	e9 81       	ldd	r30, Y+1	; 0x01
    1e3e:	fa 81       	ldd	r31, Y+2	; 0x02
    1e40:	82 81       	ldd	r24, Z+2	; 0x02
    1e42:	82 30       	cpi	r24, 0x02	; 2
    1e44:	f9 f4       	brne	.+62     	; 0x1e84 <Timer_init+0x23c>
		{
			SET_BIT(TCCR0, WGM21);
    1e46:	a3 e5       	ldi	r26, 0x53	; 83
    1e48:	b0 e0       	ldi	r27, 0x00	; 0
    1e4a:	e3 e5       	ldi	r30, 0x53	; 83
    1e4c:	f0 e0       	ldi	r31, 0x00	; 0
    1e4e:	80 81       	ld	r24, Z
    1e50:	88 60       	ori	r24, 0x08	; 8
    1e52:	8c 93       	st	X, r24
			OCR2 = config_Ptr -> Comp_Value;
    1e54:	23 e4       	ldi	r18, 0x43	; 67
    1e56:	30 e0       	ldi	r19, 0x00	; 0
    1e58:	e9 81       	ldd	r30, Y+1	; 0x01
    1e5a:	fa 81       	ldd	r31, Y+2	; 0x02
    1e5c:	83 81       	ldd	r24, Z+3	; 0x03
    1e5e:	94 81       	ldd	r25, Z+4	; 0x04
    1e60:	a5 81       	ldd	r26, Z+5	; 0x05
    1e62:	b6 81       	ldd	r27, Z+6	; 0x06
    1e64:	f9 01       	movw	r30, r18
    1e66:	80 83       	st	Z, r24
			SET_BIT(TIMSK, OCIE2); /* enable interrupts for CTC mode */
    1e68:	a9 e5       	ldi	r26, 0x59	; 89
    1e6a:	b0 e0       	ldi	r27, 0x00	; 0
    1e6c:	e9 e5       	ldi	r30, 0x59	; 89
    1e6e:	f0 e0       	ldi	r31, 0x00	; 0
    1e70:	80 81       	ld	r24, Z
    1e72:	80 68       	ori	r24, 0x80	; 128
    1e74:	8c 93       	st	X, r24
			SET_BIT(TIFR,OCF2); /* enable CTC flag */
    1e76:	a8 e5       	ldi	r26, 0x58	; 88
    1e78:	b0 e0       	ldi	r27, 0x00	; 0
    1e7a:	e8 e5       	ldi	r30, 0x58	; 88
    1e7c:	f0 e0       	ldi	r31, 0x00	; 0
    1e7e:	80 81       	ld	r24, Z
    1e80:	80 68       	ori	r24, 0x80	; 128
    1e82:	8c 93       	st	X, r24
		}

		SET_BIT(TCCR2, FOC2); /* for non-PWM */
    1e84:	a5 e4       	ldi	r26, 0x45	; 69
    1e86:	b0 e0       	ldi	r27, 0x00	; 0
    1e88:	e5 e4       	ldi	r30, 0x45	; 69
    1e8a:	f0 e0       	ldi	r31, 0x00	; 0
    1e8c:	80 81       	ld	r24, Z
    1e8e:	80 68       	ori	r24, 0x80	; 128
    1e90:	8c 93       	st	X, r24
		TCNT2 = config_Ptr -> Init_Value;
    1e92:	24 e4       	ldi	r18, 0x44	; 68
    1e94:	30 e0       	ldi	r19, 0x00	; 0
    1e96:	e9 81       	ldd	r30, Y+1	; 0x01
    1e98:	fa 81       	ldd	r31, Y+2	; 0x02
    1e9a:	87 81       	ldd	r24, Z+7	; 0x07
    1e9c:	90 85       	ldd	r25, Z+8	; 0x08
    1e9e:	a1 85       	ldd	r26, Z+9	; 0x09
    1ea0:	b2 85       	ldd	r27, Z+10	; 0x0a
    1ea2:	f9 01       	movw	r30, r18
    1ea4:	80 83       	st	Z, r24
		TCCR2 = 0;
    1ea6:	e5 e4       	ldi	r30, 0x45	; 69
    1ea8:	f0 e0       	ldi	r31, 0x00	; 0
    1eaa:	10 82       	st	Z, r1
		TCCR2 |= (config_Ptr -> clock);
    1eac:	a5 e4       	ldi	r26, 0x45	; 69
    1eae:	b0 e0       	ldi	r27, 0x00	; 0
    1eb0:	e5 e4       	ldi	r30, 0x45	; 69
    1eb2:	f0 e0       	ldi	r31, 0x00	; 0
    1eb4:	90 81       	ld	r25, Z
    1eb6:	e9 81       	ldd	r30, Y+1	; 0x01
    1eb8:	fa 81       	ldd	r31, Y+2	; 0x02
    1eba:	81 81       	ldd	r24, Z+1	; 0x01
    1ebc:	89 2b       	or	r24, r25
    1ebe:	8c 93       	st	X, r24


	}


}
    1ec0:	0f 90       	pop	r0
    1ec2:	0f 90       	pop	r0
    1ec4:	cf 91       	pop	r28
    1ec6:	df 91       	pop	r29
    1ec8:	08 95       	ret

00001eca <Timer0_setCallBack>:


/*************************************Timer0***********************************/

void Timer0_setCallBack(void(*a_ptr)(void))
{
    1eca:	df 93       	push	r29
    1ecc:	cf 93       	push	r28
    1ece:	00 d0       	rcall	.+0      	; 0x1ed0 <Timer0_setCallBack+0x6>
    1ed0:	cd b7       	in	r28, 0x3d	; 61
    1ed2:	de b7       	in	r29, 0x3e	; 62
    1ed4:	9a 83       	std	Y+2, r25	; 0x02
    1ed6:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_Timer0CallBackPtr = a_ptr;
    1ed8:	89 81       	ldd	r24, Y+1	; 0x01
    1eda:	9a 81       	ldd	r25, Y+2	; 0x02
    1edc:	90 93 7a 00 	sts	0x007A, r25
    1ee0:	80 93 79 00 	sts	0x0079, r24
}
    1ee4:	0f 90       	pop	r0
    1ee6:	0f 90       	pop	r0
    1ee8:	cf 91       	pop	r28
    1eea:	df 91       	pop	r29
    1eec:	08 95       	ret

00001eee <Timer1_setCallBack>:


/*************************************Timer1***********************************/

void Timer1_setCallBack(void(*a_ptr)(void))
{
    1eee:	df 93       	push	r29
    1ef0:	cf 93       	push	r28
    1ef2:	00 d0       	rcall	.+0      	; 0x1ef4 <Timer1_setCallBack+0x6>
    1ef4:	cd b7       	in	r28, 0x3d	; 61
    1ef6:	de b7       	in	r29, 0x3e	; 62
    1ef8:	9a 83       	std	Y+2, r25	; 0x02
    1efa:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_Timer1CallBackPtr = a_ptr;
    1efc:	89 81       	ldd	r24, Y+1	; 0x01
    1efe:	9a 81       	ldd	r25, Y+2	; 0x02
    1f00:	90 93 7c 00 	sts	0x007C, r25
    1f04:	80 93 7b 00 	sts	0x007B, r24
}
    1f08:	0f 90       	pop	r0
    1f0a:	0f 90       	pop	r0
    1f0c:	cf 91       	pop	r28
    1f0e:	df 91       	pop	r29
    1f10:	08 95       	ret

00001f12 <Timer2_setCallBack>:


/*************************************Timer2***********************************/

void Timer2_setCallBack(void(*a_ptr)(void))
{
    1f12:	df 93       	push	r29
    1f14:	cf 93       	push	r28
    1f16:	00 d0       	rcall	.+0      	; 0x1f18 <Timer2_setCallBack+0x6>
    1f18:	cd b7       	in	r28, 0x3d	; 61
    1f1a:	de b7       	in	r29, 0x3e	; 62
    1f1c:	9a 83       	std	Y+2, r25	; 0x02
    1f1e:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_Timer2CallBackPtr = a_ptr;
    1f20:	89 81       	ldd	r24, Y+1	; 0x01
    1f22:	9a 81       	ldd	r25, Y+2	; 0x02
    1f24:	90 93 7e 00 	sts	0x007E, r25
    1f28:	80 93 7d 00 	sts	0x007D, r24
}
    1f2c:	0f 90       	pop	r0
    1f2e:	0f 90       	pop	r0
    1f30:	cf 91       	pop	r28
    1f32:	df 91       	pop	r29
    1f34:	08 95       	ret

00001f36 <Timer_DeInit>:


/********************************************************************************/
void Timer_DeInit(TIMER_ID Timer_ID)
{
    1f36:	df 93       	push	r29
    1f38:	cf 93       	push	r28
    1f3a:	0f 92       	push	r0
    1f3c:	cd b7       	in	r28, 0x3d	; 61
    1f3e:	de b7       	in	r29, 0x3e	; 62
    1f40:	89 83       	std	Y+1, r24	; 0x01
	if (Timer_ID == TIMER0)
    1f42:	89 81       	ldd	r24, Y+1	; 0x01
    1f44:	88 23       	and	r24, r24
    1f46:	e1 f4       	brne	.+56     	; 0x1f80 <Timer_DeInit+0x4a>
	{
		TCCR0 = 0 ;
    1f48:	e3 e5       	ldi	r30, 0x53	; 83
    1f4a:	f0 e0       	ldi	r31, 0x00	; 0
    1f4c:	10 82       	st	Z, r1
		TCNT0 = 0 ;
    1f4e:	e2 e5       	ldi	r30, 0x52	; 82
    1f50:	f0 e0       	ldi	r31, 0x00	; 0
    1f52:	10 82       	st	Z, r1
		OCR0 = 0;
    1f54:	ec e5       	ldi	r30, 0x5C	; 92
    1f56:	f0 e0       	ldi	r31, 0x00	; 0
    1f58:	10 82       	st	Z, r1

		CLEAR_BIT(TIMSK,OCIE0) ;
    1f5a:	a9 e5       	ldi	r26, 0x59	; 89
    1f5c:	b0 e0       	ldi	r27, 0x00	; 0
    1f5e:	e9 e5       	ldi	r30, 0x59	; 89
    1f60:	f0 e0       	ldi	r31, 0x00	; 0
    1f62:	80 81       	ld	r24, Z
    1f64:	8d 7f       	andi	r24, 0xFD	; 253
    1f66:	8c 93       	st	X, r24
		CLEAR_BIT(TIMSK,TOIE0) ;
    1f68:	a9 e5       	ldi	r26, 0x59	; 89
    1f6a:	b0 e0       	ldi	r27, 0x00	; 0
    1f6c:	e9 e5       	ldi	r30, 0x59	; 89
    1f6e:	f0 e0       	ldi	r31, 0x00	; 0
    1f70:	80 81       	ld	r24, Z
    1f72:	8e 7f       	andi	r24, 0xFE	; 254
    1f74:	8c 93       	st	X, r24

		g_Timer0CallBackPtr = NULL_PTR;
    1f76:	10 92 7a 00 	sts	0x007A, r1
    1f7a:	10 92 79 00 	sts	0x0079, r1
    1f7e:	42 c0       	rjmp	.+132    	; 0x2004 <Timer_DeInit+0xce>
	}
	else if (Timer_ID == TIMER1)
    1f80:	89 81       	ldd	r24, Y+1	; 0x01
    1f82:	81 30       	cpi	r24, 0x01	; 1
    1f84:	09 f5       	brne	.+66     	; 0x1fc8 <Timer_DeInit+0x92>
	{
		TCCR1A =0;
    1f86:	ef e4       	ldi	r30, 0x4F	; 79
    1f88:	f0 e0       	ldi	r31, 0x00	; 0
    1f8a:	10 82       	st	Z, r1

		/* disable clock */
		TCCR1B = 0;
    1f8c:	ee e4       	ldi	r30, 0x4E	; 78
    1f8e:	f0 e0       	ldi	r31, 0x00	; 0
    1f90:	10 82       	st	Z, r1

		TCNT1 = 0;
    1f92:	ec e4       	ldi	r30, 0x4C	; 76
    1f94:	f0 e0       	ldi	r31, 0x00	; 0
    1f96:	11 82       	std	Z+1, r1	; 0x01
    1f98:	10 82       	st	Z, r1

		/* disable interrupts for overflow mode */
		CLEAR_BIT(TIMSK, TOIE1);
    1f9a:	a9 e5       	ldi	r26, 0x59	; 89
    1f9c:	b0 e0       	ldi	r27, 0x00	; 0
    1f9e:	e9 e5       	ldi	r30, 0x59	; 89
    1fa0:	f0 e0       	ldi	r31, 0x00	; 0
    1fa2:	80 81       	ld	r24, Z
    1fa4:	8b 7f       	andi	r24, 0xFB	; 251
    1fa6:	8c 93       	st	X, r24

		/* clear compare value for CTC mode */
		OCR1A = 0;
    1fa8:	ea e4       	ldi	r30, 0x4A	; 74
    1faa:	f0 e0       	ldi	r31, 0x00	; 0
    1fac:	11 82       	std	Z+1, r1	; 0x01
    1fae:	10 82       	st	Z, r1

		/* disable interrupts for CTC mode */
		CLEAR_BIT(TIMSK, OCIE1A);
    1fb0:	a9 e5       	ldi	r26, 0x59	; 89
    1fb2:	b0 e0       	ldi	r27, 0x00	; 0
    1fb4:	e9 e5       	ldi	r30, 0x59	; 89
    1fb6:	f0 e0       	ldi	r31, 0x00	; 0
    1fb8:	80 81       	ld	r24, Z
    1fba:	8f 7e       	andi	r24, 0xEF	; 239
    1fbc:	8c 93       	st	X, r24

		g_Timer1CallBackPtr = NULL_PTR;
    1fbe:	10 92 7c 00 	sts	0x007C, r1
    1fc2:	10 92 7b 00 	sts	0x007B, r1
    1fc6:	1e c0       	rjmp	.+60     	; 0x2004 <Timer_DeInit+0xce>
	}
	else if (Timer_ID == TIMER2)
    1fc8:	89 81       	ldd	r24, Y+1	; 0x01
    1fca:	82 30       	cpi	r24, 0x02	; 2
    1fcc:	d9 f4       	brne	.+54     	; 0x2004 <Timer_DeInit+0xce>
	{

		TCCR2 = 0;
    1fce:	e5 e4       	ldi	r30, 0x45	; 69
    1fd0:	f0 e0       	ldi	r31, 0x00	; 0
    1fd2:	10 82       	st	Z, r1
		TCNT2 = 0; /* clear initial value */
    1fd4:	e4 e4       	ldi	r30, 0x44	; 68
    1fd6:	f0 e0       	ldi	r31, 0x00	; 0
    1fd8:	10 82       	st	Z, r1

		OCR2 = 0; /* clear compare value for CTC mode*/
    1fda:	e3 e4       	ldi	r30, 0x43	; 67
    1fdc:	f0 e0       	ldi	r31, 0x00	; 0
    1fde:	10 82       	st	Z, r1

		CLEAR_BIT(TIMSK, OCIE2); /* disable interrupts for CTC mode */
    1fe0:	a9 e5       	ldi	r26, 0x59	; 89
    1fe2:	b0 e0       	ldi	r27, 0x00	; 0
    1fe4:	e9 e5       	ldi	r30, 0x59	; 89
    1fe6:	f0 e0       	ldi	r31, 0x00	; 0
    1fe8:	80 81       	ld	r24, Z
    1fea:	8f 77       	andi	r24, 0x7F	; 127
    1fec:	8c 93       	st	X, r24
		CLEAR_BIT(TIMSK, TOIE2); /* disable interrupts for overflow mode */
    1fee:	a9 e5       	ldi	r26, 0x59	; 89
    1ff0:	b0 e0       	ldi	r27, 0x00	; 0
    1ff2:	e9 e5       	ldi	r30, 0x59	; 89
    1ff4:	f0 e0       	ldi	r31, 0x00	; 0
    1ff6:	80 81       	ld	r24, Z
    1ff8:	8f 7b       	andi	r24, 0xBF	; 191
    1ffa:	8c 93       	st	X, r24

		g_Timer2CallBackPtr = NULL_PTR;
    1ffc:	10 92 7e 00 	sts	0x007E, r1
    2000:	10 92 7d 00 	sts	0x007D, r1
	}

}
    2004:	0f 90       	pop	r0
    2006:	cf 91       	pop	r28
    2008:	df 91       	pop	r29
    200a:	08 95       	ret

0000200c <TWI_init>:

#include "common_macros.h"
#include <avr/io.h>

void TWI_init(TWI_ConfigType* config_Ptr)
{
    200c:	df 93       	push	r29
    200e:	cf 93       	push	r28
    2010:	00 d0       	rcall	.+0      	; 0x2012 <TWI_init+0x6>
    2012:	cd b7       	in	r28, 0x3d	; 61
    2014:	de b7       	in	r29, 0x3e	; 62
    2016:	9a 83       	std	Y+2, r25	; 0x02
    2018:	89 83       	std	Y+1, r24	; 0x01

   /* Set The Bit Rate*/
	TWBR =config_Ptr->BitRate ;
    201a:	a0 e2       	ldi	r26, 0x20	; 32
    201c:	b0 e0       	ldi	r27, 0x00	; 0
    201e:	e9 81       	ldd	r30, Y+1	; 0x01
    2020:	fa 81       	ldd	r31, Y+2	; 0x02
    2022:	81 81       	ldd	r24, Z+1	; 0x01
    2024:	8c 93       	st	X, r24


    /* Clear The Interrupt Flag*/
    SET_BIT(TWCR,TWINT);
    2026:	a6 e5       	ldi	r26, 0x56	; 86
    2028:	b0 e0       	ldi	r27, 0x00	; 0
    202a:	e6 e5       	ldi	r30, 0x56	; 86
    202c:	f0 e0       	ldi	r31, 0x00	; 0
    202e:	80 81       	ld	r24, Z
    2030:	80 68       	ori	r24, 0x80	; 128
    2032:	8c 93       	st	X, r24
    /* Set the Enable bit of TWI(i2c) Module */
    SET_BIT(TWCR,TWEN);
    2034:	a6 e5       	ldi	r26, 0x56	; 86
    2036:	b0 e0       	ldi	r27, 0x00	; 0
    2038:	e6 e5       	ldi	r30, 0x56	; 86
    203a:	f0 e0       	ldi	r31, 0x00	; 0
    203c:	80 81       	ld	r24, Z
    203e:	84 60       	ori	r24, 0x04	; 4
    2040:	8c 93       	st	X, r24



    /*Set the Pre-scaler*/
	TWSR = (TWSR & 0xF8) | (config_Ptr->prescaler);
    2042:	a1 e2       	ldi	r26, 0x21	; 33
    2044:	b0 e0       	ldi	r27, 0x00	; 0
    2046:	e1 e2       	ldi	r30, 0x21	; 33
    2048:	f0 e0       	ldi	r31, 0x00	; 0
    204a:	80 81       	ld	r24, Z
    204c:	98 2f       	mov	r25, r24
    204e:	98 7f       	andi	r25, 0xF8	; 248
    2050:	e9 81       	ldd	r30, Y+1	; 0x01
    2052:	fa 81       	ldd	r31, Y+2	; 0x02
    2054:	80 81       	ld	r24, Z
    2056:	89 2b       	or	r24, r25
    2058:	8c 93       	st	X, r24

	/*Set the Slave Address*/
   TWAR = (config_Ptr->SlaveAddress);
    205a:	a2 e2       	ldi	r26, 0x22	; 34
    205c:	b0 e0       	ldi	r27, 0x00	; 0
    205e:	e9 81       	ldd	r30, Y+1	; 0x01
    2060:	fa 81       	ldd	r31, Y+2	; 0x02
    2062:	82 81       	ldd	r24, Z+2	; 0x02
    2064:	8c 93       	st	X, r24
	
}
    2066:	0f 90       	pop	r0
    2068:	0f 90       	pop	r0
    206a:	cf 91       	pop	r28
    206c:	df 91       	pop	r29
    206e:	08 95       	ret

00002070 <TWI_start>:

void TWI_start(void)
{
    2070:	df 93       	push	r29
    2072:	cf 93       	push	r28
    2074:	cd b7       	in	r28, 0x3d	; 61
    2076:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    2078:	e6 e5       	ldi	r30, 0x56	; 86
    207a:	f0 e0       	ldi	r31, 0x00	; 0
    207c:	84 ea       	ldi	r24, 0xA4	; 164
    207e:	80 83       	st	Z, r24
    
    /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    2080:	e6 e5       	ldi	r30, 0x56	; 86
    2082:	f0 e0       	ldi	r31, 0x00	; 0
    2084:	80 81       	ld	r24, Z
    2086:	88 23       	and	r24, r24
    2088:	dc f7       	brge	.-10     	; 0x2080 <TWI_start+0x10>
}
    208a:	cf 91       	pop	r28
    208c:	df 91       	pop	r29
    208e:	08 95       	ret

00002090 <TWI_stop>:

void TWI_stop(void)
{
    2090:	df 93       	push	r29
    2092:	cf 93       	push	r28
    2094:	cd b7       	in	r28, 0x3d	; 61
    2096:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    2098:	e6 e5       	ldi	r30, 0x56	; 86
    209a:	f0 e0       	ldi	r31, 0x00	; 0
    209c:	84 e9       	ldi	r24, 0x94	; 148
    209e:	80 83       	st	Z, r24
}
    20a0:	cf 91       	pop	r28
    20a2:	df 91       	pop	r29
    20a4:	08 95       	ret

000020a6 <TWI_writeByte>:

void TWI_writeByte(uint8 data)
{
    20a6:	df 93       	push	r29
    20a8:	cf 93       	push	r28
    20aa:	0f 92       	push	r0
    20ac:	cd b7       	in	r28, 0x3d	; 61
    20ae:	de b7       	in	r29, 0x3e	; 62
    20b0:	89 83       	std	Y+1, r24	; 0x01
    /* Put data On TWI data Register */
    TWDR = data;
    20b2:	e3 e2       	ldi	r30, 0x23	; 35
    20b4:	f0 e0       	ldi	r31, 0x00	; 0
    20b6:	89 81       	ldd	r24, Y+1	; 0x01
    20b8:	80 83       	st	Z, r24
    /* 
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN);
    20ba:	e6 e5       	ldi	r30, 0x56	; 86
    20bc:	f0 e0       	ldi	r31, 0x00	; 0
    20be:	84 e8       	ldi	r24, 0x84	; 132
    20c0:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register(data is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    20c2:	e6 e5       	ldi	r30, 0x56	; 86
    20c4:	f0 e0       	ldi	r31, 0x00	; 0
    20c6:	80 81       	ld	r24, Z
    20c8:	88 23       	and	r24, r24
    20ca:	dc f7       	brge	.-10     	; 0x20c2 <TWI_writeByte+0x1c>
}
    20cc:	0f 90       	pop	r0
    20ce:	cf 91       	pop	r28
    20d0:	df 91       	pop	r29
    20d2:	08 95       	ret

000020d4 <TWI_readByteWithACK>:

uint8 TWI_readByteWithACK(void)
{
    20d4:	df 93       	push	r29
    20d6:	cf 93       	push	r28
    20d8:	cd b7       	in	r28, 0x3d	; 61
    20da:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    20dc:	e6 e5       	ldi	r30, 0x56	; 86
    20de:	f0 e0       	ldi	r31, 0x00	; 0
    20e0:	84 ec       	ldi	r24, 0xC4	; 196
    20e2:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    20e4:	e6 e5       	ldi	r30, 0x56	; 86
    20e6:	f0 e0       	ldi	r31, 0x00	; 0
    20e8:	80 81       	ld	r24, Z
    20ea:	88 23       	and	r24, r24
    20ec:	dc f7       	brge	.-10     	; 0x20e4 <TWI_readByteWithACK+0x10>
    /* Read Data */
    return TWDR;
    20ee:	e3 e2       	ldi	r30, 0x23	; 35
    20f0:	f0 e0       	ldi	r31, 0x00	; 0
    20f2:	80 81       	ld	r24, Z
}
    20f4:	cf 91       	pop	r28
    20f6:	df 91       	pop	r29
    20f8:	08 95       	ret

000020fa <TWI_readByteWithNACK>:

uint8 TWI_readByteWithNACK(void)
{
    20fa:	df 93       	push	r29
    20fc:	cf 93       	push	r28
    20fe:	cd b7       	in	r28, 0x3d	; 61
    2100:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
    2102:	e6 e5       	ldi	r30, 0x56	; 86
    2104:	f0 e0       	ldi	r31, 0x00	; 0
    2106:	84 e8       	ldi	r24, 0x84	; 132
    2108:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    210a:	e6 e5       	ldi	r30, 0x56	; 86
    210c:	f0 e0       	ldi	r31, 0x00	; 0
    210e:	80 81       	ld	r24, Z
    2110:	88 23       	and	r24, r24
    2112:	dc f7       	brge	.-10     	; 0x210a <TWI_readByteWithNACK+0x10>
    /* Read Data */
    return TWDR;
    2114:	e3 e2       	ldi	r30, 0x23	; 35
    2116:	f0 e0       	ldi	r31, 0x00	; 0
    2118:	80 81       	ld	r24, Z
}
    211a:	cf 91       	pop	r28
    211c:	df 91       	pop	r29
    211e:	08 95       	ret

00002120 <TWI_getStatus>:

uint8 TWI_getStatus(void)
{
    2120:	df 93       	push	r29
    2122:	cf 93       	push	r28
    2124:	0f 92       	push	r0
    2126:	cd b7       	in	r28, 0x3d	; 61
    2128:	de b7       	in	r29, 0x3e	; 62
    uint8 status;
    /* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
    status = TWSR & 0xF8;
    212a:	e1 e2       	ldi	r30, 0x21	; 33
    212c:	f0 e0       	ldi	r31, 0x00	; 0
    212e:	80 81       	ld	r24, Z
    2130:	88 7f       	andi	r24, 0xF8	; 248
    2132:	89 83       	std	Y+1, r24	; 0x01
    return status;
    2134:	89 81       	ldd	r24, Y+1	; 0x01
}
    2136:	0f 90       	pop	r0
    2138:	cf 91       	pop	r28
    213a:	df 91       	pop	r29
    213c:	08 95       	ret

0000213e <UART_init>:
 *******************************************************************************/



void UART_init(uint32 baud_rate, UART_ConfigType * config_Ptr)
{
    213e:	df 93       	push	r29
    2140:	cf 93       	push	r28
    2142:	cd b7       	in	r28, 0x3d	; 61
    2144:	de b7       	in	r29, 0x3e	; 62
    2146:	28 97       	sbiw	r28, 0x08	; 8
    2148:	0f b6       	in	r0, 0x3f	; 63
    214a:	f8 94       	cli
    214c:	de bf       	out	0x3e, r29	; 62
    214e:	0f be       	out	0x3f, r0	; 63
    2150:	cd bf       	out	0x3d, r28	; 61
    2152:	6b 83       	std	Y+3, r22	; 0x03
    2154:	7c 83       	std	Y+4, r23	; 0x04
    2156:	8d 83       	std	Y+5, r24	; 0x05
    2158:	9e 83       	std	Y+6, r25	; 0x06
    215a:	58 87       	std	Y+8, r21	; 0x08
    215c:	4f 83       	std	Y+7, r20	; 0x07

	uint16 ubrr_value = 0 ;
    215e:	1a 82       	std	Y+2, r1	; 0x02
    2160:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
 	SET_BIT(UCSRA,U2X);
    2162:	ab e2       	ldi	r26, 0x2B	; 43
    2164:	b0 e0       	ldi	r27, 0x00	; 0
    2166:	eb e2       	ldi	r30, 0x2B	; 43
    2168:	f0 e0       	ldi	r31, 0x00	; 0
    216a:	80 81       	ld	r24, Z
    216c:	82 60       	ori	r24, 0x02	; 2
    216e:	8c 93       	st	X, r24

	SET_BIT(UCSRB,TXEN);
    2170:	aa e2       	ldi	r26, 0x2A	; 42
    2172:	b0 e0       	ldi	r27, 0x00	; 0
    2174:	ea e2       	ldi	r30, 0x2A	; 42
    2176:	f0 e0       	ldi	r31, 0x00	; 0
    2178:	80 81       	ld	r24, Z
    217a:	88 60       	ori	r24, 0x08	; 8
    217c:	8c 93       	st	X, r24
	SET_BIT(UCSRB,RXEN);
    217e:	aa e2       	ldi	r26, 0x2A	; 42
    2180:	b0 e0       	ldi	r27, 0x00	; 0
    2182:	ea e2       	ldi	r30, 0x2A	; 42
    2184:	f0 e0       	ldi	r31, 0x00	; 0
    2186:	80 81       	ld	r24, Z
    2188:	80 61       	ori	r24, 0x10	; 16
    218a:	8c 93       	st	X, r24

	UCSRC = (UCSRC & 0xF9) | ((config_Ptr->DATA_BIT_NUM) <<  UCSZ0);
    218c:	a0 e4       	ldi	r26, 0x40	; 64
    218e:	b0 e0       	ldi	r27, 0x00	; 0
    2190:	e0 e4       	ldi	r30, 0x40	; 64
    2192:	f0 e0       	ldi	r31, 0x00	; 0
    2194:	80 81       	ld	r24, Z
    2196:	28 2f       	mov	r18, r24
    2198:	29 7f       	andi	r18, 0xF9	; 249
    219a:	ef 81       	ldd	r30, Y+7	; 0x07
    219c:	f8 85       	ldd	r31, Y+8	; 0x08
    219e:	81 81       	ldd	r24, Z+1	; 0x01
    21a0:	88 2f       	mov	r24, r24
    21a2:	90 e0       	ldi	r25, 0x00	; 0
    21a4:	88 0f       	add	r24, r24
    21a6:	99 1f       	adc	r25, r25
    21a8:	82 2b       	or	r24, r18
    21aa:	8c 93       	st	X, r24


	UCSRC = (UCSRC & 0xCF) | ((config_Ptr->parity) <<  UPM0);
    21ac:	a0 e4       	ldi	r26, 0x40	; 64
    21ae:	b0 e0       	ldi	r27, 0x00	; 0
    21b0:	e0 e4       	ldi	r30, 0x40	; 64
    21b2:	f0 e0       	ldi	r31, 0x00	; 0
    21b4:	80 81       	ld	r24, Z
    21b6:	28 2f       	mov	r18, r24
    21b8:	2f 7c       	andi	r18, 0xCF	; 207
    21ba:	ef 81       	ldd	r30, Y+7	; 0x07
    21bc:	f8 85       	ldd	r31, Y+8	; 0x08
    21be:	80 81       	ld	r24, Z
    21c0:	88 2f       	mov	r24, r24
    21c2:	90 e0       	ldi	r25, 0x00	; 0
    21c4:	82 95       	swap	r24
    21c6:	92 95       	swap	r25
    21c8:	90 7f       	andi	r25, 0xF0	; 240
    21ca:	98 27       	eor	r25, r24
    21cc:	80 7f       	andi	r24, 0xF0	; 240
    21ce:	98 27       	eor	r25, r24
    21d0:	82 2b       	or	r24, r18
    21d2:	8c 93       	st	X, r24


	UCSRC = (UCSRC & 0xF7) | ((config_Ptr->STOP_BIT) <<  USBS);
    21d4:	a0 e4       	ldi	r26, 0x40	; 64
    21d6:	b0 e0       	ldi	r27, 0x00	; 0
    21d8:	e0 e4       	ldi	r30, 0x40	; 64
    21da:	f0 e0       	ldi	r31, 0x00	; 0
    21dc:	80 81       	ld	r24, Z
    21de:	28 2f       	mov	r18, r24
    21e0:	27 7f       	andi	r18, 0xF7	; 247
    21e2:	ef 81       	ldd	r30, Y+7	; 0x07
    21e4:	f8 85       	ldd	r31, Y+8	; 0x08
    21e6:	82 81       	ldd	r24, Z+2	; 0x02
    21e8:	88 2f       	mov	r24, r24
    21ea:	90 e0       	ldi	r25, 0x00	; 0
    21ec:	88 0f       	add	r24, r24
    21ee:	99 1f       	adc	r25, r25
    21f0:	88 0f       	add	r24, r24
    21f2:	99 1f       	adc	r25, r25
    21f4:	88 0f       	add	r24, r24
    21f6:	99 1f       	adc	r25, r25
    21f8:	82 2b       	or	r24, r18
    21fa:	8c 93       	st	X, r24




	ubrr_value = (uint16)(  ( (F_CPU / ((baud_rate) * 8UL) )  )- 1);
    21fc:	8b 81       	ldd	r24, Y+3	; 0x03
    21fe:	9c 81       	ldd	r25, Y+4	; 0x04
    2200:	ad 81       	ldd	r26, Y+5	; 0x05
    2202:	be 81       	ldd	r27, Y+6	; 0x06
    2204:	88 0f       	add	r24, r24
    2206:	99 1f       	adc	r25, r25
    2208:	aa 1f       	adc	r26, r26
    220a:	bb 1f       	adc	r27, r27
    220c:	88 0f       	add	r24, r24
    220e:	99 1f       	adc	r25, r25
    2210:	aa 1f       	adc	r26, r26
    2212:	bb 1f       	adc	r27, r27
    2214:	88 0f       	add	r24, r24
    2216:	99 1f       	adc	r25, r25
    2218:	aa 1f       	adc	r26, r26
    221a:	bb 1f       	adc	r27, r27
    221c:	9c 01       	movw	r18, r24
    221e:	ad 01       	movw	r20, r26
    2220:	80 e4       	ldi	r24, 0x40	; 64
    2222:	92 e4       	ldi	r25, 0x42	; 66
    2224:	af e0       	ldi	r26, 0x0F	; 15
    2226:	b0 e0       	ldi	r27, 0x00	; 0
    2228:	bc 01       	movw	r22, r24
    222a:	cd 01       	movw	r24, r26
    222c:	0e 94 c3 11 	call	0x2386	; 0x2386 <__udivmodsi4>
    2230:	da 01       	movw	r26, r20
    2232:	c9 01       	movw	r24, r18
    2234:	01 97       	sbiw	r24, 0x01	; 1
    2236:	9a 83       	std	Y+2, r25	; 0x02
    2238:	89 83       	std	Y+1, r24	; 0x01

	UBRRH = ubrr_value>>8;
    223a:	e0 e4       	ldi	r30, 0x40	; 64
    223c:	f0 e0       	ldi	r31, 0x00	; 0
    223e:	89 81       	ldd	r24, Y+1	; 0x01
    2240:	9a 81       	ldd	r25, Y+2	; 0x02
    2242:	89 2f       	mov	r24, r25
    2244:	99 27       	eor	r25, r25
    2246:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    2248:	e9 e2       	ldi	r30, 0x29	; 41
    224a:	f0 e0       	ldi	r31, 0x00	; 0
    224c:	89 81       	ldd	r24, Y+1	; 0x01
    224e:	80 83       	st	Z, r24
}
    2250:	28 96       	adiw	r28, 0x08	; 8
    2252:	0f b6       	in	r0, 0x3f	; 63
    2254:	f8 94       	cli
    2256:	de bf       	out	0x3e, r29	; 62
    2258:	0f be       	out	0x3f, r0	; 63
    225a:	cd bf       	out	0x3d, r28	; 61
    225c:	cf 91       	pop	r28
    225e:	df 91       	pop	r29
    2260:	08 95       	ret

00002262 <UART_sendByte>:



void UART_sendByte(const uint8 data)
{
    2262:	df 93       	push	r29
    2264:	cf 93       	push	r28
    2266:	0f 92       	push	r0
    2268:	cd b7       	in	r28, 0x3d	; 61
    226a:	de b7       	in	r29, 0x3e	; 62
    226c:	89 83       	std	Y+1, r24	; 0x01
	while(BIT_IS_CLEAR(UCSRA , UDRE)){}
    226e:	eb e2       	ldi	r30, 0x2B	; 43
    2270:	f0 e0       	ldi	r31, 0x00	; 0
    2272:	80 81       	ld	r24, Z
    2274:	88 2f       	mov	r24, r24
    2276:	90 e0       	ldi	r25, 0x00	; 0
    2278:	80 72       	andi	r24, 0x20	; 32
    227a:	90 70       	andi	r25, 0x00	; 0
    227c:	00 97       	sbiw	r24, 0x00	; 0
    227e:	b9 f3       	breq	.-18     	; 0x226e <UART_sendByte+0xc>
	UDR = data;
    2280:	ec e2       	ldi	r30, 0x2C	; 44
    2282:	f0 e0       	ldi	r31, 0x00	; 0
    2284:	89 81       	ldd	r24, Y+1	; 0x01
    2286:	80 83       	st	Z, r24
}
    2288:	0f 90       	pop	r0
    228a:	cf 91       	pop	r28
    228c:	df 91       	pop	r29
    228e:	08 95       	ret

00002290 <UART_reciveByte>:

uint8 UART_reciveByte(void)
{
    2290:	df 93       	push	r29
    2292:	cf 93       	push	r28
    2294:	cd b7       	in	r28, 0x3d	; 61
    2296:	de b7       	in	r29, 0x3e	; 62
	while(BIT_IS_CLEAR(UCSRA , RXC)){}
    2298:	eb e2       	ldi	r30, 0x2B	; 43
    229a:	f0 e0       	ldi	r31, 0x00	; 0
    229c:	80 81       	ld	r24, Z
    229e:	88 23       	and	r24, r24
    22a0:	dc f7       	brge	.-10     	; 0x2298 <UART_reciveByte+0x8>
	return UDR;
    22a2:	ec e2       	ldi	r30, 0x2C	; 44
    22a4:	f0 e0       	ldi	r31, 0x00	; 0
    22a6:	80 81       	ld	r24, Z
}
    22a8:	cf 91       	pop	r28
    22aa:	df 91       	pop	r29
    22ac:	08 95       	ret

000022ae <UART_sendString>:



void UART_sendString(const uint8 *Str)
{
    22ae:	df 93       	push	r29
    22b0:	cf 93       	push	r28
    22b2:	00 d0       	rcall	.+0      	; 0x22b4 <UART_sendString+0x6>
    22b4:	0f 92       	push	r0
    22b6:	cd b7       	in	r28, 0x3d	; 61
    22b8:	de b7       	in	r29, 0x3e	; 62
    22ba:	9b 83       	std	Y+3, r25	; 0x03
    22bc:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    22be:	19 82       	std	Y+1, r1	; 0x01
    22c0:	0e c0       	rjmp	.+28     	; 0x22de <UART_sendString+0x30>

	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    22c2:	89 81       	ldd	r24, Y+1	; 0x01
    22c4:	28 2f       	mov	r18, r24
    22c6:	30 e0       	ldi	r19, 0x00	; 0
    22c8:	8a 81       	ldd	r24, Y+2	; 0x02
    22ca:	9b 81       	ldd	r25, Y+3	; 0x03
    22cc:	fc 01       	movw	r30, r24
    22ce:	e2 0f       	add	r30, r18
    22d0:	f3 1f       	adc	r31, r19
    22d2:	80 81       	ld	r24, Z
    22d4:	0e 94 31 11 	call	0x2262	; 0x2262 <UART_sendByte>
		i++;
    22d8:	89 81       	ldd	r24, Y+1	; 0x01
    22da:	8f 5f       	subi	r24, 0xFF	; 255
    22dc:	89 83       	std	Y+1, r24	; 0x01

void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	while(Str[i] != '\0')
    22de:	89 81       	ldd	r24, Y+1	; 0x01
    22e0:	28 2f       	mov	r18, r24
    22e2:	30 e0       	ldi	r19, 0x00	; 0
    22e4:	8a 81       	ldd	r24, Y+2	; 0x02
    22e6:	9b 81       	ldd	r25, Y+3	; 0x03
    22e8:	fc 01       	movw	r30, r24
    22ea:	e2 0f       	add	r30, r18
    22ec:	f3 1f       	adc	r31, r19
    22ee:	80 81       	ld	r24, Z
    22f0:	88 23       	and	r24, r24
    22f2:	39 f7       	brne	.-50     	; 0x22c2 <UART_sendString+0x14>
	{
		UART_sendByte(Str[i]);
		i++;
	}
}
    22f4:	0f 90       	pop	r0
    22f6:	0f 90       	pop	r0
    22f8:	0f 90       	pop	r0
    22fa:	cf 91       	pop	r28
    22fc:	df 91       	pop	r29
    22fe:	08 95       	ret

00002300 <UART_receiveString>:

void UART_receiveString(uint8 *Str)
{
    2300:	0f 93       	push	r16
    2302:	1f 93       	push	r17
    2304:	df 93       	push	r29
    2306:	cf 93       	push	r28
    2308:	00 d0       	rcall	.+0      	; 0x230a <UART_receiveString+0xa>
    230a:	0f 92       	push	r0
    230c:	cd b7       	in	r28, 0x3d	; 61
    230e:	de b7       	in	r29, 0x3e	; 62
    2310:	9b 83       	std	Y+3, r25	; 0x03
    2312:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0 ;
    2314:	19 82       	std	Y+1, r1	; 0x01

	Str[i] = UART_reciveByte();
    2316:	89 81       	ldd	r24, Y+1	; 0x01
    2318:	28 2f       	mov	r18, r24
    231a:	30 e0       	ldi	r19, 0x00	; 0
    231c:	8a 81       	ldd	r24, Y+2	; 0x02
    231e:	9b 81       	ldd	r25, Y+3	; 0x03
    2320:	8c 01       	movw	r16, r24
    2322:	02 0f       	add	r16, r18
    2324:	13 1f       	adc	r17, r19
    2326:	0e 94 48 11 	call	0x2290	; 0x2290 <UART_reciveByte>
    232a:	f8 01       	movw	r30, r16
    232c:	80 83       	st	Z, r24
    232e:	0f c0       	rjmp	.+30     	; 0x234e <UART_receiveString+0x4e>

	while (Str[i] != '#')
	{
		i++;
    2330:	89 81       	ldd	r24, Y+1	; 0x01
    2332:	8f 5f       	subi	r24, 0xFF	; 255
    2334:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_reciveByte();
    2336:	89 81       	ldd	r24, Y+1	; 0x01
    2338:	28 2f       	mov	r18, r24
    233a:	30 e0       	ldi	r19, 0x00	; 0
    233c:	8a 81       	ldd	r24, Y+2	; 0x02
    233e:	9b 81       	ldd	r25, Y+3	; 0x03
    2340:	8c 01       	movw	r16, r24
    2342:	02 0f       	add	r16, r18
    2344:	13 1f       	adc	r17, r19
    2346:	0e 94 48 11 	call	0x2290	; 0x2290 <UART_reciveByte>
    234a:	f8 01       	movw	r30, r16
    234c:	80 83       	st	Z, r24
{
	uint8 i = 0 ;

	Str[i] = UART_reciveByte();

	while (Str[i] != '#')
    234e:	89 81       	ldd	r24, Y+1	; 0x01
    2350:	28 2f       	mov	r18, r24
    2352:	30 e0       	ldi	r19, 0x00	; 0
    2354:	8a 81       	ldd	r24, Y+2	; 0x02
    2356:	9b 81       	ldd	r25, Y+3	; 0x03
    2358:	fc 01       	movw	r30, r24
    235a:	e2 0f       	add	r30, r18
    235c:	f3 1f       	adc	r31, r19
    235e:	80 81       	ld	r24, Z
    2360:	83 32       	cpi	r24, 0x23	; 35
    2362:	31 f7       	brne	.-52     	; 0x2330 <UART_receiveString+0x30>
	{
		i++;
		Str[i] = UART_reciveByte();

	}
	Str[i] = '\0';
    2364:	89 81       	ldd	r24, Y+1	; 0x01
    2366:	28 2f       	mov	r18, r24
    2368:	30 e0       	ldi	r19, 0x00	; 0
    236a:	8a 81       	ldd	r24, Y+2	; 0x02
    236c:	9b 81       	ldd	r25, Y+3	; 0x03
    236e:	fc 01       	movw	r30, r24
    2370:	e2 0f       	add	r30, r18
    2372:	f3 1f       	adc	r31, r19
    2374:	10 82       	st	Z, r1

}
    2376:	0f 90       	pop	r0
    2378:	0f 90       	pop	r0
    237a:	0f 90       	pop	r0
    237c:	cf 91       	pop	r28
    237e:	df 91       	pop	r29
    2380:	1f 91       	pop	r17
    2382:	0f 91       	pop	r16
    2384:	08 95       	ret

00002386 <__udivmodsi4>:
    2386:	a1 e2       	ldi	r26, 0x21	; 33
    2388:	1a 2e       	mov	r1, r26
    238a:	aa 1b       	sub	r26, r26
    238c:	bb 1b       	sub	r27, r27
    238e:	fd 01       	movw	r30, r26
    2390:	0d c0       	rjmp	.+26     	; 0x23ac <__udivmodsi4_ep>

00002392 <__udivmodsi4_loop>:
    2392:	aa 1f       	adc	r26, r26
    2394:	bb 1f       	adc	r27, r27
    2396:	ee 1f       	adc	r30, r30
    2398:	ff 1f       	adc	r31, r31
    239a:	a2 17       	cp	r26, r18
    239c:	b3 07       	cpc	r27, r19
    239e:	e4 07       	cpc	r30, r20
    23a0:	f5 07       	cpc	r31, r21
    23a2:	20 f0       	brcs	.+8      	; 0x23ac <__udivmodsi4_ep>
    23a4:	a2 1b       	sub	r26, r18
    23a6:	b3 0b       	sbc	r27, r19
    23a8:	e4 0b       	sbc	r30, r20
    23aa:	f5 0b       	sbc	r31, r21

000023ac <__udivmodsi4_ep>:
    23ac:	66 1f       	adc	r22, r22
    23ae:	77 1f       	adc	r23, r23
    23b0:	88 1f       	adc	r24, r24
    23b2:	99 1f       	adc	r25, r25
    23b4:	1a 94       	dec	r1
    23b6:	69 f7       	brne	.-38     	; 0x2392 <__udivmodsi4_loop>
    23b8:	60 95       	com	r22
    23ba:	70 95       	com	r23
    23bc:	80 95       	com	r24
    23be:	90 95       	com	r25
    23c0:	9b 01       	movw	r18, r22
    23c2:	ac 01       	movw	r20, r24
    23c4:	bd 01       	movw	r22, r26
    23c6:	cf 01       	movw	r24, r30
    23c8:	08 95       	ret

000023ca <__prologue_saves__>:
    23ca:	2f 92       	push	r2
    23cc:	3f 92       	push	r3
    23ce:	4f 92       	push	r4
    23d0:	5f 92       	push	r5
    23d2:	6f 92       	push	r6
    23d4:	7f 92       	push	r7
    23d6:	8f 92       	push	r8
    23d8:	9f 92       	push	r9
    23da:	af 92       	push	r10
    23dc:	bf 92       	push	r11
    23de:	cf 92       	push	r12
    23e0:	df 92       	push	r13
    23e2:	ef 92       	push	r14
    23e4:	ff 92       	push	r15
    23e6:	0f 93       	push	r16
    23e8:	1f 93       	push	r17
    23ea:	cf 93       	push	r28
    23ec:	df 93       	push	r29
    23ee:	cd b7       	in	r28, 0x3d	; 61
    23f0:	de b7       	in	r29, 0x3e	; 62
    23f2:	ca 1b       	sub	r28, r26
    23f4:	db 0b       	sbc	r29, r27
    23f6:	0f b6       	in	r0, 0x3f	; 63
    23f8:	f8 94       	cli
    23fa:	de bf       	out	0x3e, r29	; 62
    23fc:	0f be       	out	0x3f, r0	; 63
    23fe:	cd bf       	out	0x3d, r28	; 61
    2400:	09 94       	ijmp

00002402 <__epilogue_restores__>:
    2402:	2a 88       	ldd	r2, Y+18	; 0x12
    2404:	39 88       	ldd	r3, Y+17	; 0x11
    2406:	48 88       	ldd	r4, Y+16	; 0x10
    2408:	5f 84       	ldd	r5, Y+15	; 0x0f
    240a:	6e 84       	ldd	r6, Y+14	; 0x0e
    240c:	7d 84       	ldd	r7, Y+13	; 0x0d
    240e:	8c 84       	ldd	r8, Y+12	; 0x0c
    2410:	9b 84       	ldd	r9, Y+11	; 0x0b
    2412:	aa 84       	ldd	r10, Y+10	; 0x0a
    2414:	b9 84       	ldd	r11, Y+9	; 0x09
    2416:	c8 84       	ldd	r12, Y+8	; 0x08
    2418:	df 80       	ldd	r13, Y+7	; 0x07
    241a:	ee 80       	ldd	r14, Y+6	; 0x06
    241c:	fd 80       	ldd	r15, Y+5	; 0x05
    241e:	0c 81       	ldd	r16, Y+4	; 0x04
    2420:	1b 81       	ldd	r17, Y+3	; 0x03
    2422:	aa 81       	ldd	r26, Y+2	; 0x02
    2424:	b9 81       	ldd	r27, Y+1	; 0x01
    2426:	ce 0f       	add	r28, r30
    2428:	d1 1d       	adc	r29, r1
    242a:	0f b6       	in	r0, 0x3f	; 63
    242c:	f8 94       	cli
    242e:	de bf       	out	0x3e, r29	; 62
    2430:	0f be       	out	0x3f, r0	; 63
    2432:	cd bf       	out	0x3d, r28	; 61
    2434:	ed 01       	movw	r28, r26
    2436:	08 95       	ret

00002438 <_exit>:
    2438:	f8 94       	cli

0000243a <__stop_program>:
    243a:	ff cf       	rjmp	.-2      	; 0x243a <__stop_program>
