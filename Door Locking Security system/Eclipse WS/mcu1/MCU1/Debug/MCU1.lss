
MCU1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000318c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000d0  00800060  0000318c  00003220  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000e  00800130  00800130  000032f0  2**0
                  ALLOC
  3 .stab         00002d3c  00000000  00000000  000032f0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000121f  00000000  00000000  0000602c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000724b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000738b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  000074fb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00009144  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000a02f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000addc  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000af3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000b1c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000b997  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 ed 14 	jmp	0x29da	; 0x29da <__vector_3>
      10:	0c 94 ba 14 	jmp	0x2974	; 0x2974 <__vector_4>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 87 14 	jmp	0x290e	; 0x290e <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 54 14 	jmp	0x28a8	; 0x28a8 <__vector_8>
      24:	0c 94 ee 13 	jmp	0x27dc	; 0x27dc <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 21 14 	jmp	0x2842	; 0x2842 <__vector_19>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e8       	ldi	r30, 0x8C	; 140
      68:	f1 e3       	ldi	r31, 0x31	; 49
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 33       	cpi	r26, 0x30	; 48
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a0 e3       	ldi	r26, 0x30	; 48
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ae 33       	cpi	r26, 0x3E	; 62
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 29 08 	call	0x1052	; 0x1052 <main>
      8a:	0c 94 c4 18 	jmp	0x3188	; 0x3188 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 48 18 	jmp	0x3090	; 0x3090 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	aa e1       	ldi	r26, 0x1A	; 26
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 64 18 	jmp	0x30c8	; 0x30c8 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 54 18 	jmp	0x30a8	; 0x30a8 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 70 18 	jmp	0x30e0	; 0x30e0 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 54 18 	jmp	0x30a8	; 0x30a8 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 70 18 	jmp	0x30e0	; 0x30e0 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 48 18 	jmp	0x3090	; 0x3090 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	8a e1       	ldi	r24, 0x1A	; 26
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 64 18 	jmp	0x30c8	; 0x30c8 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 54 18 	jmp	0x30a8	; 0x30a8 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 70 18 	jmp	0x30e0	; 0x30e0 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 54 18 	jmp	0x30a8	; 0x30a8 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 70 18 	jmp	0x30e0	; 0x30e0 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 54 18 	jmp	0x30a8	; 0x30a8 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 70 18 	jmp	0x30e0	; 0x30e0 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 58 18 	jmp	0x30b0	; 0x30b0 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 74 18 	jmp	0x30e8	; 0x30e8 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <PASSCODE_Init>:
 *******************************************************************************/



void PASSCODE_Init (void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	2e 97       	sbiw	r28, 0x0e	; 14
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61
     b5a:	ba c0       	rjmp	.+372    	; 0xcd0 <PASSCODE_Init+0x18a>
	while (g_matchStatus == PASSCODE_NOT_MATCH)
	{
		LCD_clearScreen ();
     b5c:	0e 94 e4 13 	call	0x27c8	; 0x27c8 <LCD_clearScreen>
		LCD_displayString ("Enter New CODE");
     b60:	80 e6       	ldi	r24, 0x60	; 96
     b62:	90 e0       	ldi	r25, 0x00	; 0
     b64:	0e 94 3d 13 	call	0x267a	; 0x267a <LCD_displayString>
		LCD_moveCursor(1,0);
     b68:	81 e0       	ldi	r24, 0x01	; 1
     b6a:	60 e0       	ldi	r22, 0x00	; 0
     b6c:	0e 94 66 13 	call	0x26cc	; 0x26cc <LCD_moveCursor>

		/* Ask user to get the passcode */
		getPASSCODE(g_passcode);
     b70:	89 e3       	ldi	r24, 0x39	; 57
     b72:	91 e0       	ldi	r25, 0x01	; 1
     b74:	0e 94 78 06 	call	0xcf0	; 0xcf0 <getPASSCODE>


		UART_sendByte(MC_READY_SEND);
     b78:	85 e1       	ldi	r24, 0x15	; 21
     b7a:	0e 94 94 17 	call	0x2f28	; 0x2f28 <UART_sendByte>

		/* wait for a response */
		while (UART_reciveByte() != MC_READY_RECIVE);
     b7e:	0e 94 ab 17 	call	0x2f56	; 0x2f56 <UART_reciveByte>
     b82:	86 31       	cpi	r24, 0x16	; 22
     b84:	e1 f7       	brne	.-8      	; 0xb7e <PASSCODE_Init+0x38>

		sendPasscodeByUART(g_passcode);
     b86:	89 e3       	ldi	r24, 0x39	; 57
     b88:	91 e0       	ldi	r25, 0x01	; 1
     b8a:	0e 94 3b 07 	call	0xe76	; 0xe76 <sendPasscodeByUART>

		/* confirm password Entered by user */
		LCD_clearScreen();
     b8e:	0e 94 e4 13 	call	0x27c8	; 0x27c8 <LCD_clearScreen>
		LCD_displayStringRowColumn(0, 0, "Re-Enter CODE:");
     b92:	2f e6       	ldi	r18, 0x6F	; 111
     b94:	30 e0       	ldi	r19, 0x00	; 0
     b96:	80 e0       	ldi	r24, 0x00	; 0
     b98:	60 e0       	ldi	r22, 0x00	; 0
     b9a:	a9 01       	movw	r20, r18
     b9c:	0e 94 a8 13 	call	0x2750	; 0x2750 <LCD_displayStringRowColumn>
		LCD_moveCursor(1,0);
     ba0:	81 e0       	ldi	r24, 0x01	; 1
     ba2:	60 e0       	ldi	r22, 0x00	; 0
     ba4:	0e 94 66 13 	call	0x26cc	; 0x26cc <LCD_moveCursor>

		getPASSCODE(g_passcode);
     ba8:	89 e3       	ldi	r24, 0x39	; 57
     baa:	91 e0       	ldi	r25, 0x01	; 1
     bac:	0e 94 78 06 	call	0xcf0	; 0xcf0 <getPASSCODE>
		UART_sendByte(MC_READY_SEND);
     bb0:	85 e1       	ldi	r24, 0x15	; 21
     bb2:	0e 94 94 17 	call	0x2f28	; 0x2f28 <UART_sendByte>

		while (UART_reciveByte() != MC_READY_RECIVE);
     bb6:	0e 94 ab 17 	call	0x2f56	; 0x2f56 <UART_reciveByte>
     bba:	86 31       	cpi	r24, 0x16	; 22
     bbc:	e1 f7       	brne	.-8      	; 0xbb6 <PASSCODE_Init+0x70>
		sendPasscodeByUART(g_passcode);
     bbe:	89 e3       	ldi	r24, 0x39	; 57
     bc0:	91 e0       	ldi	r25, 0x01	; 1
     bc2:	0e 94 3b 07 	call	0xe76	; 0xe76 <sendPasscodeByUART>

		/* wait for a response from Control ECU about passwords matching */
		while (UART_reciveByte() != MC_READY_SEND);
     bc6:	0e 94 ab 17 	call	0x2f56	; 0x2f56 <UART_reciveByte>
     bca:	85 31       	cpi	r24, 0x15	; 21
     bcc:	e1 f7       	brne	.-8      	; 0xbc6 <PASSCODE_Init+0x80>
		g_matchStatus = UART_reciveByte();
     bce:	0e 94 ab 17 	call	0x2f56	; 0x2f56 <UART_reciveByte>
     bd2:	80 93 32 01 	sts	0x0132, r24

		if (g_matchStatus == PASSCODE_NOT_MATCH)
     bd6:	80 91 32 01 	lds	r24, 0x0132
     bda:	88 23       	and	r24, r24
     bdc:	09 f0       	breq	.+2      	; 0xbe0 <PASSCODE_Init+0x9a>
     bde:	78 c0       	rjmp	.+240    	; 0xcd0 <PASSCODE_Init+0x18a>
		{
			LCD_clearScreen();
     be0:	0e 94 e4 13 	call	0x27c8	; 0x27c8 <LCD_clearScreen>
			LCD_displayString("MisMatch !!");
     be4:	8e e7       	ldi	r24, 0x7E	; 126
     be6:	90 e0       	ldi	r25, 0x00	; 0
     be8:	0e 94 3d 13 	call	0x267a	; 0x267a <LCD_displayString>
     bec:	80 e0       	ldi	r24, 0x00	; 0
     bee:	90 e4       	ldi	r25, 0x40	; 64
     bf0:	ac e9       	ldi	r26, 0x9C	; 156
     bf2:	b5 e4       	ldi	r27, 0x45	; 69
     bf4:	8b 87       	std	Y+11, r24	; 0x0b
     bf6:	9c 87       	std	Y+12, r25	; 0x0c
     bf8:	ad 87       	std	Y+13, r26	; 0x0d
     bfa:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     bfc:	6b 85       	ldd	r22, Y+11	; 0x0b
     bfe:	7c 85       	ldd	r23, Y+12	; 0x0c
     c00:	8d 85       	ldd	r24, Y+13	; 0x0d
     c02:	9e 85       	ldd	r25, Y+14	; 0x0e
     c04:	20 e0       	ldi	r18, 0x00	; 0
     c06:	30 e0       	ldi	r19, 0x00	; 0
     c08:	4a e7       	ldi	r20, 0x7A	; 122
     c0a:	53 e4       	ldi	r21, 0x43	; 67
     c0c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c10:	dc 01       	movw	r26, r24
     c12:	cb 01       	movw	r24, r22
     c14:	8f 83       	std	Y+7, r24	; 0x07
     c16:	98 87       	std	Y+8, r25	; 0x08
     c18:	a9 87       	std	Y+9, r26	; 0x09
     c1a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     c1c:	6f 81       	ldd	r22, Y+7	; 0x07
     c1e:	78 85       	ldd	r23, Y+8	; 0x08
     c20:	89 85       	ldd	r24, Y+9	; 0x09
     c22:	9a 85       	ldd	r25, Y+10	; 0x0a
     c24:	20 e0       	ldi	r18, 0x00	; 0
     c26:	30 e0       	ldi	r19, 0x00	; 0
     c28:	40 e8       	ldi	r20, 0x80	; 128
     c2a:	5f e3       	ldi	r21, 0x3F	; 63
     c2c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     c30:	88 23       	and	r24, r24
     c32:	2c f4       	brge	.+10     	; 0xc3e <PASSCODE_Init+0xf8>
		__ticks = 1;
     c34:	81 e0       	ldi	r24, 0x01	; 1
     c36:	90 e0       	ldi	r25, 0x00	; 0
     c38:	9e 83       	std	Y+6, r25	; 0x06
     c3a:	8d 83       	std	Y+5, r24	; 0x05
     c3c:	3f c0       	rjmp	.+126    	; 0xcbc <PASSCODE_Init+0x176>
	else if (__tmp > 65535)
     c3e:	6f 81       	ldd	r22, Y+7	; 0x07
     c40:	78 85       	ldd	r23, Y+8	; 0x08
     c42:	89 85       	ldd	r24, Y+9	; 0x09
     c44:	9a 85       	ldd	r25, Y+10	; 0x0a
     c46:	20 e0       	ldi	r18, 0x00	; 0
     c48:	3f ef       	ldi	r19, 0xFF	; 255
     c4a:	4f e7       	ldi	r20, 0x7F	; 127
     c4c:	57 e4       	ldi	r21, 0x47	; 71
     c4e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     c52:	18 16       	cp	r1, r24
     c54:	4c f5       	brge	.+82     	; 0xca8 <PASSCODE_Init+0x162>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c56:	6b 85       	ldd	r22, Y+11	; 0x0b
     c58:	7c 85       	ldd	r23, Y+12	; 0x0c
     c5a:	8d 85       	ldd	r24, Y+13	; 0x0d
     c5c:	9e 85       	ldd	r25, Y+14	; 0x0e
     c5e:	20 e0       	ldi	r18, 0x00	; 0
     c60:	30 e0       	ldi	r19, 0x00	; 0
     c62:	40 e2       	ldi	r20, 0x20	; 32
     c64:	51 e4       	ldi	r21, 0x41	; 65
     c66:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c6a:	dc 01       	movw	r26, r24
     c6c:	cb 01       	movw	r24, r22
     c6e:	bc 01       	movw	r22, r24
     c70:	cd 01       	movw	r24, r26
     c72:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c76:	dc 01       	movw	r26, r24
     c78:	cb 01       	movw	r24, r22
     c7a:	9e 83       	std	Y+6, r25	; 0x06
     c7c:	8d 83       	std	Y+5, r24	; 0x05
     c7e:	0f c0       	rjmp	.+30     	; 0xc9e <PASSCODE_Init+0x158>
     c80:	89 e1       	ldi	r24, 0x19	; 25
     c82:	90 e0       	ldi	r25, 0x00	; 0
     c84:	9c 83       	std	Y+4, r25	; 0x04
     c86:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c88:	8b 81       	ldd	r24, Y+3	; 0x03
     c8a:	9c 81       	ldd	r25, Y+4	; 0x04
     c8c:	01 97       	sbiw	r24, 0x01	; 1
     c8e:	f1 f7       	brne	.-4      	; 0xc8c <PASSCODE_Init+0x146>
     c90:	9c 83       	std	Y+4, r25	; 0x04
     c92:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c94:	8d 81       	ldd	r24, Y+5	; 0x05
     c96:	9e 81       	ldd	r25, Y+6	; 0x06
     c98:	01 97       	sbiw	r24, 0x01	; 1
     c9a:	9e 83       	std	Y+6, r25	; 0x06
     c9c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c9e:	8d 81       	ldd	r24, Y+5	; 0x05
     ca0:	9e 81       	ldd	r25, Y+6	; 0x06
     ca2:	00 97       	sbiw	r24, 0x00	; 0
     ca4:	69 f7       	brne	.-38     	; 0xc80 <PASSCODE_Init+0x13a>
     ca6:	14 c0       	rjmp	.+40     	; 0xcd0 <PASSCODE_Init+0x18a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ca8:	6f 81       	ldd	r22, Y+7	; 0x07
     caa:	78 85       	ldd	r23, Y+8	; 0x08
     cac:	89 85       	ldd	r24, Y+9	; 0x09
     cae:	9a 85       	ldd	r25, Y+10	; 0x0a
     cb0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     cb4:	dc 01       	movw	r26, r24
     cb6:	cb 01       	movw	r24, r22
     cb8:	9e 83       	std	Y+6, r25	; 0x06
     cba:	8d 83       	std	Y+5, r24	; 0x05
     cbc:	8d 81       	ldd	r24, Y+5	; 0x05
     cbe:	9e 81       	ldd	r25, Y+6	; 0x06
     cc0:	9a 83       	std	Y+2, r25	; 0x02
     cc2:	89 83       	std	Y+1, r24	; 0x01
     cc4:	89 81       	ldd	r24, Y+1	; 0x01
     cc6:	9a 81       	ldd	r25, Y+2	; 0x02
     cc8:	01 97       	sbiw	r24, 0x01	; 1
     cca:	f1 f7       	brne	.-4      	; 0xcc8 <PASSCODE_Init+0x182>
     ccc:	9a 83       	std	Y+2, r25	; 0x02
     cce:	89 83       	std	Y+1, r24	; 0x01



void PASSCODE_Init (void)
{
	while (g_matchStatus == PASSCODE_NOT_MATCH)
     cd0:	80 91 32 01 	lds	r24, 0x0132
     cd4:	88 23       	and	r24, r24
     cd6:	09 f4       	brne	.+2      	; 0xcda <PASSCODE_Init+0x194>
     cd8:	41 cf       	rjmp	.-382    	; 0xb5c <PASSCODE_Init+0x16>
			LCD_clearScreen();
			LCD_displayString("MisMatch !!");
			_delay_ms(DISPLAY_MESSAGE_DELAY);
		}
	}
	g_matchStatus = PASSCODE_NOT_MATCH;
     cda:	10 92 32 01 	sts	0x0132, r1
}
     cde:	2e 96       	adiw	r28, 0x0e	; 14
     ce0:	0f b6       	in	r0, 0x3f	; 63
     ce2:	f8 94       	cli
     ce4:	de bf       	out	0x3e, r29	; 62
     ce6:	0f be       	out	0x3f, r0	; 63
     ce8:	cd bf       	out	0x3d, r28	; 61
     cea:	cf 91       	pop	r28
     cec:	df 91       	pop	r29
     cee:	08 95       	ret

00000cf0 <getPASSCODE>:


void getPASSCODE (uint8 *arr )
{
     cf0:	df 93       	push	r29
     cf2:	cf 93       	push	r28
     cf4:	cd b7       	in	r28, 0x3d	; 61
     cf6:	de b7       	in	r29, 0x3e	; 62
     cf8:	62 97       	sbiw	r28, 0x12	; 18
     cfa:	0f b6       	in	r0, 0x3f	; 63
     cfc:	f8 94       	cli
     cfe:	de bf       	out	0x3e, r29	; 62
     d00:	0f be       	out	0x3f, r0	; 63
     d02:	cd bf       	out	0x3d, r28	; 61
     d04:	9a 8b       	std	Y+18, r25	; 0x12
     d06:	89 8b       	std	Y+17, r24	; 0x11
	LCD_moveCursor(1,0);
     d08:	81 e0       	ldi	r24, 0x01	; 1
     d0a:	60 e0       	ldi	r22, 0x00	; 0
     d0c:	0e 94 66 13 	call	0x26cc	; 0x26cc <LCD_moveCursor>
	uint8 i = 0;
     d10:	18 8a       	std	Y+16, r1	; 0x10
     d12:	88 c0       	rjmp	.+272    	; 0xe24 <getPASSCODE+0x134>
	uint8 key_num;

	while (i != PASSCODE_CH_LENGTH)
	{
		key_num = KEYPAD_getPressedKey();
     d14:	0e 94 3a 0e 	call	0x1c74	; 0x1c74 <KEYPAD_getPressedKey>
     d18:	8f 87       	std	Y+15, r24	; 0x0f
		if (key_num >= 0 && key_num <= 9)
     d1a:	8f 85       	ldd	r24, Y+15	; 0x0f
     d1c:	8a 30       	cpi	r24, 0x0A	; 10
     d1e:	80 f4       	brcc	.+32     	; 0xd40 <getPASSCODE+0x50>
		{
			LCD_displayCharacter('*');
     d20:	8a e2       	ldi	r24, 0x2A	; 42
     d22:	0e 94 49 11 	call	0x2292	; 0x2292 <LCD_displayCharacter>
			*(arr + i) = key_num;
     d26:	88 89       	ldd	r24, Y+16	; 0x10
     d28:	28 2f       	mov	r18, r24
     d2a:	30 e0       	ldi	r19, 0x00	; 0
     d2c:	89 89       	ldd	r24, Y+17	; 0x11
     d2e:	9a 89       	ldd	r25, Y+18	; 0x12
     d30:	fc 01       	movw	r30, r24
     d32:	e2 0f       	add	r30, r18
     d34:	f3 1f       	adc	r31, r19
     d36:	8f 85       	ldd	r24, Y+15	; 0x0f
     d38:	80 83       	st	Z, r24
			i++;
     d3a:	88 89       	ldd	r24, Y+16	; 0x10
     d3c:	8f 5f       	subi	r24, 0xFF	; 255
     d3e:	88 8b       	std	Y+16, r24	; 0x10
     d40:	80 e0       	ldi	r24, 0x00	; 0
     d42:	90 e8       	ldi	r25, 0x80	; 128
     d44:	ab e3       	ldi	r26, 0x3B	; 59
     d46:	b5 e4       	ldi	r27, 0x45	; 69
     d48:	8b 87       	std	Y+11, r24	; 0x0b
     d4a:	9c 87       	std	Y+12, r25	; 0x0c
     d4c:	ad 87       	std	Y+13, r26	; 0x0d
     d4e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d50:	6b 85       	ldd	r22, Y+11	; 0x0b
     d52:	7c 85       	ldd	r23, Y+12	; 0x0c
     d54:	8d 85       	ldd	r24, Y+13	; 0x0d
     d56:	9e 85       	ldd	r25, Y+14	; 0x0e
     d58:	20 e0       	ldi	r18, 0x00	; 0
     d5a:	30 e0       	ldi	r19, 0x00	; 0
     d5c:	4a e7       	ldi	r20, 0x7A	; 122
     d5e:	53 e4       	ldi	r21, 0x43	; 67
     d60:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d64:	dc 01       	movw	r26, r24
     d66:	cb 01       	movw	r24, r22
     d68:	8f 83       	std	Y+7, r24	; 0x07
     d6a:	98 87       	std	Y+8, r25	; 0x08
     d6c:	a9 87       	std	Y+9, r26	; 0x09
     d6e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     d70:	6f 81       	ldd	r22, Y+7	; 0x07
     d72:	78 85       	ldd	r23, Y+8	; 0x08
     d74:	89 85       	ldd	r24, Y+9	; 0x09
     d76:	9a 85       	ldd	r25, Y+10	; 0x0a
     d78:	20 e0       	ldi	r18, 0x00	; 0
     d7a:	30 e0       	ldi	r19, 0x00	; 0
     d7c:	40 e8       	ldi	r20, 0x80	; 128
     d7e:	5f e3       	ldi	r21, 0x3F	; 63
     d80:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     d84:	88 23       	and	r24, r24
     d86:	2c f4       	brge	.+10     	; 0xd92 <getPASSCODE+0xa2>
		__ticks = 1;
     d88:	81 e0       	ldi	r24, 0x01	; 1
     d8a:	90 e0       	ldi	r25, 0x00	; 0
     d8c:	9e 83       	std	Y+6, r25	; 0x06
     d8e:	8d 83       	std	Y+5, r24	; 0x05
     d90:	3f c0       	rjmp	.+126    	; 0xe10 <getPASSCODE+0x120>
	else if (__tmp > 65535)
     d92:	6f 81       	ldd	r22, Y+7	; 0x07
     d94:	78 85       	ldd	r23, Y+8	; 0x08
     d96:	89 85       	ldd	r24, Y+9	; 0x09
     d98:	9a 85       	ldd	r25, Y+10	; 0x0a
     d9a:	20 e0       	ldi	r18, 0x00	; 0
     d9c:	3f ef       	ldi	r19, 0xFF	; 255
     d9e:	4f e7       	ldi	r20, 0x7F	; 127
     da0:	57 e4       	ldi	r21, 0x47	; 71
     da2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     da6:	18 16       	cp	r1, r24
     da8:	4c f5       	brge	.+82     	; 0xdfc <getPASSCODE+0x10c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     daa:	6b 85       	ldd	r22, Y+11	; 0x0b
     dac:	7c 85       	ldd	r23, Y+12	; 0x0c
     dae:	8d 85       	ldd	r24, Y+13	; 0x0d
     db0:	9e 85       	ldd	r25, Y+14	; 0x0e
     db2:	20 e0       	ldi	r18, 0x00	; 0
     db4:	30 e0       	ldi	r19, 0x00	; 0
     db6:	40 e2       	ldi	r20, 0x20	; 32
     db8:	51 e4       	ldi	r21, 0x41	; 65
     dba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     dbe:	dc 01       	movw	r26, r24
     dc0:	cb 01       	movw	r24, r22
     dc2:	bc 01       	movw	r22, r24
     dc4:	cd 01       	movw	r24, r26
     dc6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     dca:	dc 01       	movw	r26, r24
     dcc:	cb 01       	movw	r24, r22
     dce:	9e 83       	std	Y+6, r25	; 0x06
     dd0:	8d 83       	std	Y+5, r24	; 0x05
     dd2:	0f c0       	rjmp	.+30     	; 0xdf2 <getPASSCODE+0x102>
     dd4:	89 e1       	ldi	r24, 0x19	; 25
     dd6:	90 e0       	ldi	r25, 0x00	; 0
     dd8:	9c 83       	std	Y+4, r25	; 0x04
     dda:	8b 83       	std	Y+3, r24	; 0x03
     ddc:	8b 81       	ldd	r24, Y+3	; 0x03
     dde:	9c 81       	ldd	r25, Y+4	; 0x04
     de0:	01 97       	sbiw	r24, 0x01	; 1
     de2:	f1 f7       	brne	.-4      	; 0xde0 <getPASSCODE+0xf0>
     de4:	9c 83       	std	Y+4, r25	; 0x04
     de6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     de8:	8d 81       	ldd	r24, Y+5	; 0x05
     dea:	9e 81       	ldd	r25, Y+6	; 0x06
     dec:	01 97       	sbiw	r24, 0x01	; 1
     dee:	9e 83       	std	Y+6, r25	; 0x06
     df0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     df2:	8d 81       	ldd	r24, Y+5	; 0x05
     df4:	9e 81       	ldd	r25, Y+6	; 0x06
     df6:	00 97       	sbiw	r24, 0x00	; 0
     df8:	69 f7       	brne	.-38     	; 0xdd4 <getPASSCODE+0xe4>
     dfa:	14 c0       	rjmp	.+40     	; 0xe24 <getPASSCODE+0x134>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     dfc:	6f 81       	ldd	r22, Y+7	; 0x07
     dfe:	78 85       	ldd	r23, Y+8	; 0x08
     e00:	89 85       	ldd	r24, Y+9	; 0x09
     e02:	9a 85       	ldd	r25, Y+10	; 0x0a
     e04:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e08:	dc 01       	movw	r26, r24
     e0a:	cb 01       	movw	r24, r22
     e0c:	9e 83       	std	Y+6, r25	; 0x06
     e0e:	8d 83       	std	Y+5, r24	; 0x05
     e10:	8d 81       	ldd	r24, Y+5	; 0x05
     e12:	9e 81       	ldd	r25, Y+6	; 0x06
     e14:	9a 83       	std	Y+2, r25	; 0x02
     e16:	89 83       	std	Y+1, r24	; 0x01
     e18:	89 81       	ldd	r24, Y+1	; 0x01
     e1a:	9a 81       	ldd	r25, Y+2	; 0x02
     e1c:	01 97       	sbiw	r24, 0x01	; 1
     e1e:	f1 f7       	brne	.-4      	; 0xe1c <getPASSCODE+0x12c>
     e20:	9a 83       	std	Y+2, r25	; 0x02
     e22:	89 83       	std	Y+1, r24	; 0x01
{
	LCD_moveCursor(1,0);
	uint8 i = 0;
	uint8 key_num;

	while (i != PASSCODE_CH_LENGTH)
     e24:	88 89       	ldd	r24, Y+16	; 0x10
     e26:	85 30       	cpi	r24, 0x05	; 5
     e28:	09 f0       	breq	.+2      	; 0xe2c <getPASSCODE+0x13c>
     e2a:	74 cf       	rjmp	.-280    	; 0xd14 <getPASSCODE+0x24>
			*(arr + i) = key_num;
			i++;
		}
		_delay_ms(KEYPAD_INPUT_DELAY);
	}
	key_num = 0;
     e2c:	1f 86       	std	Y+15, r1	; 0x0f

	/* stay till user press"ON/C" Enter key */
	while(KEYPAD_getPressedKey() != 13);
     e2e:	0e 94 3a 0e 	call	0x1c74	; 0x1c74 <KEYPAD_getPressedKey>
     e32:	8d 30       	cpi	r24, 0x0D	; 13
     e34:	e1 f7       	brne	.-8      	; 0xe2e <getPASSCODE+0x13e>
}
     e36:	62 96       	adiw	r28, 0x12	; 18
     e38:	0f b6       	in	r0, 0x3f	; 63
     e3a:	f8 94       	cli
     e3c:	de bf       	out	0x3e, r29	; 62
     e3e:	0f be       	out	0x3f, r0	; 63
     e40:	cd bf       	out	0x3d, r28	; 61
     e42:	cf 91       	pop	r28
     e44:	df 91       	pop	r29
     e46:	08 95       	ret

00000e48 <MainMenu>:

void MainMenu(void)
{
     e48:	df 93       	push	r29
     e4a:	cf 93       	push	r28
     e4c:	cd b7       	in	r28, 0x3d	; 61
     e4e:	de b7       	in	r29, 0x3e	; 62
	LCD_clearScreen();
     e50:	0e 94 e4 13 	call	0x27c8	; 0x27c8 <LCD_clearScreen>

	LCD_displayStringRowColumn(0,0, "+:OPEN");
     e54:	2a e8       	ldi	r18, 0x8A	; 138
     e56:	30 e0       	ldi	r19, 0x00	; 0
     e58:	80 e0       	ldi	r24, 0x00	; 0
     e5a:	60 e0       	ldi	r22, 0x00	; 0
     e5c:	a9 01       	movw	r20, r18
     e5e:	0e 94 a8 13 	call	0x2750	; 0x2750 <LCD_displayStringRowColumn>
	LCD_displayStringRowColumn(1,0,"-:Change code");
     e62:	21 e9       	ldi	r18, 0x91	; 145
     e64:	30 e0       	ldi	r19, 0x00	; 0
     e66:	81 e0       	ldi	r24, 0x01	; 1
     e68:	60 e0       	ldi	r22, 0x00	; 0
     e6a:	a9 01       	movw	r20, r18
     e6c:	0e 94 a8 13 	call	0x2750	; 0x2750 <LCD_displayStringRowColumn>
}
     e70:	cf 91       	pop	r28
     e72:	df 91       	pop	r29
     e74:	08 95       	ret

00000e76 <sendPasscodeByUART>:

void sendPasscodeByUART (uint8 * pass_arr)
{
     e76:	df 93       	push	r29
     e78:	cf 93       	push	r28
     e7a:	cd b7       	in	r28, 0x3d	; 61
     e7c:	de b7       	in	r29, 0x3e	; 62
     e7e:	61 97       	sbiw	r28, 0x11	; 17
     e80:	0f b6       	in	r0, 0x3f	; 63
     e82:	f8 94       	cli
     e84:	de bf       	out	0x3e, r29	; 62
     e86:	0f be       	out	0x3f, r0	; 63
     e88:	cd bf       	out	0x3d, r28	; 61
     e8a:	99 8b       	std	Y+17, r25	; 0x11
     e8c:	88 8b       	std	Y+16, r24	; 0x10
	uint8 ctr;

	for (ctr = 0; ctr < PASSCODE_CH_LENGTH; ctr++)
     e8e:	1f 86       	std	Y+15, r1	; 0x0f
     e90:	80 c0       	rjmp	.+256    	; 0xf92 <sendPasscodeByUART+0x11c>
	{
		UART_sendByte(pass_arr[ctr]);
     e92:	8f 85       	ldd	r24, Y+15	; 0x0f
     e94:	28 2f       	mov	r18, r24
     e96:	30 e0       	ldi	r19, 0x00	; 0
     e98:	88 89       	ldd	r24, Y+16	; 0x10
     e9a:	99 89       	ldd	r25, Y+17	; 0x11
     e9c:	fc 01       	movw	r30, r24
     e9e:	e2 0f       	add	r30, r18
     ea0:	f3 1f       	adc	r31, r19
     ea2:	80 81       	ld	r24, Z
     ea4:	0e 94 94 17 	call	0x2f28	; 0x2f28 <UART_sendByte>
     ea8:	80 e0       	ldi	r24, 0x00	; 0
     eaa:	90 e0       	ldi	r25, 0x00	; 0
     eac:	a8 ec       	ldi	r26, 0xC8	; 200
     eae:	b2 e4       	ldi	r27, 0x42	; 66
     eb0:	8b 87       	std	Y+11, r24	; 0x0b
     eb2:	9c 87       	std	Y+12, r25	; 0x0c
     eb4:	ad 87       	std	Y+13, r26	; 0x0d
     eb6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     eb8:	6b 85       	ldd	r22, Y+11	; 0x0b
     eba:	7c 85       	ldd	r23, Y+12	; 0x0c
     ebc:	8d 85       	ldd	r24, Y+13	; 0x0d
     ebe:	9e 85       	ldd	r25, Y+14	; 0x0e
     ec0:	20 e0       	ldi	r18, 0x00	; 0
     ec2:	30 e0       	ldi	r19, 0x00	; 0
     ec4:	4a e7       	ldi	r20, 0x7A	; 122
     ec6:	53 e4       	ldi	r21, 0x43	; 67
     ec8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ecc:	dc 01       	movw	r26, r24
     ece:	cb 01       	movw	r24, r22
     ed0:	8f 83       	std	Y+7, r24	; 0x07
     ed2:	98 87       	std	Y+8, r25	; 0x08
     ed4:	a9 87       	std	Y+9, r26	; 0x09
     ed6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     ed8:	6f 81       	ldd	r22, Y+7	; 0x07
     eda:	78 85       	ldd	r23, Y+8	; 0x08
     edc:	89 85       	ldd	r24, Y+9	; 0x09
     ede:	9a 85       	ldd	r25, Y+10	; 0x0a
     ee0:	20 e0       	ldi	r18, 0x00	; 0
     ee2:	30 e0       	ldi	r19, 0x00	; 0
     ee4:	40 e8       	ldi	r20, 0x80	; 128
     ee6:	5f e3       	ldi	r21, 0x3F	; 63
     ee8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     eec:	88 23       	and	r24, r24
     eee:	2c f4       	brge	.+10     	; 0xefa <sendPasscodeByUART+0x84>
		__ticks = 1;
     ef0:	81 e0       	ldi	r24, 0x01	; 1
     ef2:	90 e0       	ldi	r25, 0x00	; 0
     ef4:	9e 83       	std	Y+6, r25	; 0x06
     ef6:	8d 83       	std	Y+5, r24	; 0x05
     ef8:	3f c0       	rjmp	.+126    	; 0xf78 <sendPasscodeByUART+0x102>
	else if (__tmp > 65535)
     efa:	6f 81       	ldd	r22, Y+7	; 0x07
     efc:	78 85       	ldd	r23, Y+8	; 0x08
     efe:	89 85       	ldd	r24, Y+9	; 0x09
     f00:	9a 85       	ldd	r25, Y+10	; 0x0a
     f02:	20 e0       	ldi	r18, 0x00	; 0
     f04:	3f ef       	ldi	r19, 0xFF	; 255
     f06:	4f e7       	ldi	r20, 0x7F	; 127
     f08:	57 e4       	ldi	r21, 0x47	; 71
     f0a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     f0e:	18 16       	cp	r1, r24
     f10:	4c f5       	brge	.+82     	; 0xf64 <sendPasscodeByUART+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f12:	6b 85       	ldd	r22, Y+11	; 0x0b
     f14:	7c 85       	ldd	r23, Y+12	; 0x0c
     f16:	8d 85       	ldd	r24, Y+13	; 0x0d
     f18:	9e 85       	ldd	r25, Y+14	; 0x0e
     f1a:	20 e0       	ldi	r18, 0x00	; 0
     f1c:	30 e0       	ldi	r19, 0x00	; 0
     f1e:	40 e2       	ldi	r20, 0x20	; 32
     f20:	51 e4       	ldi	r21, 0x41	; 65
     f22:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f26:	dc 01       	movw	r26, r24
     f28:	cb 01       	movw	r24, r22
     f2a:	bc 01       	movw	r22, r24
     f2c:	cd 01       	movw	r24, r26
     f2e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f32:	dc 01       	movw	r26, r24
     f34:	cb 01       	movw	r24, r22
     f36:	9e 83       	std	Y+6, r25	; 0x06
     f38:	8d 83       	std	Y+5, r24	; 0x05
     f3a:	0f c0       	rjmp	.+30     	; 0xf5a <sendPasscodeByUART+0xe4>
     f3c:	89 e1       	ldi	r24, 0x19	; 25
     f3e:	90 e0       	ldi	r25, 0x00	; 0
     f40:	9c 83       	std	Y+4, r25	; 0x04
     f42:	8b 83       	std	Y+3, r24	; 0x03
     f44:	8b 81       	ldd	r24, Y+3	; 0x03
     f46:	9c 81       	ldd	r25, Y+4	; 0x04
     f48:	01 97       	sbiw	r24, 0x01	; 1
     f4a:	f1 f7       	brne	.-4      	; 0xf48 <sendPasscodeByUART+0xd2>
     f4c:	9c 83       	std	Y+4, r25	; 0x04
     f4e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f50:	8d 81       	ldd	r24, Y+5	; 0x05
     f52:	9e 81       	ldd	r25, Y+6	; 0x06
     f54:	01 97       	sbiw	r24, 0x01	; 1
     f56:	9e 83       	std	Y+6, r25	; 0x06
     f58:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f5a:	8d 81       	ldd	r24, Y+5	; 0x05
     f5c:	9e 81       	ldd	r25, Y+6	; 0x06
     f5e:	00 97       	sbiw	r24, 0x00	; 0
     f60:	69 f7       	brne	.-38     	; 0xf3c <sendPasscodeByUART+0xc6>
     f62:	14 c0       	rjmp	.+40     	; 0xf8c <sendPasscodeByUART+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f64:	6f 81       	ldd	r22, Y+7	; 0x07
     f66:	78 85       	ldd	r23, Y+8	; 0x08
     f68:	89 85       	ldd	r24, Y+9	; 0x09
     f6a:	9a 85       	ldd	r25, Y+10	; 0x0a
     f6c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f70:	dc 01       	movw	r26, r24
     f72:	cb 01       	movw	r24, r22
     f74:	9e 83       	std	Y+6, r25	; 0x06
     f76:	8d 83       	std	Y+5, r24	; 0x05
     f78:	8d 81       	ldd	r24, Y+5	; 0x05
     f7a:	9e 81       	ldd	r25, Y+6	; 0x06
     f7c:	9a 83       	std	Y+2, r25	; 0x02
     f7e:	89 83       	std	Y+1, r24	; 0x01
     f80:	89 81       	ldd	r24, Y+1	; 0x01
     f82:	9a 81       	ldd	r25, Y+2	; 0x02
     f84:	01 97       	sbiw	r24, 0x01	; 1
     f86:	f1 f7       	brne	.-4      	; 0xf84 <sendPasscodeByUART+0x10e>
     f88:	9a 83       	std	Y+2, r25	; 0x02
     f8a:	89 83       	std	Y+1, r24	; 0x01

void sendPasscodeByUART (uint8 * pass_arr)
{
	uint8 ctr;

	for (ctr = 0; ctr < PASSCODE_CH_LENGTH; ctr++)
     f8c:	8f 85       	ldd	r24, Y+15	; 0x0f
     f8e:	8f 5f       	subi	r24, 0xFF	; 255
     f90:	8f 87       	std	Y+15, r24	; 0x0f
     f92:	8f 85       	ldd	r24, Y+15	; 0x0f
     f94:	85 30       	cpi	r24, 0x05	; 5
     f96:	08 f4       	brcc	.+2      	; 0xf9a <sendPasscodeByUART+0x124>
     f98:	7c cf       	rjmp	.-264    	; 0xe92 <sendPasscodeByUART+0x1c>
	{
		UART_sendByte(pass_arr[ctr]);
		_delay_ms(100);
	}
}
     f9a:	61 96       	adiw	r28, 0x11	; 17
     f9c:	0f b6       	in	r0, 0x3f	; 63
     f9e:	f8 94       	cli
     fa0:	de bf       	out	0x3e, r29	; 62
     fa2:	0f be       	out	0x3f, r0	; 63
     fa4:	cd bf       	out	0x3d, r28	; 61
     fa6:	cf 91       	pop	r28
     fa8:	df 91       	pop	r29
     faa:	08 95       	ret

00000fac <timerCallBack>:

void timerCallBack(void)
{
     fac:	df 93       	push	r29
     fae:	cf 93       	push	r28
     fb0:	cd b7       	in	r28, 0x3d	; 61
     fb2:	de b7       	in	r29, 0x3e	; 62
	g_sec++;
     fb4:	80 91 30 01 	lds	r24, 0x0130
     fb8:	90 91 31 01 	lds	r25, 0x0131
     fbc:	01 96       	adiw	r24, 0x01	; 1
     fbe:	90 93 31 01 	sts	0x0131, r25
     fc2:	80 93 30 01 	sts	0x0130, r24
}
     fc6:	cf 91       	pop	r28
     fc8:	df 91       	pop	r29
     fca:	08 95       	ret

00000fcc <DoorOpen>:


void DoorOpen (void)
{
     fcc:	df 93       	push	r29
     fce:	cf 93       	push	r28
     fd0:	cd b7       	in	r28, 0x3d	; 61
     fd2:	de b7       	in	r29, 0x3e	; 62
	g_sec = 0 ;
     fd4:	10 92 31 01 	sts	0x0131, r1
     fd8:	10 92 30 01 	sts	0x0130, r1
	/* door is opening during 15 sec. */
	LCD_clearScreen();
     fdc:	0e 94 e4 13 	call	0x27c8	; 0x27c8 <LCD_clearScreen>

	LCD_displayStringRowColumn(0,0,"Door is Opening");
     fe0:	2f e9       	ldi	r18, 0x9F	; 159
     fe2:	30 e0       	ldi	r19, 0x00	; 0
     fe4:	80 e0       	ldi	r24, 0x00	; 0
     fe6:	60 e0       	ldi	r22, 0x00	; 0
     fe8:	a9 01       	movw	r20, r18
     fea:	0e 94 a8 13 	call	0x2750	; 0x2750 <LCD_displayStringRowColumn>
	while (g_sec < DOOR_LOCK_UNLOCK_PERIOD);
     fee:	80 91 30 01 	lds	r24, 0x0130
     ff2:	90 91 31 01 	lds	r25, 0x0131
     ff6:	8f 30       	cpi	r24, 0x0F	; 15
     ff8:	91 05       	cpc	r25, r1
     ffa:	c8 f3       	brcs	.-14     	; 0xfee <DoorOpen+0x22>


	g_sec = 0 ;
     ffc:	10 92 31 01 	sts	0x0131, r1
    1000:	10 92 30 01 	sts	0x0130, r1
	/* door is held open for 3 sec.  */
	LCD_clearScreen();
    1004:	0e 94 e4 13 	call	0x27c8	; 0x27c8 <LCD_clearScreen>
	LCD_displayStringRowColumn(0,0,"Door Opened !");
    1008:	2f ea       	ldi	r18, 0xAF	; 175
    100a:	30 e0       	ldi	r19, 0x00	; 0
    100c:	80 e0       	ldi	r24, 0x00	; 0
    100e:	60 e0       	ldi	r22, 0x00	; 0
    1010:	a9 01       	movw	r20, r18
    1012:	0e 94 a8 13 	call	0x2750	; 0x2750 <LCD_displayStringRowColumn>
	while (g_sec < DOOR_STAND_BY_PERIOD);
    1016:	80 91 30 01 	lds	r24, 0x0130
    101a:	90 91 31 01 	lds	r25, 0x0131
    101e:	83 30       	cpi	r24, 0x03	; 3
    1020:	91 05       	cpc	r25, r1
    1022:	c8 f3       	brcs	.-14     	; 0x1016 <DoorOpen+0x4a>


	g_sec = 0 ;
    1024:	10 92 31 01 	sts	0x0131, r1
    1028:	10 92 30 01 	sts	0x0130, r1
	/* door is closing during 15 sec. */
	LCD_clearScreen();
    102c:	0e 94 e4 13 	call	0x27c8	; 0x27c8 <LCD_clearScreen>
	LCD_displayStringRowColumn(0,0,"Door is Closing");
    1030:	2d eb       	ldi	r18, 0xBD	; 189
    1032:	30 e0       	ldi	r19, 0x00	; 0
    1034:	80 e0       	ldi	r24, 0x00	; 0
    1036:	60 e0       	ldi	r22, 0x00	; 0
    1038:	a9 01       	movw	r20, r18
    103a:	0e 94 a8 13 	call	0x2750	; 0x2750 <LCD_displayStringRowColumn>
	while (g_sec < DOOR_LOCK_UNLOCK_PERIOD);
    103e:	80 91 30 01 	lds	r24, 0x0130
    1042:	90 91 31 01 	lds	r25, 0x0131
    1046:	8f 30       	cpi	r24, 0x0F	; 15
    1048:	91 05       	cpc	r25, r1
    104a:	c8 f3       	brcs	.-14     	; 0x103e <DoorOpen+0x72>
}
    104c:	cf 91       	pop	r28
    104e:	df 91       	pop	r29
    1050:	08 95       	ret

00001052 <main>:
 *                                APPLICATION                                  *
 *******************************************************************************/


int main (void)
{
    1052:	df 93       	push	r29
    1054:	cf 93       	push	r28
    1056:	cd b7       	in	r28, 0x3d	; 61
    1058:	de b7       	in	r29, 0x3e	; 62
    105a:	c2 55       	subi	r28, 0x52	; 82
    105c:	d0 40       	sbci	r29, 0x00	; 0
    105e:	0f b6       	in	r0, 0x3f	; 63
    1060:	f8 94       	cli
    1062:	de bf       	out	0x3e, r29	; 62
    1064:	0f be       	out	0x3f, r0	; 63
    1066:	cd bf       	out	0x3d, r28	; 61
	/* Enable Interrupt */
	SREG |= (1<<7);
    1068:	af e5       	ldi	r26, 0x5F	; 95
    106a:	b0 e0       	ldi	r27, 0x00	; 0
    106c:	ef e5       	ldi	r30, 0x5F	; 95
    106e:	f0 e0       	ldi	r31, 0x00	; 0
    1070:	80 81       	ld	r24, Z
    1072:	80 68       	ori	r24, 0x80	; 128
    1074:	8c 93       	st	X, r24

	/*initialize LCD and UART */
	LCD_init();
    1076:	0e 94 32 0f 	call	0x1e64	; 0x1e64 <LCD_init>



	UART_ConfigType UART_Config= {DISABLED , _8_BIT , _1_BIT} ;
    107a:	ce 01       	movw	r24, r28
    107c:	cb 96       	adiw	r24, 0x3b	; 59
    107e:	2b 96       	adiw	r28, 0x0b	; 11
    1080:	9f af       	std	Y+63, r25	; 0x3f
    1082:	8e af       	std	Y+62, r24	; 0x3e
    1084:	2b 97       	sbiw	r28, 0x0b	; 11
    1086:	ed e2       	ldi	r30, 0x2D	; 45
    1088:	f1 e0       	ldi	r31, 0x01	; 1
    108a:	2d 96       	adiw	r28, 0x0d	; 13
    108c:	ff af       	std	Y+63, r31	; 0x3f
    108e:	ee af       	std	Y+62, r30	; 0x3e
    1090:	2d 97       	sbiw	r28, 0x0d	; 13
    1092:	f3 e0       	ldi	r31, 0x03	; 3
    1094:	2e 96       	adiw	r28, 0x0e	; 14
    1096:	ff af       	std	Y+63, r31	; 0x3f
    1098:	2e 97       	sbiw	r28, 0x0e	; 14
    109a:	2d 96       	adiw	r28, 0x0d	; 13
    109c:	ee ad       	ldd	r30, Y+62	; 0x3e
    109e:	ff ad       	ldd	r31, Y+63	; 0x3f
    10a0:	2d 97       	sbiw	r28, 0x0d	; 13
    10a2:	00 80       	ld	r0, Z
    10a4:	2d 96       	adiw	r28, 0x0d	; 13
    10a6:	8e ad       	ldd	r24, Y+62	; 0x3e
    10a8:	9f ad       	ldd	r25, Y+63	; 0x3f
    10aa:	2d 97       	sbiw	r28, 0x0d	; 13
    10ac:	01 96       	adiw	r24, 0x01	; 1
    10ae:	2d 96       	adiw	r28, 0x0d	; 13
    10b0:	9f af       	std	Y+63, r25	; 0x3f
    10b2:	8e af       	std	Y+62, r24	; 0x3e
    10b4:	2d 97       	sbiw	r28, 0x0d	; 13
    10b6:	2b 96       	adiw	r28, 0x0b	; 11
    10b8:	ee ad       	ldd	r30, Y+62	; 0x3e
    10ba:	ff ad       	ldd	r31, Y+63	; 0x3f
    10bc:	2b 97       	sbiw	r28, 0x0b	; 11
    10be:	00 82       	st	Z, r0
    10c0:	2b 96       	adiw	r28, 0x0b	; 11
    10c2:	8e ad       	ldd	r24, Y+62	; 0x3e
    10c4:	9f ad       	ldd	r25, Y+63	; 0x3f
    10c6:	2b 97       	sbiw	r28, 0x0b	; 11
    10c8:	01 96       	adiw	r24, 0x01	; 1
    10ca:	2b 96       	adiw	r28, 0x0b	; 11
    10cc:	9f af       	std	Y+63, r25	; 0x3f
    10ce:	8e af       	std	Y+62, r24	; 0x3e
    10d0:	2b 97       	sbiw	r28, 0x0b	; 11
    10d2:	2e 96       	adiw	r28, 0x0e	; 14
    10d4:	9f ad       	ldd	r25, Y+63	; 0x3f
    10d6:	2e 97       	sbiw	r28, 0x0e	; 14
    10d8:	91 50       	subi	r25, 0x01	; 1
    10da:	2e 96       	adiw	r28, 0x0e	; 14
    10dc:	9f af       	std	Y+63, r25	; 0x3f
    10de:	2e 97       	sbiw	r28, 0x0e	; 14
    10e0:	2e 96       	adiw	r28, 0x0e	; 14
    10e2:	ef ad       	ldd	r30, Y+63	; 0x3f
    10e4:	2e 97       	sbiw	r28, 0x0e	; 14
    10e6:	ee 23       	and	r30, r30
    10e8:	c1 f6       	brne	.-80     	; 0x109a <main+0x48>
	/* Choose baud rate = 9600 bps */
	UART_init(9600,&UART_Config)	;
    10ea:	9e 01       	movw	r18, r28
    10ec:	25 5c       	subi	r18, 0xC5	; 197
    10ee:	3f 4f       	sbci	r19, 0xFF	; 255
    10f0:	60 e8       	ldi	r22, 0x80	; 128
    10f2:	75 e2       	ldi	r23, 0x25	; 37
    10f4:	80 e0       	ldi	r24, 0x00	; 0
    10f6:	90 e0       	ldi	r25, 0x00	; 0
    10f8:	a9 01       	movw	r20, r18
    10fa:	0e 94 02 17 	call	0x2e04	; 0x2e04 <UART_init>
	 * one clock-cycle time = 128 uSec
	 * timer to produce an interrupt every 1 second:
	 * set the compare value to be 1/(128u) = 7813
	 */

	TIMER_ConfigType Timer_Config = {TIMER1 , F_CPU_1024 , CTC, 7813 , 0};
    10fe:	ce 01       	movw	r24, r28
    1100:	ce 96       	adiw	r24, 0x3e	; 62
    1102:	60 96       	adiw	r28, 0x10	; 16
    1104:	9f af       	std	Y+63, r25	; 0x3f
    1106:	8e af       	std	Y+62, r24	; 0x3e
    1108:	60 97       	sbiw	r28, 0x10	; 16
    110a:	e2 e2       	ldi	r30, 0x22	; 34
    110c:	f1 e0       	ldi	r31, 0x01	; 1
    110e:	62 96       	adiw	r28, 0x12	; 18
    1110:	ff af       	std	Y+63, r31	; 0x3f
    1112:	ee af       	std	Y+62, r30	; 0x3e
    1114:	62 97       	sbiw	r28, 0x12	; 18
    1116:	fb e0       	ldi	r31, 0x0B	; 11
    1118:	63 96       	adiw	r28, 0x13	; 19
    111a:	ff af       	std	Y+63, r31	; 0x3f
    111c:	63 97       	sbiw	r28, 0x13	; 19
    111e:	62 96       	adiw	r28, 0x12	; 18
    1120:	ee ad       	ldd	r30, Y+62	; 0x3e
    1122:	ff ad       	ldd	r31, Y+63	; 0x3f
    1124:	62 97       	sbiw	r28, 0x12	; 18
    1126:	00 80       	ld	r0, Z
    1128:	62 96       	adiw	r28, 0x12	; 18
    112a:	8e ad       	ldd	r24, Y+62	; 0x3e
    112c:	9f ad       	ldd	r25, Y+63	; 0x3f
    112e:	62 97       	sbiw	r28, 0x12	; 18
    1130:	01 96       	adiw	r24, 0x01	; 1
    1132:	62 96       	adiw	r28, 0x12	; 18
    1134:	9f af       	std	Y+63, r25	; 0x3f
    1136:	8e af       	std	Y+62, r24	; 0x3e
    1138:	62 97       	sbiw	r28, 0x12	; 18
    113a:	60 96       	adiw	r28, 0x10	; 16
    113c:	ee ad       	ldd	r30, Y+62	; 0x3e
    113e:	ff ad       	ldd	r31, Y+63	; 0x3f
    1140:	60 97       	sbiw	r28, 0x10	; 16
    1142:	00 82       	st	Z, r0
    1144:	60 96       	adiw	r28, 0x10	; 16
    1146:	8e ad       	ldd	r24, Y+62	; 0x3e
    1148:	9f ad       	ldd	r25, Y+63	; 0x3f
    114a:	60 97       	sbiw	r28, 0x10	; 16
    114c:	01 96       	adiw	r24, 0x01	; 1
    114e:	60 96       	adiw	r28, 0x10	; 16
    1150:	9f af       	std	Y+63, r25	; 0x3f
    1152:	8e af       	std	Y+62, r24	; 0x3e
    1154:	60 97       	sbiw	r28, 0x10	; 16
    1156:	63 96       	adiw	r28, 0x13	; 19
    1158:	9f ad       	ldd	r25, Y+63	; 0x3f
    115a:	63 97       	sbiw	r28, 0x13	; 19
    115c:	91 50       	subi	r25, 0x01	; 1
    115e:	63 96       	adiw	r28, 0x13	; 19
    1160:	9f af       	std	Y+63, r25	; 0x3f
    1162:	63 97       	sbiw	r28, 0x13	; 19
    1164:	63 96       	adiw	r28, 0x13	; 19
    1166:	ef ad       	ldd	r30, Y+63	; 0x3f
    1168:	63 97       	sbiw	r28, 0x13	; 19
    116a:	ee 23       	and	r30, r30
    116c:	c1 f6       	brne	.-80     	; 0x111e <main+0xcc>

	Timer_init(&Timer_Config);
    116e:	ce 01       	movw	r24, r28
    1170:	ce 96       	adiw	r24, 0x3e	; 62
    1172:	0e 94 20 15 	call	0x2a40	; 0x2a40 <Timer_init>
	Timer1_setCallBack(timerCallBack);
    1176:	86 ed       	ldi	r24, 0xD6	; 214
    1178:	97 e0       	ldi	r25, 0x07	; 7
    117a:	0e 94 73 16 	call	0x2ce6	; 0x2ce6 <Timer1_setCallBack>

	PASSCODE_Init();
    117e:	0e 94 a3 05 	call	0xb46	; 0xb46 <PASSCODE_Init>
	MainMenu();
    1182:	0e 94 24 07 	call	0xe48	; 0xe48 <MainMenu>

	uint8 byteRecived = 0;
    1186:	1a ae       	std	Y+58, r1	; 0x3a
	uint8 keyPressed = 0;
    1188:	19 ae       	std	Y+57, r1	; 0x39


	while (1)
	{
		keyPressed =KEYPAD_getPressedKey();
    118a:	0e 94 3a 0e 	call	0x1c74	; 0x1c74 <KEYPAD_getPressedKey>
    118e:	89 af       	std	Y+57, r24	; 0x39
		if (keyPressed == '+')
    1190:	89 ad       	ldd	r24, Y+57	; 0x39
    1192:	8b 32       	cpi	r24, 0x2B	; 43
    1194:	09 f0       	breq	.+2      	; 0x1198 <main+0x146>
    1196:	15 c1       	rjmp	.+554    	; 0x13c2 <main+0x370>
		{
			LCD_clearScreen();
    1198:	0e 94 e4 13 	call	0x27c8	; 0x27c8 <LCD_clearScreen>
			LCD_displayString("Enter CODE");
    119c:	8d ec       	ldi	r24, 0xCD	; 205
    119e:	90 e0       	ldi	r25, 0x00	; 0
    11a0:	0e 94 3d 13 	call	0x267a	; 0x267a <LCD_displayString>

			getPASSCODE(g_passcode);
    11a4:	89 e3       	ldi	r24, 0x39	; 57
    11a6:	91 e0       	ldi	r25, 0x01	; 1
    11a8:	0e 94 78 06 	call	0xcf0	; 0xcf0 <getPASSCODE>


			/* MC1 is ready to send */
			UART_sendByte(MC_READY_SEND);
    11ac:	85 e1       	ldi	r24, 0x15	; 21
    11ae:	0e 94 94 17 	call	0x2f28	; 0x2f28 <UART_sendByte>
			sendPasscodeByUART(g_passcode);
    11b2:	89 e3       	ldi	r24, 0x39	; 57
    11b4:	91 e0       	ldi	r25, 0x01	; 1
    11b6:	0e 94 3b 07 	call	0xe76	; 0xe76 <sendPasscodeByUART>

			UART_sendByte('+');
    11ba:	8b e2       	ldi	r24, 0x2B	; 43
    11bc:	0e 94 94 17 	call	0x2f28	; 0x2f28 <UART_sendByte>

			/* MCU get the byte or no  */
			byteRecived = UART_reciveByte();
    11c0:	0e 94 ab 17 	call	0x2f56	; 0x2f56 <UART_reciveByte>
    11c4:	8a af       	std	Y+58, r24	; 0x3a
			if (byteRecived == DOOR_UNLOOK)
    11c6:	8a ad       	ldd	r24, Y+58	; 0x3a
    11c8:	85 32       	cpi	r24, 0x25	; 37
    11ca:	19 f4       	brne	.+6      	; 0x11d2 <main+0x180>
			{
				/* display door status on LCD */
				DoorOpen();
    11cc:	0e 94 e6 07 	call	0xfcc	; 0xfcc <DoorOpen>
    11d0:	f5 c0       	rjmp	.+490    	; 0x13bc <main+0x36a>

			}
			else if (byteRecived == PASSCODE_WRONG)
    11d2:	8a ad       	ldd	r24, Y+58	; 0x3a
    11d4:	80 33       	cpi	r24, 0x30	; 48
    11d6:	09 f0       	breq	.+2      	; 0x11da <main+0x188>
    11d8:	f1 c0       	rjmp	.+482    	; 0x13bc <main+0x36a>
			{
				/* Clear the screen and display wrong passcode */
				LCD_clearScreen();
    11da:	0e 94 e4 13 	call	0x27c8	; 0x27c8 <LCD_clearScreen>
				LCD_displayString("Wrong PASSCODE !");
    11de:	88 ed       	ldi	r24, 0xD8	; 216
    11e0:	90 e0       	ldi	r25, 0x00	; 0
    11e2:	0e 94 3d 13 	call	0x267a	; 0x267a <LCD_displayString>
    11e6:	80 e0       	ldi	r24, 0x00	; 0
    11e8:	90 e4       	ldi	r25, 0x40	; 64
    11ea:	ac e9       	ldi	r26, 0x9C	; 156
    11ec:	b5 e4       	ldi	r27, 0x45	; 69
    11ee:	8d ab       	std	Y+53, r24	; 0x35
    11f0:	9e ab       	std	Y+54, r25	; 0x36
    11f2:	af ab       	std	Y+55, r26	; 0x37
    11f4:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    11f6:	6d a9       	ldd	r22, Y+53	; 0x35
    11f8:	7e a9       	ldd	r23, Y+54	; 0x36
    11fa:	8f a9       	ldd	r24, Y+55	; 0x37
    11fc:	98 ad       	ldd	r25, Y+56	; 0x38
    11fe:	20 e0       	ldi	r18, 0x00	; 0
    1200:	30 e0       	ldi	r19, 0x00	; 0
    1202:	4a e7       	ldi	r20, 0x7A	; 122
    1204:	53 e4       	ldi	r21, 0x43	; 67
    1206:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    120a:	dc 01       	movw	r26, r24
    120c:	cb 01       	movw	r24, r22
    120e:	89 ab       	std	Y+49, r24	; 0x31
    1210:	9a ab       	std	Y+50, r25	; 0x32
    1212:	ab ab       	std	Y+51, r26	; 0x33
    1214:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1216:	69 a9       	ldd	r22, Y+49	; 0x31
    1218:	7a a9       	ldd	r23, Y+50	; 0x32
    121a:	8b a9       	ldd	r24, Y+51	; 0x33
    121c:	9c a9       	ldd	r25, Y+52	; 0x34
    121e:	20 e0       	ldi	r18, 0x00	; 0
    1220:	30 e0       	ldi	r19, 0x00	; 0
    1222:	40 e8       	ldi	r20, 0x80	; 128
    1224:	5f e3       	ldi	r21, 0x3F	; 63
    1226:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    122a:	88 23       	and	r24, r24
    122c:	2c f4       	brge	.+10     	; 0x1238 <main+0x1e6>
		__ticks = 1;
    122e:	81 e0       	ldi	r24, 0x01	; 1
    1230:	90 e0       	ldi	r25, 0x00	; 0
    1232:	98 ab       	std	Y+48, r25	; 0x30
    1234:	8f a7       	std	Y+47, r24	; 0x2f
    1236:	3f c0       	rjmp	.+126    	; 0x12b6 <main+0x264>
	else if (__tmp > 65535)
    1238:	69 a9       	ldd	r22, Y+49	; 0x31
    123a:	7a a9       	ldd	r23, Y+50	; 0x32
    123c:	8b a9       	ldd	r24, Y+51	; 0x33
    123e:	9c a9       	ldd	r25, Y+52	; 0x34
    1240:	20 e0       	ldi	r18, 0x00	; 0
    1242:	3f ef       	ldi	r19, 0xFF	; 255
    1244:	4f e7       	ldi	r20, 0x7F	; 127
    1246:	57 e4       	ldi	r21, 0x47	; 71
    1248:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    124c:	18 16       	cp	r1, r24
    124e:	4c f5       	brge	.+82     	; 0x12a2 <main+0x250>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1250:	6d a9       	ldd	r22, Y+53	; 0x35
    1252:	7e a9       	ldd	r23, Y+54	; 0x36
    1254:	8f a9       	ldd	r24, Y+55	; 0x37
    1256:	98 ad       	ldd	r25, Y+56	; 0x38
    1258:	20 e0       	ldi	r18, 0x00	; 0
    125a:	30 e0       	ldi	r19, 0x00	; 0
    125c:	40 e2       	ldi	r20, 0x20	; 32
    125e:	51 e4       	ldi	r21, 0x41	; 65
    1260:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1264:	dc 01       	movw	r26, r24
    1266:	cb 01       	movw	r24, r22
    1268:	bc 01       	movw	r22, r24
    126a:	cd 01       	movw	r24, r26
    126c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1270:	dc 01       	movw	r26, r24
    1272:	cb 01       	movw	r24, r22
    1274:	98 ab       	std	Y+48, r25	; 0x30
    1276:	8f a7       	std	Y+47, r24	; 0x2f
    1278:	0f c0       	rjmp	.+30     	; 0x1298 <main+0x246>
    127a:	89 e1       	ldi	r24, 0x19	; 25
    127c:	90 e0       	ldi	r25, 0x00	; 0
    127e:	9e a7       	std	Y+46, r25	; 0x2e
    1280:	8d a7       	std	Y+45, r24	; 0x2d
    1282:	8d a5       	ldd	r24, Y+45	; 0x2d
    1284:	9e a5       	ldd	r25, Y+46	; 0x2e
    1286:	01 97       	sbiw	r24, 0x01	; 1
    1288:	f1 f7       	brne	.-4      	; 0x1286 <main+0x234>
    128a:	9e a7       	std	Y+46, r25	; 0x2e
    128c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    128e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1290:	98 a9       	ldd	r25, Y+48	; 0x30
    1292:	01 97       	sbiw	r24, 0x01	; 1
    1294:	98 ab       	std	Y+48, r25	; 0x30
    1296:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1298:	8f a5       	ldd	r24, Y+47	; 0x2f
    129a:	98 a9       	ldd	r25, Y+48	; 0x30
    129c:	00 97       	sbiw	r24, 0x00	; 0
    129e:	69 f7       	brne	.-38     	; 0x127a <main+0x228>
    12a0:	14 c0       	rjmp	.+40     	; 0x12ca <main+0x278>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    12a2:	69 a9       	ldd	r22, Y+49	; 0x31
    12a4:	7a a9       	ldd	r23, Y+50	; 0x32
    12a6:	8b a9       	ldd	r24, Y+51	; 0x33
    12a8:	9c a9       	ldd	r25, Y+52	; 0x34
    12aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12ae:	dc 01       	movw	r26, r24
    12b0:	cb 01       	movw	r24, r22
    12b2:	98 ab       	std	Y+48, r25	; 0x30
    12b4:	8f a7       	std	Y+47, r24	; 0x2f
    12b6:	8f a5       	ldd	r24, Y+47	; 0x2f
    12b8:	98 a9       	ldd	r25, Y+48	; 0x30
    12ba:	9c a7       	std	Y+44, r25	; 0x2c
    12bc:	8b a7       	std	Y+43, r24	; 0x2b
    12be:	8b a5       	ldd	r24, Y+43	; 0x2b
    12c0:	9c a5       	ldd	r25, Y+44	; 0x2c
    12c2:	01 97       	sbiw	r24, 0x01	; 1
    12c4:	f1 f7       	brne	.-4      	; 0x12c2 <main+0x270>
    12c6:	9c a7       	std	Y+44, r25	; 0x2c
    12c8:	8b a7       	std	Y+43, r24	; 0x2b
				_delay_ms(DISPLAY_MESSAGE_DELAY);
				LCD_displayStringRowColumn(1,0,"Enter Correct code");
    12ca:	29 ee       	ldi	r18, 0xE9	; 233
    12cc:	30 e0       	ldi	r19, 0x00	; 0
    12ce:	81 e0       	ldi	r24, 0x01	; 1
    12d0:	60 e0       	ldi	r22, 0x00	; 0
    12d2:	a9 01       	movw	r20, r18
    12d4:	0e 94 a8 13 	call	0x2750	; 0x2750 <LCD_displayStringRowColumn>
    12d8:	80 e0       	ldi	r24, 0x00	; 0
    12da:	90 e4       	ldi	r25, 0x40	; 64
    12dc:	ac e9       	ldi	r26, 0x9C	; 156
    12de:	b5 e4       	ldi	r27, 0x45	; 69
    12e0:	8f a3       	std	Y+39, r24	; 0x27
    12e2:	98 a7       	std	Y+40, r25	; 0x28
    12e4:	a9 a7       	std	Y+41, r26	; 0x29
    12e6:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    12e8:	6f a1       	ldd	r22, Y+39	; 0x27
    12ea:	78 a5       	ldd	r23, Y+40	; 0x28
    12ec:	89 a5       	ldd	r24, Y+41	; 0x29
    12ee:	9a a5       	ldd	r25, Y+42	; 0x2a
    12f0:	20 e0       	ldi	r18, 0x00	; 0
    12f2:	30 e0       	ldi	r19, 0x00	; 0
    12f4:	4a e7       	ldi	r20, 0x7A	; 122
    12f6:	53 e4       	ldi	r21, 0x43	; 67
    12f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12fc:	dc 01       	movw	r26, r24
    12fe:	cb 01       	movw	r24, r22
    1300:	8b a3       	std	Y+35, r24	; 0x23
    1302:	9c a3       	std	Y+36, r25	; 0x24
    1304:	ad a3       	std	Y+37, r26	; 0x25
    1306:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1308:	6b a1       	ldd	r22, Y+35	; 0x23
    130a:	7c a1       	ldd	r23, Y+36	; 0x24
    130c:	8d a1       	ldd	r24, Y+37	; 0x25
    130e:	9e a1       	ldd	r25, Y+38	; 0x26
    1310:	20 e0       	ldi	r18, 0x00	; 0
    1312:	30 e0       	ldi	r19, 0x00	; 0
    1314:	40 e8       	ldi	r20, 0x80	; 128
    1316:	5f e3       	ldi	r21, 0x3F	; 63
    1318:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    131c:	88 23       	and	r24, r24
    131e:	2c f4       	brge	.+10     	; 0x132a <main+0x2d8>
		__ticks = 1;
    1320:	81 e0       	ldi	r24, 0x01	; 1
    1322:	90 e0       	ldi	r25, 0x00	; 0
    1324:	9a a3       	std	Y+34, r25	; 0x22
    1326:	89 a3       	std	Y+33, r24	; 0x21
    1328:	3f c0       	rjmp	.+126    	; 0x13a8 <main+0x356>
	else if (__tmp > 65535)
    132a:	6b a1       	ldd	r22, Y+35	; 0x23
    132c:	7c a1       	ldd	r23, Y+36	; 0x24
    132e:	8d a1       	ldd	r24, Y+37	; 0x25
    1330:	9e a1       	ldd	r25, Y+38	; 0x26
    1332:	20 e0       	ldi	r18, 0x00	; 0
    1334:	3f ef       	ldi	r19, 0xFF	; 255
    1336:	4f e7       	ldi	r20, 0x7F	; 127
    1338:	57 e4       	ldi	r21, 0x47	; 71
    133a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    133e:	18 16       	cp	r1, r24
    1340:	4c f5       	brge	.+82     	; 0x1394 <main+0x342>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1342:	6f a1       	ldd	r22, Y+39	; 0x27
    1344:	78 a5       	ldd	r23, Y+40	; 0x28
    1346:	89 a5       	ldd	r24, Y+41	; 0x29
    1348:	9a a5       	ldd	r25, Y+42	; 0x2a
    134a:	20 e0       	ldi	r18, 0x00	; 0
    134c:	30 e0       	ldi	r19, 0x00	; 0
    134e:	40 e2       	ldi	r20, 0x20	; 32
    1350:	51 e4       	ldi	r21, 0x41	; 65
    1352:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1356:	dc 01       	movw	r26, r24
    1358:	cb 01       	movw	r24, r22
    135a:	bc 01       	movw	r22, r24
    135c:	cd 01       	movw	r24, r26
    135e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1362:	dc 01       	movw	r26, r24
    1364:	cb 01       	movw	r24, r22
    1366:	9a a3       	std	Y+34, r25	; 0x22
    1368:	89 a3       	std	Y+33, r24	; 0x21
    136a:	0f c0       	rjmp	.+30     	; 0x138a <main+0x338>
    136c:	89 e1       	ldi	r24, 0x19	; 25
    136e:	90 e0       	ldi	r25, 0x00	; 0
    1370:	98 a3       	std	Y+32, r25	; 0x20
    1372:	8f 8f       	std	Y+31, r24	; 0x1f
    1374:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1376:	98 a1       	ldd	r25, Y+32	; 0x20
    1378:	01 97       	sbiw	r24, 0x01	; 1
    137a:	f1 f7       	brne	.-4      	; 0x1378 <main+0x326>
    137c:	98 a3       	std	Y+32, r25	; 0x20
    137e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1380:	89 a1       	ldd	r24, Y+33	; 0x21
    1382:	9a a1       	ldd	r25, Y+34	; 0x22
    1384:	01 97       	sbiw	r24, 0x01	; 1
    1386:	9a a3       	std	Y+34, r25	; 0x22
    1388:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    138a:	89 a1       	ldd	r24, Y+33	; 0x21
    138c:	9a a1       	ldd	r25, Y+34	; 0x22
    138e:	00 97       	sbiw	r24, 0x00	; 0
    1390:	69 f7       	brne	.-38     	; 0x136c <main+0x31a>
    1392:	14 c0       	rjmp	.+40     	; 0x13bc <main+0x36a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1394:	6b a1       	ldd	r22, Y+35	; 0x23
    1396:	7c a1       	ldd	r23, Y+36	; 0x24
    1398:	8d a1       	ldd	r24, Y+37	; 0x25
    139a:	9e a1       	ldd	r25, Y+38	; 0x26
    139c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13a0:	dc 01       	movw	r26, r24
    13a2:	cb 01       	movw	r24, r22
    13a4:	9a a3       	std	Y+34, r25	; 0x22
    13a6:	89 a3       	std	Y+33, r24	; 0x21
    13a8:	89 a1       	ldd	r24, Y+33	; 0x21
    13aa:	9a a1       	ldd	r25, Y+34	; 0x22
    13ac:	9e 8f       	std	Y+30, r25	; 0x1e
    13ae:	8d 8f       	std	Y+29, r24	; 0x1d
    13b0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    13b2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    13b4:	01 97       	sbiw	r24, 0x01	; 1
    13b6:	f1 f7       	brne	.-4      	; 0x13b4 <main+0x362>
    13b8:	9e 8f       	std	Y+30, r25	; 0x1e
    13ba:	8d 8f       	std	Y+29, r24	; 0x1d
				_delay_ms(DISPLAY_MESSAGE_DELAY);


			}
			MainMenu(); /* system back to  display main menu */
    13bc:	0e 94 24 07 	call	0xe48	; 0xe48 <MainMenu>
    13c0:	e4 ce       	rjmp	.-568    	; 0x118a <main+0x138>


		}
		else if (keyPressed == '-')
    13c2:	89 ad       	ldd	r24, Y+57	; 0x39
    13c4:	8d 32       	cpi	r24, 0x2D	; 45
    13c6:	09 f0       	breq	.+2      	; 0x13ca <main+0x378>
    13c8:	e0 ce       	rjmp	.-576    	; 0x118a <main+0x138>
		{
			LCD_clearScreen();
    13ca:	0e 94 e4 13 	call	0x27c8	; 0x27c8 <LCD_clearScreen>
			LCD_displayString("Enter Old CODE");
    13ce:	8c ef       	ldi	r24, 0xFC	; 252
    13d0:	90 e0       	ldi	r25, 0x00	; 0
    13d2:	0e 94 3d 13 	call	0x267a	; 0x267a <LCD_displayString>

			getPASSCODE(g_passcode);
    13d6:	89 e3       	ldi	r24, 0x39	; 57
    13d8:	91 e0       	ldi	r25, 0x01	; 1
    13da:	0e 94 78 06 	call	0xcf0	; 0xcf0 <getPASSCODE>

			/* start sending to Control ECU  */
			UART_sendByte(MC_READY_SEND);
    13de:	85 e1       	ldi	r24, 0x15	; 21
    13e0:	0e 94 94 17 	call	0x2f28	; 0x2f28 <UART_sendByte>

			sendPasscodeByUART(g_passcode);
    13e4:	89 e3       	ldi	r24, 0x39	; 57
    13e6:	91 e0       	ldi	r25, 0x01	; 1
    13e8:	0e 94 3b 07 	call	0xe76	; 0xe76 <sendPasscodeByUART>

			/* inform Control ECU the option that user chose */
			UART_sendByte(CHANGE_PASSCODE_OPTION);
    13ec:	88 e1       	ldi	r24, 0x18	; 24
    13ee:	0e 94 94 17 	call	0x2f28	; 0x2f28 <UART_sendByte>

			byteRecived = UART_reciveByte();
    13f2:	0e 94 ab 17 	call	0x2f56	; 0x2f56 <UART_reciveByte>
    13f6:	8a af       	std	Y+58, r24	; 0x3a
			if (byteRecived == CHANGE_PASSCODE)
    13f8:	8a ad       	ldd	r24, Y+58	; 0x3a
    13fa:	81 33       	cpi	r24, 0x31	; 49
    13fc:	29 f4       	brne	.+10     	; 0x1408 <main+0x3b6>
			{
				PASSCODE_Init();
    13fe:	0e 94 a3 05 	call	0xb46	; 0xb46 <PASSCODE_Init>
				LCD_clearScreen();
    1402:	0e 94 e4 13 	call	0x27c8	; 0x27c8 <LCD_clearScreen>
    1406:	f5 c0       	rjmp	.+490    	; 0x15f2 <main+0x5a0>
			}
			else if (byteRecived == PASSCODE_WRONG)
    1408:	8a ad       	ldd	r24, Y+58	; 0x3a
    140a:	80 33       	cpi	r24, 0x30	; 48
    140c:	09 f0       	breq	.+2      	; 0x1410 <main+0x3be>
    140e:	f1 c0       	rjmp	.+482    	; 0x15f2 <main+0x5a0>
			{
				LCD_clearScreen();
    1410:	0e 94 e4 13 	call	0x27c8	; 0x27c8 <LCD_clearScreen>
				LCD_displayString("Wrong PASSCODE");
    1414:	8b e0       	ldi	r24, 0x0B	; 11
    1416:	91 e0       	ldi	r25, 0x01	; 1
    1418:	0e 94 3d 13 	call	0x267a	; 0x267a <LCD_displayString>
    141c:	80 e0       	ldi	r24, 0x00	; 0
    141e:	90 e4       	ldi	r25, 0x40	; 64
    1420:	ac e9       	ldi	r26, 0x9C	; 156
    1422:	b5 e4       	ldi	r27, 0x45	; 69
    1424:	89 8f       	std	Y+25, r24	; 0x19
    1426:	9a 8f       	std	Y+26, r25	; 0x1a
    1428:	ab 8f       	std	Y+27, r26	; 0x1b
    142a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    142c:	69 8d       	ldd	r22, Y+25	; 0x19
    142e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1430:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1432:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1434:	20 e0       	ldi	r18, 0x00	; 0
    1436:	30 e0       	ldi	r19, 0x00	; 0
    1438:	4a e7       	ldi	r20, 0x7A	; 122
    143a:	53 e4       	ldi	r21, 0x43	; 67
    143c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1440:	dc 01       	movw	r26, r24
    1442:	cb 01       	movw	r24, r22
    1444:	8d 8b       	std	Y+21, r24	; 0x15
    1446:	9e 8b       	std	Y+22, r25	; 0x16
    1448:	af 8b       	std	Y+23, r26	; 0x17
    144a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    144c:	6d 89       	ldd	r22, Y+21	; 0x15
    144e:	7e 89       	ldd	r23, Y+22	; 0x16
    1450:	8f 89       	ldd	r24, Y+23	; 0x17
    1452:	98 8d       	ldd	r25, Y+24	; 0x18
    1454:	20 e0       	ldi	r18, 0x00	; 0
    1456:	30 e0       	ldi	r19, 0x00	; 0
    1458:	40 e8       	ldi	r20, 0x80	; 128
    145a:	5f e3       	ldi	r21, 0x3F	; 63
    145c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1460:	88 23       	and	r24, r24
    1462:	2c f4       	brge	.+10     	; 0x146e <main+0x41c>
		__ticks = 1;
    1464:	81 e0       	ldi	r24, 0x01	; 1
    1466:	90 e0       	ldi	r25, 0x00	; 0
    1468:	9c 8b       	std	Y+20, r25	; 0x14
    146a:	8b 8b       	std	Y+19, r24	; 0x13
    146c:	3f c0       	rjmp	.+126    	; 0x14ec <main+0x49a>
	else if (__tmp > 65535)
    146e:	6d 89       	ldd	r22, Y+21	; 0x15
    1470:	7e 89       	ldd	r23, Y+22	; 0x16
    1472:	8f 89       	ldd	r24, Y+23	; 0x17
    1474:	98 8d       	ldd	r25, Y+24	; 0x18
    1476:	20 e0       	ldi	r18, 0x00	; 0
    1478:	3f ef       	ldi	r19, 0xFF	; 255
    147a:	4f e7       	ldi	r20, 0x7F	; 127
    147c:	57 e4       	ldi	r21, 0x47	; 71
    147e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1482:	18 16       	cp	r1, r24
    1484:	4c f5       	brge	.+82     	; 0x14d8 <main+0x486>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1486:	69 8d       	ldd	r22, Y+25	; 0x19
    1488:	7a 8d       	ldd	r23, Y+26	; 0x1a
    148a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    148c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    148e:	20 e0       	ldi	r18, 0x00	; 0
    1490:	30 e0       	ldi	r19, 0x00	; 0
    1492:	40 e2       	ldi	r20, 0x20	; 32
    1494:	51 e4       	ldi	r21, 0x41	; 65
    1496:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    149a:	dc 01       	movw	r26, r24
    149c:	cb 01       	movw	r24, r22
    149e:	bc 01       	movw	r22, r24
    14a0:	cd 01       	movw	r24, r26
    14a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14a6:	dc 01       	movw	r26, r24
    14a8:	cb 01       	movw	r24, r22
    14aa:	9c 8b       	std	Y+20, r25	; 0x14
    14ac:	8b 8b       	std	Y+19, r24	; 0x13
    14ae:	0f c0       	rjmp	.+30     	; 0x14ce <main+0x47c>
    14b0:	89 e1       	ldi	r24, 0x19	; 25
    14b2:	90 e0       	ldi	r25, 0x00	; 0
    14b4:	9a 8b       	std	Y+18, r25	; 0x12
    14b6:	89 8b       	std	Y+17, r24	; 0x11
    14b8:	89 89       	ldd	r24, Y+17	; 0x11
    14ba:	9a 89       	ldd	r25, Y+18	; 0x12
    14bc:	01 97       	sbiw	r24, 0x01	; 1
    14be:	f1 f7       	brne	.-4      	; 0x14bc <main+0x46a>
    14c0:	9a 8b       	std	Y+18, r25	; 0x12
    14c2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14c4:	8b 89       	ldd	r24, Y+19	; 0x13
    14c6:	9c 89       	ldd	r25, Y+20	; 0x14
    14c8:	01 97       	sbiw	r24, 0x01	; 1
    14ca:	9c 8b       	std	Y+20, r25	; 0x14
    14cc:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14ce:	8b 89       	ldd	r24, Y+19	; 0x13
    14d0:	9c 89       	ldd	r25, Y+20	; 0x14
    14d2:	00 97       	sbiw	r24, 0x00	; 0
    14d4:	69 f7       	brne	.-38     	; 0x14b0 <main+0x45e>
    14d6:	14 c0       	rjmp	.+40     	; 0x1500 <main+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14d8:	6d 89       	ldd	r22, Y+21	; 0x15
    14da:	7e 89       	ldd	r23, Y+22	; 0x16
    14dc:	8f 89       	ldd	r24, Y+23	; 0x17
    14de:	98 8d       	ldd	r25, Y+24	; 0x18
    14e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14e4:	dc 01       	movw	r26, r24
    14e6:	cb 01       	movw	r24, r22
    14e8:	9c 8b       	std	Y+20, r25	; 0x14
    14ea:	8b 8b       	std	Y+19, r24	; 0x13
    14ec:	8b 89       	ldd	r24, Y+19	; 0x13
    14ee:	9c 89       	ldd	r25, Y+20	; 0x14
    14f0:	98 8b       	std	Y+16, r25	; 0x10
    14f2:	8f 87       	std	Y+15, r24	; 0x0f
    14f4:	8f 85       	ldd	r24, Y+15	; 0x0f
    14f6:	98 89       	ldd	r25, Y+16	; 0x10
    14f8:	01 97       	sbiw	r24, 0x01	; 1
    14fa:	f1 f7       	brne	.-4      	; 0x14f8 <main+0x4a6>
    14fc:	98 8b       	std	Y+16, r25	; 0x10
    14fe:	8f 87       	std	Y+15, r24	; 0x0f
				_delay_ms(DISPLAY_MESSAGE_DELAY);
				LCD_displayStringRowColumn(1,0,"Enter Correct code");
    1500:	29 ee       	ldi	r18, 0xE9	; 233
    1502:	30 e0       	ldi	r19, 0x00	; 0
    1504:	81 e0       	ldi	r24, 0x01	; 1
    1506:	60 e0       	ldi	r22, 0x00	; 0
    1508:	a9 01       	movw	r20, r18
    150a:	0e 94 a8 13 	call	0x2750	; 0x2750 <LCD_displayStringRowColumn>
    150e:	80 e0       	ldi	r24, 0x00	; 0
    1510:	90 e4       	ldi	r25, 0x40	; 64
    1512:	ac e9       	ldi	r26, 0x9C	; 156
    1514:	b5 e4       	ldi	r27, 0x45	; 69
    1516:	8b 87       	std	Y+11, r24	; 0x0b
    1518:	9c 87       	std	Y+12, r25	; 0x0c
    151a:	ad 87       	std	Y+13, r26	; 0x0d
    151c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    151e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1520:	7c 85       	ldd	r23, Y+12	; 0x0c
    1522:	8d 85       	ldd	r24, Y+13	; 0x0d
    1524:	9e 85       	ldd	r25, Y+14	; 0x0e
    1526:	20 e0       	ldi	r18, 0x00	; 0
    1528:	30 e0       	ldi	r19, 0x00	; 0
    152a:	4a e7       	ldi	r20, 0x7A	; 122
    152c:	53 e4       	ldi	r21, 0x43	; 67
    152e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1532:	dc 01       	movw	r26, r24
    1534:	cb 01       	movw	r24, r22
    1536:	8f 83       	std	Y+7, r24	; 0x07
    1538:	98 87       	std	Y+8, r25	; 0x08
    153a:	a9 87       	std	Y+9, r26	; 0x09
    153c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    153e:	6f 81       	ldd	r22, Y+7	; 0x07
    1540:	78 85       	ldd	r23, Y+8	; 0x08
    1542:	89 85       	ldd	r24, Y+9	; 0x09
    1544:	9a 85       	ldd	r25, Y+10	; 0x0a
    1546:	20 e0       	ldi	r18, 0x00	; 0
    1548:	30 e0       	ldi	r19, 0x00	; 0
    154a:	40 e8       	ldi	r20, 0x80	; 128
    154c:	5f e3       	ldi	r21, 0x3F	; 63
    154e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1552:	88 23       	and	r24, r24
    1554:	2c f4       	brge	.+10     	; 0x1560 <main+0x50e>
		__ticks = 1;
    1556:	81 e0       	ldi	r24, 0x01	; 1
    1558:	90 e0       	ldi	r25, 0x00	; 0
    155a:	9e 83       	std	Y+6, r25	; 0x06
    155c:	8d 83       	std	Y+5, r24	; 0x05
    155e:	3f c0       	rjmp	.+126    	; 0x15de <main+0x58c>
	else if (__tmp > 65535)
    1560:	6f 81       	ldd	r22, Y+7	; 0x07
    1562:	78 85       	ldd	r23, Y+8	; 0x08
    1564:	89 85       	ldd	r24, Y+9	; 0x09
    1566:	9a 85       	ldd	r25, Y+10	; 0x0a
    1568:	20 e0       	ldi	r18, 0x00	; 0
    156a:	3f ef       	ldi	r19, 0xFF	; 255
    156c:	4f e7       	ldi	r20, 0x7F	; 127
    156e:	57 e4       	ldi	r21, 0x47	; 71
    1570:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1574:	18 16       	cp	r1, r24
    1576:	4c f5       	brge	.+82     	; 0x15ca <main+0x578>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1578:	6b 85       	ldd	r22, Y+11	; 0x0b
    157a:	7c 85       	ldd	r23, Y+12	; 0x0c
    157c:	8d 85       	ldd	r24, Y+13	; 0x0d
    157e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1580:	20 e0       	ldi	r18, 0x00	; 0
    1582:	30 e0       	ldi	r19, 0x00	; 0
    1584:	40 e2       	ldi	r20, 0x20	; 32
    1586:	51 e4       	ldi	r21, 0x41	; 65
    1588:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    158c:	dc 01       	movw	r26, r24
    158e:	cb 01       	movw	r24, r22
    1590:	bc 01       	movw	r22, r24
    1592:	cd 01       	movw	r24, r26
    1594:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1598:	dc 01       	movw	r26, r24
    159a:	cb 01       	movw	r24, r22
    159c:	9e 83       	std	Y+6, r25	; 0x06
    159e:	8d 83       	std	Y+5, r24	; 0x05
    15a0:	0f c0       	rjmp	.+30     	; 0x15c0 <main+0x56e>
    15a2:	89 e1       	ldi	r24, 0x19	; 25
    15a4:	90 e0       	ldi	r25, 0x00	; 0
    15a6:	9c 83       	std	Y+4, r25	; 0x04
    15a8:	8b 83       	std	Y+3, r24	; 0x03
    15aa:	8b 81       	ldd	r24, Y+3	; 0x03
    15ac:	9c 81       	ldd	r25, Y+4	; 0x04
    15ae:	01 97       	sbiw	r24, 0x01	; 1
    15b0:	f1 f7       	brne	.-4      	; 0x15ae <main+0x55c>
    15b2:	9c 83       	std	Y+4, r25	; 0x04
    15b4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15b6:	8d 81       	ldd	r24, Y+5	; 0x05
    15b8:	9e 81       	ldd	r25, Y+6	; 0x06
    15ba:	01 97       	sbiw	r24, 0x01	; 1
    15bc:	9e 83       	std	Y+6, r25	; 0x06
    15be:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15c0:	8d 81       	ldd	r24, Y+5	; 0x05
    15c2:	9e 81       	ldd	r25, Y+6	; 0x06
    15c4:	00 97       	sbiw	r24, 0x00	; 0
    15c6:	69 f7       	brne	.-38     	; 0x15a2 <main+0x550>
    15c8:	14 c0       	rjmp	.+40     	; 0x15f2 <main+0x5a0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15ca:	6f 81       	ldd	r22, Y+7	; 0x07
    15cc:	78 85       	ldd	r23, Y+8	; 0x08
    15ce:	89 85       	ldd	r24, Y+9	; 0x09
    15d0:	9a 85       	ldd	r25, Y+10	; 0x0a
    15d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15d6:	dc 01       	movw	r26, r24
    15d8:	cb 01       	movw	r24, r22
    15da:	9e 83       	std	Y+6, r25	; 0x06
    15dc:	8d 83       	std	Y+5, r24	; 0x05
    15de:	8d 81       	ldd	r24, Y+5	; 0x05
    15e0:	9e 81       	ldd	r25, Y+6	; 0x06
    15e2:	9a 83       	std	Y+2, r25	; 0x02
    15e4:	89 83       	std	Y+1, r24	; 0x01
    15e6:	89 81       	ldd	r24, Y+1	; 0x01
    15e8:	9a 81       	ldd	r25, Y+2	; 0x02
    15ea:	01 97       	sbiw	r24, 0x01	; 1
    15ec:	f1 f7       	brne	.-4      	; 0x15ea <main+0x598>
    15ee:	9a 83       	std	Y+2, r25	; 0x02
    15f0:	89 83       	std	Y+1, r24	; 0x01
				_delay_ms(DISPLAY_MESSAGE_DELAY);
			}
			MainMenu();
    15f2:	0e 94 24 07 	call	0xe48	; 0xe48 <MainMenu>
    15f6:	c9 cd       	rjmp	.-1134   	; 0x118a <main+0x138>

000015f8 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    15f8:	df 93       	push	r29
    15fa:	cf 93       	push	r28
    15fc:	00 d0       	rcall	.+0      	; 0x15fe <GPIO_setupPinDirection+0x6>
    15fe:	00 d0       	rcall	.+0      	; 0x1600 <GPIO_setupPinDirection+0x8>
    1600:	0f 92       	push	r0
    1602:	cd b7       	in	r28, 0x3d	; 61
    1604:	de b7       	in	r29, 0x3e	; 62
    1606:	89 83       	std	Y+1, r24	; 0x01
    1608:	6a 83       	std	Y+2, r22	; 0x02
    160a:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    160c:	8a 81       	ldd	r24, Y+2	; 0x02
    160e:	88 30       	cpi	r24, 0x08	; 8
    1610:	08 f0       	brcs	.+2      	; 0x1614 <GPIO_setupPinDirection+0x1c>
    1612:	d5 c0       	rjmp	.+426    	; 0x17be <GPIO_setupPinDirection+0x1c6>
    1614:	89 81       	ldd	r24, Y+1	; 0x01
    1616:	84 30       	cpi	r24, 0x04	; 4
    1618:	08 f0       	brcs	.+2      	; 0x161c <GPIO_setupPinDirection+0x24>
    161a:	d1 c0       	rjmp	.+418    	; 0x17be <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    161c:	89 81       	ldd	r24, Y+1	; 0x01
    161e:	28 2f       	mov	r18, r24
    1620:	30 e0       	ldi	r19, 0x00	; 0
    1622:	3d 83       	std	Y+5, r19	; 0x05
    1624:	2c 83       	std	Y+4, r18	; 0x04
    1626:	8c 81       	ldd	r24, Y+4	; 0x04
    1628:	9d 81       	ldd	r25, Y+5	; 0x05
    162a:	81 30       	cpi	r24, 0x01	; 1
    162c:	91 05       	cpc	r25, r1
    162e:	09 f4       	brne	.+2      	; 0x1632 <GPIO_setupPinDirection+0x3a>
    1630:	43 c0       	rjmp	.+134    	; 0x16b8 <GPIO_setupPinDirection+0xc0>
    1632:	2c 81       	ldd	r18, Y+4	; 0x04
    1634:	3d 81       	ldd	r19, Y+5	; 0x05
    1636:	22 30       	cpi	r18, 0x02	; 2
    1638:	31 05       	cpc	r19, r1
    163a:	2c f4       	brge	.+10     	; 0x1646 <GPIO_setupPinDirection+0x4e>
    163c:	8c 81       	ldd	r24, Y+4	; 0x04
    163e:	9d 81       	ldd	r25, Y+5	; 0x05
    1640:	00 97       	sbiw	r24, 0x00	; 0
    1642:	71 f0       	breq	.+28     	; 0x1660 <GPIO_setupPinDirection+0x68>
    1644:	bc c0       	rjmp	.+376    	; 0x17be <GPIO_setupPinDirection+0x1c6>
    1646:	2c 81       	ldd	r18, Y+4	; 0x04
    1648:	3d 81       	ldd	r19, Y+5	; 0x05
    164a:	22 30       	cpi	r18, 0x02	; 2
    164c:	31 05       	cpc	r19, r1
    164e:	09 f4       	brne	.+2      	; 0x1652 <GPIO_setupPinDirection+0x5a>
    1650:	5f c0       	rjmp	.+190    	; 0x1710 <GPIO_setupPinDirection+0x118>
    1652:	8c 81       	ldd	r24, Y+4	; 0x04
    1654:	9d 81       	ldd	r25, Y+5	; 0x05
    1656:	83 30       	cpi	r24, 0x03	; 3
    1658:	91 05       	cpc	r25, r1
    165a:	09 f4       	brne	.+2      	; 0x165e <GPIO_setupPinDirection+0x66>
    165c:	85 c0       	rjmp	.+266    	; 0x1768 <GPIO_setupPinDirection+0x170>
    165e:	af c0       	rjmp	.+350    	; 0x17be <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    1660:	8b 81       	ldd	r24, Y+3	; 0x03
    1662:	81 30       	cpi	r24, 0x01	; 1
    1664:	a1 f4       	brne	.+40     	; 0x168e <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    1666:	aa e3       	ldi	r26, 0x3A	; 58
    1668:	b0 e0       	ldi	r27, 0x00	; 0
    166a:	ea e3       	ldi	r30, 0x3A	; 58
    166c:	f0 e0       	ldi	r31, 0x00	; 0
    166e:	80 81       	ld	r24, Z
    1670:	48 2f       	mov	r20, r24
    1672:	8a 81       	ldd	r24, Y+2	; 0x02
    1674:	28 2f       	mov	r18, r24
    1676:	30 e0       	ldi	r19, 0x00	; 0
    1678:	81 e0       	ldi	r24, 0x01	; 1
    167a:	90 e0       	ldi	r25, 0x00	; 0
    167c:	02 2e       	mov	r0, r18
    167e:	02 c0       	rjmp	.+4      	; 0x1684 <GPIO_setupPinDirection+0x8c>
    1680:	88 0f       	add	r24, r24
    1682:	99 1f       	adc	r25, r25
    1684:	0a 94       	dec	r0
    1686:	e2 f7       	brpl	.-8      	; 0x1680 <GPIO_setupPinDirection+0x88>
    1688:	84 2b       	or	r24, r20
    168a:	8c 93       	st	X, r24
    168c:	98 c0       	rjmp	.+304    	; 0x17be <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    168e:	aa e3       	ldi	r26, 0x3A	; 58
    1690:	b0 e0       	ldi	r27, 0x00	; 0
    1692:	ea e3       	ldi	r30, 0x3A	; 58
    1694:	f0 e0       	ldi	r31, 0x00	; 0
    1696:	80 81       	ld	r24, Z
    1698:	48 2f       	mov	r20, r24
    169a:	8a 81       	ldd	r24, Y+2	; 0x02
    169c:	28 2f       	mov	r18, r24
    169e:	30 e0       	ldi	r19, 0x00	; 0
    16a0:	81 e0       	ldi	r24, 0x01	; 1
    16a2:	90 e0       	ldi	r25, 0x00	; 0
    16a4:	02 2e       	mov	r0, r18
    16a6:	02 c0       	rjmp	.+4      	; 0x16ac <GPIO_setupPinDirection+0xb4>
    16a8:	88 0f       	add	r24, r24
    16aa:	99 1f       	adc	r25, r25
    16ac:	0a 94       	dec	r0
    16ae:	e2 f7       	brpl	.-8      	; 0x16a8 <GPIO_setupPinDirection+0xb0>
    16b0:	80 95       	com	r24
    16b2:	84 23       	and	r24, r20
    16b4:	8c 93       	st	X, r24
    16b6:	83 c0       	rjmp	.+262    	; 0x17be <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    16b8:	8b 81       	ldd	r24, Y+3	; 0x03
    16ba:	81 30       	cpi	r24, 0x01	; 1
    16bc:	a1 f4       	brne	.+40     	; 0x16e6 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    16be:	a7 e3       	ldi	r26, 0x37	; 55
    16c0:	b0 e0       	ldi	r27, 0x00	; 0
    16c2:	e7 e3       	ldi	r30, 0x37	; 55
    16c4:	f0 e0       	ldi	r31, 0x00	; 0
    16c6:	80 81       	ld	r24, Z
    16c8:	48 2f       	mov	r20, r24
    16ca:	8a 81       	ldd	r24, Y+2	; 0x02
    16cc:	28 2f       	mov	r18, r24
    16ce:	30 e0       	ldi	r19, 0x00	; 0
    16d0:	81 e0       	ldi	r24, 0x01	; 1
    16d2:	90 e0       	ldi	r25, 0x00	; 0
    16d4:	02 2e       	mov	r0, r18
    16d6:	02 c0       	rjmp	.+4      	; 0x16dc <GPIO_setupPinDirection+0xe4>
    16d8:	88 0f       	add	r24, r24
    16da:	99 1f       	adc	r25, r25
    16dc:	0a 94       	dec	r0
    16de:	e2 f7       	brpl	.-8      	; 0x16d8 <GPIO_setupPinDirection+0xe0>
    16e0:	84 2b       	or	r24, r20
    16e2:	8c 93       	st	X, r24
    16e4:	6c c0       	rjmp	.+216    	; 0x17be <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    16e6:	a7 e3       	ldi	r26, 0x37	; 55
    16e8:	b0 e0       	ldi	r27, 0x00	; 0
    16ea:	e7 e3       	ldi	r30, 0x37	; 55
    16ec:	f0 e0       	ldi	r31, 0x00	; 0
    16ee:	80 81       	ld	r24, Z
    16f0:	48 2f       	mov	r20, r24
    16f2:	8a 81       	ldd	r24, Y+2	; 0x02
    16f4:	28 2f       	mov	r18, r24
    16f6:	30 e0       	ldi	r19, 0x00	; 0
    16f8:	81 e0       	ldi	r24, 0x01	; 1
    16fa:	90 e0       	ldi	r25, 0x00	; 0
    16fc:	02 2e       	mov	r0, r18
    16fe:	02 c0       	rjmp	.+4      	; 0x1704 <GPIO_setupPinDirection+0x10c>
    1700:	88 0f       	add	r24, r24
    1702:	99 1f       	adc	r25, r25
    1704:	0a 94       	dec	r0
    1706:	e2 f7       	brpl	.-8      	; 0x1700 <GPIO_setupPinDirection+0x108>
    1708:	80 95       	com	r24
    170a:	84 23       	and	r24, r20
    170c:	8c 93       	st	X, r24
    170e:	57 c0       	rjmp	.+174    	; 0x17be <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    1710:	8b 81       	ldd	r24, Y+3	; 0x03
    1712:	81 30       	cpi	r24, 0x01	; 1
    1714:	a1 f4       	brne	.+40     	; 0x173e <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    1716:	a4 e3       	ldi	r26, 0x34	; 52
    1718:	b0 e0       	ldi	r27, 0x00	; 0
    171a:	e4 e3       	ldi	r30, 0x34	; 52
    171c:	f0 e0       	ldi	r31, 0x00	; 0
    171e:	80 81       	ld	r24, Z
    1720:	48 2f       	mov	r20, r24
    1722:	8a 81       	ldd	r24, Y+2	; 0x02
    1724:	28 2f       	mov	r18, r24
    1726:	30 e0       	ldi	r19, 0x00	; 0
    1728:	81 e0       	ldi	r24, 0x01	; 1
    172a:	90 e0       	ldi	r25, 0x00	; 0
    172c:	02 2e       	mov	r0, r18
    172e:	02 c0       	rjmp	.+4      	; 0x1734 <GPIO_setupPinDirection+0x13c>
    1730:	88 0f       	add	r24, r24
    1732:	99 1f       	adc	r25, r25
    1734:	0a 94       	dec	r0
    1736:	e2 f7       	brpl	.-8      	; 0x1730 <GPIO_setupPinDirection+0x138>
    1738:	84 2b       	or	r24, r20
    173a:	8c 93       	st	X, r24
    173c:	40 c0       	rjmp	.+128    	; 0x17be <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    173e:	a4 e3       	ldi	r26, 0x34	; 52
    1740:	b0 e0       	ldi	r27, 0x00	; 0
    1742:	e4 e3       	ldi	r30, 0x34	; 52
    1744:	f0 e0       	ldi	r31, 0x00	; 0
    1746:	80 81       	ld	r24, Z
    1748:	48 2f       	mov	r20, r24
    174a:	8a 81       	ldd	r24, Y+2	; 0x02
    174c:	28 2f       	mov	r18, r24
    174e:	30 e0       	ldi	r19, 0x00	; 0
    1750:	81 e0       	ldi	r24, 0x01	; 1
    1752:	90 e0       	ldi	r25, 0x00	; 0
    1754:	02 2e       	mov	r0, r18
    1756:	02 c0       	rjmp	.+4      	; 0x175c <GPIO_setupPinDirection+0x164>
    1758:	88 0f       	add	r24, r24
    175a:	99 1f       	adc	r25, r25
    175c:	0a 94       	dec	r0
    175e:	e2 f7       	brpl	.-8      	; 0x1758 <GPIO_setupPinDirection+0x160>
    1760:	80 95       	com	r24
    1762:	84 23       	and	r24, r20
    1764:	8c 93       	st	X, r24
    1766:	2b c0       	rjmp	.+86     	; 0x17be <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    1768:	8b 81       	ldd	r24, Y+3	; 0x03
    176a:	81 30       	cpi	r24, 0x01	; 1
    176c:	a1 f4       	brne	.+40     	; 0x1796 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    176e:	a1 e3       	ldi	r26, 0x31	; 49
    1770:	b0 e0       	ldi	r27, 0x00	; 0
    1772:	e1 e3       	ldi	r30, 0x31	; 49
    1774:	f0 e0       	ldi	r31, 0x00	; 0
    1776:	80 81       	ld	r24, Z
    1778:	48 2f       	mov	r20, r24
    177a:	8a 81       	ldd	r24, Y+2	; 0x02
    177c:	28 2f       	mov	r18, r24
    177e:	30 e0       	ldi	r19, 0x00	; 0
    1780:	81 e0       	ldi	r24, 0x01	; 1
    1782:	90 e0       	ldi	r25, 0x00	; 0
    1784:	02 2e       	mov	r0, r18
    1786:	02 c0       	rjmp	.+4      	; 0x178c <GPIO_setupPinDirection+0x194>
    1788:	88 0f       	add	r24, r24
    178a:	99 1f       	adc	r25, r25
    178c:	0a 94       	dec	r0
    178e:	e2 f7       	brpl	.-8      	; 0x1788 <GPIO_setupPinDirection+0x190>
    1790:	84 2b       	or	r24, r20
    1792:	8c 93       	st	X, r24
    1794:	14 c0       	rjmp	.+40     	; 0x17be <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    1796:	a1 e3       	ldi	r26, 0x31	; 49
    1798:	b0 e0       	ldi	r27, 0x00	; 0
    179a:	e1 e3       	ldi	r30, 0x31	; 49
    179c:	f0 e0       	ldi	r31, 0x00	; 0
    179e:	80 81       	ld	r24, Z
    17a0:	48 2f       	mov	r20, r24
    17a2:	8a 81       	ldd	r24, Y+2	; 0x02
    17a4:	28 2f       	mov	r18, r24
    17a6:	30 e0       	ldi	r19, 0x00	; 0
    17a8:	81 e0       	ldi	r24, 0x01	; 1
    17aa:	90 e0       	ldi	r25, 0x00	; 0
    17ac:	02 2e       	mov	r0, r18
    17ae:	02 c0       	rjmp	.+4      	; 0x17b4 <GPIO_setupPinDirection+0x1bc>
    17b0:	88 0f       	add	r24, r24
    17b2:	99 1f       	adc	r25, r25
    17b4:	0a 94       	dec	r0
    17b6:	e2 f7       	brpl	.-8      	; 0x17b0 <GPIO_setupPinDirection+0x1b8>
    17b8:	80 95       	com	r24
    17ba:	84 23       	and	r24, r20
    17bc:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    17be:	0f 90       	pop	r0
    17c0:	0f 90       	pop	r0
    17c2:	0f 90       	pop	r0
    17c4:	0f 90       	pop	r0
    17c6:	0f 90       	pop	r0
    17c8:	cf 91       	pop	r28
    17ca:	df 91       	pop	r29
    17cc:	08 95       	ret

000017ce <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    17ce:	df 93       	push	r29
    17d0:	cf 93       	push	r28
    17d2:	00 d0       	rcall	.+0      	; 0x17d4 <GPIO_writePin+0x6>
    17d4:	00 d0       	rcall	.+0      	; 0x17d6 <GPIO_writePin+0x8>
    17d6:	0f 92       	push	r0
    17d8:	cd b7       	in	r28, 0x3d	; 61
    17da:	de b7       	in	r29, 0x3e	; 62
    17dc:	89 83       	std	Y+1, r24	; 0x01
    17de:	6a 83       	std	Y+2, r22	; 0x02
    17e0:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    17e2:	8a 81       	ldd	r24, Y+2	; 0x02
    17e4:	88 30       	cpi	r24, 0x08	; 8
    17e6:	08 f0       	brcs	.+2      	; 0x17ea <GPIO_writePin+0x1c>
    17e8:	d5 c0       	rjmp	.+426    	; 0x1994 <GPIO_writePin+0x1c6>
    17ea:	89 81       	ldd	r24, Y+1	; 0x01
    17ec:	84 30       	cpi	r24, 0x04	; 4
    17ee:	08 f0       	brcs	.+2      	; 0x17f2 <GPIO_writePin+0x24>
    17f0:	d1 c0       	rjmp	.+418    	; 0x1994 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    17f2:	89 81       	ldd	r24, Y+1	; 0x01
    17f4:	28 2f       	mov	r18, r24
    17f6:	30 e0       	ldi	r19, 0x00	; 0
    17f8:	3d 83       	std	Y+5, r19	; 0x05
    17fa:	2c 83       	std	Y+4, r18	; 0x04
    17fc:	8c 81       	ldd	r24, Y+4	; 0x04
    17fe:	9d 81       	ldd	r25, Y+5	; 0x05
    1800:	81 30       	cpi	r24, 0x01	; 1
    1802:	91 05       	cpc	r25, r1
    1804:	09 f4       	brne	.+2      	; 0x1808 <GPIO_writePin+0x3a>
    1806:	43 c0       	rjmp	.+134    	; 0x188e <GPIO_writePin+0xc0>
    1808:	2c 81       	ldd	r18, Y+4	; 0x04
    180a:	3d 81       	ldd	r19, Y+5	; 0x05
    180c:	22 30       	cpi	r18, 0x02	; 2
    180e:	31 05       	cpc	r19, r1
    1810:	2c f4       	brge	.+10     	; 0x181c <GPIO_writePin+0x4e>
    1812:	8c 81       	ldd	r24, Y+4	; 0x04
    1814:	9d 81       	ldd	r25, Y+5	; 0x05
    1816:	00 97       	sbiw	r24, 0x00	; 0
    1818:	71 f0       	breq	.+28     	; 0x1836 <GPIO_writePin+0x68>
    181a:	bc c0       	rjmp	.+376    	; 0x1994 <GPIO_writePin+0x1c6>
    181c:	2c 81       	ldd	r18, Y+4	; 0x04
    181e:	3d 81       	ldd	r19, Y+5	; 0x05
    1820:	22 30       	cpi	r18, 0x02	; 2
    1822:	31 05       	cpc	r19, r1
    1824:	09 f4       	brne	.+2      	; 0x1828 <GPIO_writePin+0x5a>
    1826:	5f c0       	rjmp	.+190    	; 0x18e6 <GPIO_writePin+0x118>
    1828:	8c 81       	ldd	r24, Y+4	; 0x04
    182a:	9d 81       	ldd	r25, Y+5	; 0x05
    182c:	83 30       	cpi	r24, 0x03	; 3
    182e:	91 05       	cpc	r25, r1
    1830:	09 f4       	brne	.+2      	; 0x1834 <GPIO_writePin+0x66>
    1832:	85 c0       	rjmp	.+266    	; 0x193e <GPIO_writePin+0x170>
    1834:	af c0       	rjmp	.+350    	; 0x1994 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    1836:	8b 81       	ldd	r24, Y+3	; 0x03
    1838:	81 30       	cpi	r24, 0x01	; 1
    183a:	a1 f4       	brne	.+40     	; 0x1864 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    183c:	ab e3       	ldi	r26, 0x3B	; 59
    183e:	b0 e0       	ldi	r27, 0x00	; 0
    1840:	eb e3       	ldi	r30, 0x3B	; 59
    1842:	f0 e0       	ldi	r31, 0x00	; 0
    1844:	80 81       	ld	r24, Z
    1846:	48 2f       	mov	r20, r24
    1848:	8a 81       	ldd	r24, Y+2	; 0x02
    184a:	28 2f       	mov	r18, r24
    184c:	30 e0       	ldi	r19, 0x00	; 0
    184e:	81 e0       	ldi	r24, 0x01	; 1
    1850:	90 e0       	ldi	r25, 0x00	; 0
    1852:	02 2e       	mov	r0, r18
    1854:	02 c0       	rjmp	.+4      	; 0x185a <GPIO_writePin+0x8c>
    1856:	88 0f       	add	r24, r24
    1858:	99 1f       	adc	r25, r25
    185a:	0a 94       	dec	r0
    185c:	e2 f7       	brpl	.-8      	; 0x1856 <GPIO_writePin+0x88>
    185e:	84 2b       	or	r24, r20
    1860:	8c 93       	st	X, r24
    1862:	98 c0       	rjmp	.+304    	; 0x1994 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    1864:	ab e3       	ldi	r26, 0x3B	; 59
    1866:	b0 e0       	ldi	r27, 0x00	; 0
    1868:	eb e3       	ldi	r30, 0x3B	; 59
    186a:	f0 e0       	ldi	r31, 0x00	; 0
    186c:	80 81       	ld	r24, Z
    186e:	48 2f       	mov	r20, r24
    1870:	8a 81       	ldd	r24, Y+2	; 0x02
    1872:	28 2f       	mov	r18, r24
    1874:	30 e0       	ldi	r19, 0x00	; 0
    1876:	81 e0       	ldi	r24, 0x01	; 1
    1878:	90 e0       	ldi	r25, 0x00	; 0
    187a:	02 2e       	mov	r0, r18
    187c:	02 c0       	rjmp	.+4      	; 0x1882 <GPIO_writePin+0xb4>
    187e:	88 0f       	add	r24, r24
    1880:	99 1f       	adc	r25, r25
    1882:	0a 94       	dec	r0
    1884:	e2 f7       	brpl	.-8      	; 0x187e <GPIO_writePin+0xb0>
    1886:	80 95       	com	r24
    1888:	84 23       	and	r24, r20
    188a:	8c 93       	st	X, r24
    188c:	83 c0       	rjmp	.+262    	; 0x1994 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    188e:	8b 81       	ldd	r24, Y+3	; 0x03
    1890:	81 30       	cpi	r24, 0x01	; 1
    1892:	a1 f4       	brne	.+40     	; 0x18bc <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    1894:	a8 e3       	ldi	r26, 0x38	; 56
    1896:	b0 e0       	ldi	r27, 0x00	; 0
    1898:	e8 e3       	ldi	r30, 0x38	; 56
    189a:	f0 e0       	ldi	r31, 0x00	; 0
    189c:	80 81       	ld	r24, Z
    189e:	48 2f       	mov	r20, r24
    18a0:	8a 81       	ldd	r24, Y+2	; 0x02
    18a2:	28 2f       	mov	r18, r24
    18a4:	30 e0       	ldi	r19, 0x00	; 0
    18a6:	81 e0       	ldi	r24, 0x01	; 1
    18a8:	90 e0       	ldi	r25, 0x00	; 0
    18aa:	02 2e       	mov	r0, r18
    18ac:	02 c0       	rjmp	.+4      	; 0x18b2 <GPIO_writePin+0xe4>
    18ae:	88 0f       	add	r24, r24
    18b0:	99 1f       	adc	r25, r25
    18b2:	0a 94       	dec	r0
    18b4:	e2 f7       	brpl	.-8      	; 0x18ae <GPIO_writePin+0xe0>
    18b6:	84 2b       	or	r24, r20
    18b8:	8c 93       	st	X, r24
    18ba:	6c c0       	rjmp	.+216    	; 0x1994 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    18bc:	a8 e3       	ldi	r26, 0x38	; 56
    18be:	b0 e0       	ldi	r27, 0x00	; 0
    18c0:	e8 e3       	ldi	r30, 0x38	; 56
    18c2:	f0 e0       	ldi	r31, 0x00	; 0
    18c4:	80 81       	ld	r24, Z
    18c6:	48 2f       	mov	r20, r24
    18c8:	8a 81       	ldd	r24, Y+2	; 0x02
    18ca:	28 2f       	mov	r18, r24
    18cc:	30 e0       	ldi	r19, 0x00	; 0
    18ce:	81 e0       	ldi	r24, 0x01	; 1
    18d0:	90 e0       	ldi	r25, 0x00	; 0
    18d2:	02 2e       	mov	r0, r18
    18d4:	02 c0       	rjmp	.+4      	; 0x18da <GPIO_writePin+0x10c>
    18d6:	88 0f       	add	r24, r24
    18d8:	99 1f       	adc	r25, r25
    18da:	0a 94       	dec	r0
    18dc:	e2 f7       	brpl	.-8      	; 0x18d6 <GPIO_writePin+0x108>
    18de:	80 95       	com	r24
    18e0:	84 23       	and	r24, r20
    18e2:	8c 93       	st	X, r24
    18e4:	57 c0       	rjmp	.+174    	; 0x1994 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    18e6:	8b 81       	ldd	r24, Y+3	; 0x03
    18e8:	81 30       	cpi	r24, 0x01	; 1
    18ea:	a1 f4       	brne	.+40     	; 0x1914 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    18ec:	a5 e3       	ldi	r26, 0x35	; 53
    18ee:	b0 e0       	ldi	r27, 0x00	; 0
    18f0:	e5 e3       	ldi	r30, 0x35	; 53
    18f2:	f0 e0       	ldi	r31, 0x00	; 0
    18f4:	80 81       	ld	r24, Z
    18f6:	48 2f       	mov	r20, r24
    18f8:	8a 81       	ldd	r24, Y+2	; 0x02
    18fa:	28 2f       	mov	r18, r24
    18fc:	30 e0       	ldi	r19, 0x00	; 0
    18fe:	81 e0       	ldi	r24, 0x01	; 1
    1900:	90 e0       	ldi	r25, 0x00	; 0
    1902:	02 2e       	mov	r0, r18
    1904:	02 c0       	rjmp	.+4      	; 0x190a <GPIO_writePin+0x13c>
    1906:	88 0f       	add	r24, r24
    1908:	99 1f       	adc	r25, r25
    190a:	0a 94       	dec	r0
    190c:	e2 f7       	brpl	.-8      	; 0x1906 <GPIO_writePin+0x138>
    190e:	84 2b       	or	r24, r20
    1910:	8c 93       	st	X, r24
    1912:	40 c0       	rjmp	.+128    	; 0x1994 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    1914:	a5 e3       	ldi	r26, 0x35	; 53
    1916:	b0 e0       	ldi	r27, 0x00	; 0
    1918:	e5 e3       	ldi	r30, 0x35	; 53
    191a:	f0 e0       	ldi	r31, 0x00	; 0
    191c:	80 81       	ld	r24, Z
    191e:	48 2f       	mov	r20, r24
    1920:	8a 81       	ldd	r24, Y+2	; 0x02
    1922:	28 2f       	mov	r18, r24
    1924:	30 e0       	ldi	r19, 0x00	; 0
    1926:	81 e0       	ldi	r24, 0x01	; 1
    1928:	90 e0       	ldi	r25, 0x00	; 0
    192a:	02 2e       	mov	r0, r18
    192c:	02 c0       	rjmp	.+4      	; 0x1932 <GPIO_writePin+0x164>
    192e:	88 0f       	add	r24, r24
    1930:	99 1f       	adc	r25, r25
    1932:	0a 94       	dec	r0
    1934:	e2 f7       	brpl	.-8      	; 0x192e <GPIO_writePin+0x160>
    1936:	80 95       	com	r24
    1938:	84 23       	and	r24, r20
    193a:	8c 93       	st	X, r24
    193c:	2b c0       	rjmp	.+86     	; 0x1994 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    193e:	8b 81       	ldd	r24, Y+3	; 0x03
    1940:	81 30       	cpi	r24, 0x01	; 1
    1942:	a1 f4       	brne	.+40     	; 0x196c <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    1944:	a2 e3       	ldi	r26, 0x32	; 50
    1946:	b0 e0       	ldi	r27, 0x00	; 0
    1948:	e2 e3       	ldi	r30, 0x32	; 50
    194a:	f0 e0       	ldi	r31, 0x00	; 0
    194c:	80 81       	ld	r24, Z
    194e:	48 2f       	mov	r20, r24
    1950:	8a 81       	ldd	r24, Y+2	; 0x02
    1952:	28 2f       	mov	r18, r24
    1954:	30 e0       	ldi	r19, 0x00	; 0
    1956:	81 e0       	ldi	r24, 0x01	; 1
    1958:	90 e0       	ldi	r25, 0x00	; 0
    195a:	02 2e       	mov	r0, r18
    195c:	02 c0       	rjmp	.+4      	; 0x1962 <GPIO_writePin+0x194>
    195e:	88 0f       	add	r24, r24
    1960:	99 1f       	adc	r25, r25
    1962:	0a 94       	dec	r0
    1964:	e2 f7       	brpl	.-8      	; 0x195e <GPIO_writePin+0x190>
    1966:	84 2b       	or	r24, r20
    1968:	8c 93       	st	X, r24
    196a:	14 c0       	rjmp	.+40     	; 0x1994 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    196c:	a2 e3       	ldi	r26, 0x32	; 50
    196e:	b0 e0       	ldi	r27, 0x00	; 0
    1970:	e2 e3       	ldi	r30, 0x32	; 50
    1972:	f0 e0       	ldi	r31, 0x00	; 0
    1974:	80 81       	ld	r24, Z
    1976:	48 2f       	mov	r20, r24
    1978:	8a 81       	ldd	r24, Y+2	; 0x02
    197a:	28 2f       	mov	r18, r24
    197c:	30 e0       	ldi	r19, 0x00	; 0
    197e:	81 e0       	ldi	r24, 0x01	; 1
    1980:	90 e0       	ldi	r25, 0x00	; 0
    1982:	02 2e       	mov	r0, r18
    1984:	02 c0       	rjmp	.+4      	; 0x198a <GPIO_writePin+0x1bc>
    1986:	88 0f       	add	r24, r24
    1988:	99 1f       	adc	r25, r25
    198a:	0a 94       	dec	r0
    198c:	e2 f7       	brpl	.-8      	; 0x1986 <GPIO_writePin+0x1b8>
    198e:	80 95       	com	r24
    1990:	84 23       	and	r24, r20
    1992:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1994:	0f 90       	pop	r0
    1996:	0f 90       	pop	r0
    1998:	0f 90       	pop	r0
    199a:	0f 90       	pop	r0
    199c:	0f 90       	pop	r0
    199e:	cf 91       	pop	r28
    19a0:	df 91       	pop	r29
    19a2:	08 95       	ret

000019a4 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    19a4:	df 93       	push	r29
    19a6:	cf 93       	push	r28
    19a8:	00 d0       	rcall	.+0      	; 0x19aa <GPIO_readPin+0x6>
    19aa:	00 d0       	rcall	.+0      	; 0x19ac <GPIO_readPin+0x8>
    19ac:	0f 92       	push	r0
    19ae:	cd b7       	in	r28, 0x3d	; 61
    19b0:	de b7       	in	r29, 0x3e	; 62
    19b2:	8a 83       	std	Y+2, r24	; 0x02
    19b4:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    19b6:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    19b8:	8b 81       	ldd	r24, Y+3	; 0x03
    19ba:	88 30       	cpi	r24, 0x08	; 8
    19bc:	08 f0       	brcs	.+2      	; 0x19c0 <GPIO_readPin+0x1c>
    19be:	84 c0       	rjmp	.+264    	; 0x1ac8 <GPIO_readPin+0x124>
    19c0:	8a 81       	ldd	r24, Y+2	; 0x02
    19c2:	84 30       	cpi	r24, 0x04	; 4
    19c4:	08 f0       	brcs	.+2      	; 0x19c8 <GPIO_readPin+0x24>
    19c6:	80 c0       	rjmp	.+256    	; 0x1ac8 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    19c8:	8a 81       	ldd	r24, Y+2	; 0x02
    19ca:	28 2f       	mov	r18, r24
    19cc:	30 e0       	ldi	r19, 0x00	; 0
    19ce:	3d 83       	std	Y+5, r19	; 0x05
    19d0:	2c 83       	std	Y+4, r18	; 0x04
    19d2:	4c 81       	ldd	r20, Y+4	; 0x04
    19d4:	5d 81       	ldd	r21, Y+5	; 0x05
    19d6:	41 30       	cpi	r20, 0x01	; 1
    19d8:	51 05       	cpc	r21, r1
    19da:	79 f1       	breq	.+94     	; 0x1a3a <GPIO_readPin+0x96>
    19dc:	8c 81       	ldd	r24, Y+4	; 0x04
    19de:	9d 81       	ldd	r25, Y+5	; 0x05
    19e0:	82 30       	cpi	r24, 0x02	; 2
    19e2:	91 05       	cpc	r25, r1
    19e4:	34 f4       	brge	.+12     	; 0x19f2 <GPIO_readPin+0x4e>
    19e6:	2c 81       	ldd	r18, Y+4	; 0x04
    19e8:	3d 81       	ldd	r19, Y+5	; 0x05
    19ea:	21 15       	cp	r18, r1
    19ec:	31 05       	cpc	r19, r1
    19ee:	69 f0       	breq	.+26     	; 0x1a0a <GPIO_readPin+0x66>
    19f0:	6b c0       	rjmp	.+214    	; 0x1ac8 <GPIO_readPin+0x124>
    19f2:	4c 81       	ldd	r20, Y+4	; 0x04
    19f4:	5d 81       	ldd	r21, Y+5	; 0x05
    19f6:	42 30       	cpi	r20, 0x02	; 2
    19f8:	51 05       	cpc	r21, r1
    19fa:	b9 f1       	breq	.+110    	; 0x1a6a <GPIO_readPin+0xc6>
    19fc:	8c 81       	ldd	r24, Y+4	; 0x04
    19fe:	9d 81       	ldd	r25, Y+5	; 0x05
    1a00:	83 30       	cpi	r24, 0x03	; 3
    1a02:	91 05       	cpc	r25, r1
    1a04:	09 f4       	brne	.+2      	; 0x1a08 <GPIO_readPin+0x64>
    1a06:	49 c0       	rjmp	.+146    	; 0x1a9a <GPIO_readPin+0xf6>
    1a08:	5f c0       	rjmp	.+190    	; 0x1ac8 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    1a0a:	e9 e3       	ldi	r30, 0x39	; 57
    1a0c:	f0 e0       	ldi	r31, 0x00	; 0
    1a0e:	80 81       	ld	r24, Z
    1a10:	28 2f       	mov	r18, r24
    1a12:	30 e0       	ldi	r19, 0x00	; 0
    1a14:	8b 81       	ldd	r24, Y+3	; 0x03
    1a16:	88 2f       	mov	r24, r24
    1a18:	90 e0       	ldi	r25, 0x00	; 0
    1a1a:	a9 01       	movw	r20, r18
    1a1c:	02 c0       	rjmp	.+4      	; 0x1a22 <GPIO_readPin+0x7e>
    1a1e:	55 95       	asr	r21
    1a20:	47 95       	ror	r20
    1a22:	8a 95       	dec	r24
    1a24:	e2 f7       	brpl	.-8      	; 0x1a1e <GPIO_readPin+0x7a>
    1a26:	ca 01       	movw	r24, r20
    1a28:	81 70       	andi	r24, 0x01	; 1
    1a2a:	90 70       	andi	r25, 0x00	; 0
    1a2c:	88 23       	and	r24, r24
    1a2e:	19 f0       	breq	.+6      	; 0x1a36 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    1a30:	81 e0       	ldi	r24, 0x01	; 1
    1a32:	89 83       	std	Y+1, r24	; 0x01
    1a34:	49 c0       	rjmp	.+146    	; 0x1ac8 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1a36:	19 82       	std	Y+1, r1	; 0x01
    1a38:	47 c0       	rjmp	.+142    	; 0x1ac8 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    1a3a:	e6 e3       	ldi	r30, 0x36	; 54
    1a3c:	f0 e0       	ldi	r31, 0x00	; 0
    1a3e:	80 81       	ld	r24, Z
    1a40:	28 2f       	mov	r18, r24
    1a42:	30 e0       	ldi	r19, 0x00	; 0
    1a44:	8b 81       	ldd	r24, Y+3	; 0x03
    1a46:	88 2f       	mov	r24, r24
    1a48:	90 e0       	ldi	r25, 0x00	; 0
    1a4a:	a9 01       	movw	r20, r18
    1a4c:	02 c0       	rjmp	.+4      	; 0x1a52 <GPIO_readPin+0xae>
    1a4e:	55 95       	asr	r21
    1a50:	47 95       	ror	r20
    1a52:	8a 95       	dec	r24
    1a54:	e2 f7       	brpl	.-8      	; 0x1a4e <GPIO_readPin+0xaa>
    1a56:	ca 01       	movw	r24, r20
    1a58:	81 70       	andi	r24, 0x01	; 1
    1a5a:	90 70       	andi	r25, 0x00	; 0
    1a5c:	88 23       	and	r24, r24
    1a5e:	19 f0       	breq	.+6      	; 0x1a66 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    1a60:	81 e0       	ldi	r24, 0x01	; 1
    1a62:	89 83       	std	Y+1, r24	; 0x01
    1a64:	31 c0       	rjmp	.+98     	; 0x1ac8 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1a66:	19 82       	std	Y+1, r1	; 0x01
    1a68:	2f c0       	rjmp	.+94     	; 0x1ac8 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    1a6a:	e3 e3       	ldi	r30, 0x33	; 51
    1a6c:	f0 e0       	ldi	r31, 0x00	; 0
    1a6e:	80 81       	ld	r24, Z
    1a70:	28 2f       	mov	r18, r24
    1a72:	30 e0       	ldi	r19, 0x00	; 0
    1a74:	8b 81       	ldd	r24, Y+3	; 0x03
    1a76:	88 2f       	mov	r24, r24
    1a78:	90 e0       	ldi	r25, 0x00	; 0
    1a7a:	a9 01       	movw	r20, r18
    1a7c:	02 c0       	rjmp	.+4      	; 0x1a82 <GPIO_readPin+0xde>
    1a7e:	55 95       	asr	r21
    1a80:	47 95       	ror	r20
    1a82:	8a 95       	dec	r24
    1a84:	e2 f7       	brpl	.-8      	; 0x1a7e <GPIO_readPin+0xda>
    1a86:	ca 01       	movw	r24, r20
    1a88:	81 70       	andi	r24, 0x01	; 1
    1a8a:	90 70       	andi	r25, 0x00	; 0
    1a8c:	88 23       	and	r24, r24
    1a8e:	19 f0       	breq	.+6      	; 0x1a96 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    1a90:	81 e0       	ldi	r24, 0x01	; 1
    1a92:	89 83       	std	Y+1, r24	; 0x01
    1a94:	19 c0       	rjmp	.+50     	; 0x1ac8 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1a96:	19 82       	std	Y+1, r1	; 0x01
    1a98:	17 c0       	rjmp	.+46     	; 0x1ac8 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    1a9a:	e0 e3       	ldi	r30, 0x30	; 48
    1a9c:	f0 e0       	ldi	r31, 0x00	; 0
    1a9e:	80 81       	ld	r24, Z
    1aa0:	28 2f       	mov	r18, r24
    1aa2:	30 e0       	ldi	r19, 0x00	; 0
    1aa4:	8b 81       	ldd	r24, Y+3	; 0x03
    1aa6:	88 2f       	mov	r24, r24
    1aa8:	90 e0       	ldi	r25, 0x00	; 0
    1aaa:	a9 01       	movw	r20, r18
    1aac:	02 c0       	rjmp	.+4      	; 0x1ab2 <GPIO_readPin+0x10e>
    1aae:	55 95       	asr	r21
    1ab0:	47 95       	ror	r20
    1ab2:	8a 95       	dec	r24
    1ab4:	e2 f7       	brpl	.-8      	; 0x1aae <GPIO_readPin+0x10a>
    1ab6:	ca 01       	movw	r24, r20
    1ab8:	81 70       	andi	r24, 0x01	; 1
    1aba:	90 70       	andi	r25, 0x00	; 0
    1abc:	88 23       	and	r24, r24
    1abe:	19 f0       	breq	.+6      	; 0x1ac6 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    1ac0:	81 e0       	ldi	r24, 0x01	; 1
    1ac2:	89 83       	std	Y+1, r24	; 0x01
    1ac4:	01 c0       	rjmp	.+2      	; 0x1ac8 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1ac6:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    1ac8:	89 81       	ldd	r24, Y+1	; 0x01
}
    1aca:	0f 90       	pop	r0
    1acc:	0f 90       	pop	r0
    1ace:	0f 90       	pop	r0
    1ad0:	0f 90       	pop	r0
    1ad2:	0f 90       	pop	r0
    1ad4:	cf 91       	pop	r28
    1ad6:	df 91       	pop	r29
    1ad8:	08 95       	ret

00001ada <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1ada:	df 93       	push	r29
    1adc:	cf 93       	push	r28
    1ade:	00 d0       	rcall	.+0      	; 0x1ae0 <GPIO_setupPortDirection+0x6>
    1ae0:	00 d0       	rcall	.+0      	; 0x1ae2 <GPIO_setupPortDirection+0x8>
    1ae2:	cd b7       	in	r28, 0x3d	; 61
    1ae4:	de b7       	in	r29, 0x3e	; 62
    1ae6:	89 83       	std	Y+1, r24	; 0x01
    1ae8:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1aea:	89 81       	ldd	r24, Y+1	; 0x01
    1aec:	84 30       	cpi	r24, 0x04	; 4
    1aee:	90 f5       	brcc	.+100    	; 0x1b54 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    1af0:	89 81       	ldd	r24, Y+1	; 0x01
    1af2:	28 2f       	mov	r18, r24
    1af4:	30 e0       	ldi	r19, 0x00	; 0
    1af6:	3c 83       	std	Y+4, r19	; 0x04
    1af8:	2b 83       	std	Y+3, r18	; 0x03
    1afa:	8b 81       	ldd	r24, Y+3	; 0x03
    1afc:	9c 81       	ldd	r25, Y+4	; 0x04
    1afe:	81 30       	cpi	r24, 0x01	; 1
    1b00:	91 05       	cpc	r25, r1
    1b02:	d1 f0       	breq	.+52     	; 0x1b38 <GPIO_setupPortDirection+0x5e>
    1b04:	2b 81       	ldd	r18, Y+3	; 0x03
    1b06:	3c 81       	ldd	r19, Y+4	; 0x04
    1b08:	22 30       	cpi	r18, 0x02	; 2
    1b0a:	31 05       	cpc	r19, r1
    1b0c:	2c f4       	brge	.+10     	; 0x1b18 <GPIO_setupPortDirection+0x3e>
    1b0e:	8b 81       	ldd	r24, Y+3	; 0x03
    1b10:	9c 81       	ldd	r25, Y+4	; 0x04
    1b12:	00 97       	sbiw	r24, 0x00	; 0
    1b14:	61 f0       	breq	.+24     	; 0x1b2e <GPIO_setupPortDirection+0x54>
    1b16:	1e c0       	rjmp	.+60     	; 0x1b54 <GPIO_setupPortDirection+0x7a>
    1b18:	2b 81       	ldd	r18, Y+3	; 0x03
    1b1a:	3c 81       	ldd	r19, Y+4	; 0x04
    1b1c:	22 30       	cpi	r18, 0x02	; 2
    1b1e:	31 05       	cpc	r19, r1
    1b20:	81 f0       	breq	.+32     	; 0x1b42 <GPIO_setupPortDirection+0x68>
    1b22:	8b 81       	ldd	r24, Y+3	; 0x03
    1b24:	9c 81       	ldd	r25, Y+4	; 0x04
    1b26:	83 30       	cpi	r24, 0x03	; 3
    1b28:	91 05       	cpc	r25, r1
    1b2a:	81 f0       	breq	.+32     	; 0x1b4c <GPIO_setupPortDirection+0x72>
    1b2c:	13 c0       	rjmp	.+38     	; 0x1b54 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    1b2e:	ea e3       	ldi	r30, 0x3A	; 58
    1b30:	f0 e0       	ldi	r31, 0x00	; 0
    1b32:	8a 81       	ldd	r24, Y+2	; 0x02
    1b34:	80 83       	st	Z, r24
    1b36:	0e c0       	rjmp	.+28     	; 0x1b54 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1b38:	e7 e3       	ldi	r30, 0x37	; 55
    1b3a:	f0 e0       	ldi	r31, 0x00	; 0
    1b3c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b3e:	80 83       	st	Z, r24
    1b40:	09 c0       	rjmp	.+18     	; 0x1b54 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1b42:	e4 e3       	ldi	r30, 0x34	; 52
    1b44:	f0 e0       	ldi	r31, 0x00	; 0
    1b46:	8a 81       	ldd	r24, Y+2	; 0x02
    1b48:	80 83       	st	Z, r24
    1b4a:	04 c0       	rjmp	.+8      	; 0x1b54 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1b4c:	e1 e3       	ldi	r30, 0x31	; 49
    1b4e:	f0 e0       	ldi	r31, 0x00	; 0
    1b50:	8a 81       	ldd	r24, Y+2	; 0x02
    1b52:	80 83       	st	Z, r24
			break;
		}
	}
}
    1b54:	0f 90       	pop	r0
    1b56:	0f 90       	pop	r0
    1b58:	0f 90       	pop	r0
    1b5a:	0f 90       	pop	r0
    1b5c:	cf 91       	pop	r28
    1b5e:	df 91       	pop	r29
    1b60:	08 95       	ret

00001b62 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    1b62:	df 93       	push	r29
    1b64:	cf 93       	push	r28
    1b66:	00 d0       	rcall	.+0      	; 0x1b68 <GPIO_writePort+0x6>
    1b68:	00 d0       	rcall	.+0      	; 0x1b6a <GPIO_writePort+0x8>
    1b6a:	cd b7       	in	r28, 0x3d	; 61
    1b6c:	de b7       	in	r29, 0x3e	; 62
    1b6e:	89 83       	std	Y+1, r24	; 0x01
    1b70:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1b72:	89 81       	ldd	r24, Y+1	; 0x01
    1b74:	84 30       	cpi	r24, 0x04	; 4
    1b76:	90 f5       	brcc	.+100    	; 0x1bdc <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    1b78:	89 81       	ldd	r24, Y+1	; 0x01
    1b7a:	28 2f       	mov	r18, r24
    1b7c:	30 e0       	ldi	r19, 0x00	; 0
    1b7e:	3c 83       	std	Y+4, r19	; 0x04
    1b80:	2b 83       	std	Y+3, r18	; 0x03
    1b82:	8b 81       	ldd	r24, Y+3	; 0x03
    1b84:	9c 81       	ldd	r25, Y+4	; 0x04
    1b86:	81 30       	cpi	r24, 0x01	; 1
    1b88:	91 05       	cpc	r25, r1
    1b8a:	d1 f0       	breq	.+52     	; 0x1bc0 <GPIO_writePort+0x5e>
    1b8c:	2b 81       	ldd	r18, Y+3	; 0x03
    1b8e:	3c 81       	ldd	r19, Y+4	; 0x04
    1b90:	22 30       	cpi	r18, 0x02	; 2
    1b92:	31 05       	cpc	r19, r1
    1b94:	2c f4       	brge	.+10     	; 0x1ba0 <GPIO_writePort+0x3e>
    1b96:	8b 81       	ldd	r24, Y+3	; 0x03
    1b98:	9c 81       	ldd	r25, Y+4	; 0x04
    1b9a:	00 97       	sbiw	r24, 0x00	; 0
    1b9c:	61 f0       	breq	.+24     	; 0x1bb6 <GPIO_writePort+0x54>
    1b9e:	1e c0       	rjmp	.+60     	; 0x1bdc <GPIO_writePort+0x7a>
    1ba0:	2b 81       	ldd	r18, Y+3	; 0x03
    1ba2:	3c 81       	ldd	r19, Y+4	; 0x04
    1ba4:	22 30       	cpi	r18, 0x02	; 2
    1ba6:	31 05       	cpc	r19, r1
    1ba8:	81 f0       	breq	.+32     	; 0x1bca <GPIO_writePort+0x68>
    1baa:	8b 81       	ldd	r24, Y+3	; 0x03
    1bac:	9c 81       	ldd	r25, Y+4	; 0x04
    1bae:	83 30       	cpi	r24, 0x03	; 3
    1bb0:	91 05       	cpc	r25, r1
    1bb2:	81 f0       	breq	.+32     	; 0x1bd4 <GPIO_writePort+0x72>
    1bb4:	13 c0       	rjmp	.+38     	; 0x1bdc <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    1bb6:	eb e3       	ldi	r30, 0x3B	; 59
    1bb8:	f0 e0       	ldi	r31, 0x00	; 0
    1bba:	8a 81       	ldd	r24, Y+2	; 0x02
    1bbc:	80 83       	st	Z, r24
    1bbe:	0e c0       	rjmp	.+28     	; 0x1bdc <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    1bc0:	e8 e3       	ldi	r30, 0x38	; 56
    1bc2:	f0 e0       	ldi	r31, 0x00	; 0
    1bc4:	8a 81       	ldd	r24, Y+2	; 0x02
    1bc6:	80 83       	st	Z, r24
    1bc8:	09 c0       	rjmp	.+18     	; 0x1bdc <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1bca:	e5 e3       	ldi	r30, 0x35	; 53
    1bcc:	f0 e0       	ldi	r31, 0x00	; 0
    1bce:	8a 81       	ldd	r24, Y+2	; 0x02
    1bd0:	80 83       	st	Z, r24
    1bd2:	04 c0       	rjmp	.+8      	; 0x1bdc <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1bd4:	e2 e3       	ldi	r30, 0x32	; 50
    1bd6:	f0 e0       	ldi	r31, 0x00	; 0
    1bd8:	8a 81       	ldd	r24, Y+2	; 0x02
    1bda:	80 83       	st	Z, r24
			break;
		}
	}
}
    1bdc:	0f 90       	pop	r0
    1bde:	0f 90       	pop	r0
    1be0:	0f 90       	pop	r0
    1be2:	0f 90       	pop	r0
    1be4:	cf 91       	pop	r28
    1be6:	df 91       	pop	r29
    1be8:	08 95       	ret

00001bea <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1bea:	df 93       	push	r29
    1bec:	cf 93       	push	r28
    1bee:	00 d0       	rcall	.+0      	; 0x1bf0 <GPIO_readPort+0x6>
    1bf0:	00 d0       	rcall	.+0      	; 0x1bf2 <GPIO_readPort+0x8>
    1bf2:	cd b7       	in	r28, 0x3d	; 61
    1bf4:	de b7       	in	r29, 0x3e	; 62
    1bf6:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    1bf8:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1bfa:	8a 81       	ldd	r24, Y+2	; 0x02
    1bfc:	84 30       	cpi	r24, 0x04	; 4
    1bfe:	90 f5       	brcc	.+100    	; 0x1c64 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    1c00:	8a 81       	ldd	r24, Y+2	; 0x02
    1c02:	28 2f       	mov	r18, r24
    1c04:	30 e0       	ldi	r19, 0x00	; 0
    1c06:	3c 83       	std	Y+4, r19	; 0x04
    1c08:	2b 83       	std	Y+3, r18	; 0x03
    1c0a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c0c:	9c 81       	ldd	r25, Y+4	; 0x04
    1c0e:	81 30       	cpi	r24, 0x01	; 1
    1c10:	91 05       	cpc	r25, r1
    1c12:	d1 f0       	breq	.+52     	; 0x1c48 <GPIO_readPort+0x5e>
    1c14:	2b 81       	ldd	r18, Y+3	; 0x03
    1c16:	3c 81       	ldd	r19, Y+4	; 0x04
    1c18:	22 30       	cpi	r18, 0x02	; 2
    1c1a:	31 05       	cpc	r19, r1
    1c1c:	2c f4       	brge	.+10     	; 0x1c28 <GPIO_readPort+0x3e>
    1c1e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c20:	9c 81       	ldd	r25, Y+4	; 0x04
    1c22:	00 97       	sbiw	r24, 0x00	; 0
    1c24:	61 f0       	breq	.+24     	; 0x1c3e <GPIO_readPort+0x54>
    1c26:	1e c0       	rjmp	.+60     	; 0x1c64 <GPIO_readPort+0x7a>
    1c28:	2b 81       	ldd	r18, Y+3	; 0x03
    1c2a:	3c 81       	ldd	r19, Y+4	; 0x04
    1c2c:	22 30       	cpi	r18, 0x02	; 2
    1c2e:	31 05       	cpc	r19, r1
    1c30:	81 f0       	breq	.+32     	; 0x1c52 <GPIO_readPort+0x68>
    1c32:	8b 81       	ldd	r24, Y+3	; 0x03
    1c34:	9c 81       	ldd	r25, Y+4	; 0x04
    1c36:	83 30       	cpi	r24, 0x03	; 3
    1c38:	91 05       	cpc	r25, r1
    1c3a:	81 f0       	breq	.+32     	; 0x1c5c <GPIO_readPort+0x72>
    1c3c:	13 c0       	rjmp	.+38     	; 0x1c64 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    1c3e:	e9 e3       	ldi	r30, 0x39	; 57
    1c40:	f0 e0       	ldi	r31, 0x00	; 0
    1c42:	80 81       	ld	r24, Z
    1c44:	89 83       	std	Y+1, r24	; 0x01
    1c46:	0e c0       	rjmp	.+28     	; 0x1c64 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    1c48:	e6 e3       	ldi	r30, 0x36	; 54
    1c4a:	f0 e0       	ldi	r31, 0x00	; 0
    1c4c:	80 81       	ld	r24, Z
    1c4e:	89 83       	std	Y+1, r24	; 0x01
    1c50:	09 c0       	rjmp	.+18     	; 0x1c64 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    1c52:	e3 e3       	ldi	r30, 0x33	; 51
    1c54:	f0 e0       	ldi	r31, 0x00	; 0
    1c56:	80 81       	ld	r24, Z
    1c58:	89 83       	std	Y+1, r24	; 0x01
    1c5a:	04 c0       	rjmp	.+8      	; 0x1c64 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    1c5c:	e0 e3       	ldi	r30, 0x30	; 48
    1c5e:	f0 e0       	ldi	r31, 0x00	; 0
    1c60:	80 81       	ld	r24, Z
    1c62:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    1c64:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c66:	0f 90       	pop	r0
    1c68:	0f 90       	pop	r0
    1c6a:	0f 90       	pop	r0
    1c6c:	0f 90       	pop	r0
    1c6e:	cf 91       	pop	r28
    1c70:	df 91       	pop	r29
    1c72:	08 95       	ret

00001c74 <KEYPAD_getPressedKey>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
uint8 KEYPAD_getPressedKey(void)
{
    1c74:	df 93       	push	r29
    1c76:	cf 93       	push	r28
    1c78:	00 d0       	rcall	.+0      	; 0x1c7a <KEYPAD_getPressedKey+0x6>
    1c7a:	0f 92       	push	r0
    1c7c:	cd b7       	in	r28, 0x3d	; 61
    1c7e:	de b7       	in	r29, 0x3e	; 62
	uint8 col,row;
	uint8 keypad_port_value = 0;
    1c80:	19 82       	std	Y+1, r1	; 0x01
	while(1)
	{
		for(col=0;col<KEYPAD_NUM_COLS;col++) /* loop for columns */
    1c82:	1b 82       	std	Y+3, r1	; 0x03
    1c84:	43 c0       	rjmp	.+134    	; 0x1d0c <KEYPAD_getPressedKey+0x98>
		{
			/* 
			 * Each time setup the direction for all keypad port as input pins,
			 * except this column will be output pin
			 */
			GPIO_setupPortDirection(KEYPAD_PORT_ID,PORT_INPUT);
    1c86:	80 e0       	ldi	r24, 0x00	; 0
    1c88:	60 e0       	ldi	r22, 0x00	; 0
    1c8a:	0e 94 6d 0d 	call	0x1ada	; 0x1ada <GPIO_setupPortDirection>
			GPIO_setupPinDirection(KEYPAD_PORT_ID,KEYPAD_FIRST_COLUMN_PIN_ID+col,PIN_OUTPUT);
    1c8e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c90:	98 2f       	mov	r25, r24
    1c92:	9c 5f       	subi	r25, 0xFC	; 252
    1c94:	80 e0       	ldi	r24, 0x00	; 0
    1c96:	69 2f       	mov	r22, r25
    1c98:	41 e0       	ldi	r20, 0x01	; 1
    1c9a:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <GPIO_setupPinDirection>
			
#if(KEYPAD_BUTTON_PRESSED == LOGIC_LOW)
			/* Clear the column output pin and set the rest pins value */
			keypad_port_value = ~(1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
    1c9e:	8b 81       	ldd	r24, Y+3	; 0x03
    1ca0:	88 2f       	mov	r24, r24
    1ca2:	90 e0       	ldi	r25, 0x00	; 0
    1ca4:	9c 01       	movw	r18, r24
    1ca6:	2c 5f       	subi	r18, 0xFC	; 252
    1ca8:	3f 4f       	sbci	r19, 0xFF	; 255
    1caa:	81 e0       	ldi	r24, 0x01	; 1
    1cac:	90 e0       	ldi	r25, 0x00	; 0
    1cae:	02 c0       	rjmp	.+4      	; 0x1cb4 <KEYPAD_getPressedKey+0x40>
    1cb0:	88 0f       	add	r24, r24
    1cb2:	99 1f       	adc	r25, r25
    1cb4:	2a 95       	dec	r18
    1cb6:	e2 f7       	brpl	.-8      	; 0x1cb0 <KEYPAD_getPressedKey+0x3c>
    1cb8:	80 95       	com	r24
    1cba:	89 83       	std	Y+1, r24	; 0x01
#else
			/* Set the column output pin and clear the rest pins value */
			keypad_port_value = (1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
#endif
			GPIO_writePort(KEYPAD_PORT_ID,keypad_port_value);
    1cbc:	80 e0       	ldi	r24, 0x00	; 0
    1cbe:	69 81       	ldd	r22, Y+1	; 0x01
    1cc0:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <GPIO_writePort>

			for(row=0;row<KEYPAD_NUM_ROWS;row++) /* loop for rows */
    1cc4:	1a 82       	std	Y+2, r1	; 0x02
    1cc6:	1c c0       	rjmp	.+56     	; 0x1d00 <KEYPAD_getPressedKey+0x8c>
			{
				/* Check if the switch is pressed in this row */
				if(GPIO_readPin(KEYPAD_PORT_ID,row+KEYPAD_FIRST_ROW_PIN_ID) == KEYPAD_BUTTON_PRESSED)
    1cc8:	80 e0       	ldi	r24, 0x00	; 0
    1cca:	6a 81       	ldd	r22, Y+2	; 0x02
    1ccc:	0e 94 d2 0c 	call	0x19a4	; 0x19a4 <GPIO_readPin>
    1cd0:	88 23       	and	r24, r24
    1cd2:	99 f4       	brne	.+38     	; 0x1cfa <KEYPAD_getPressedKey+0x86>
				{
					#if (KEYPAD_NUM_COLS == 3)
						return KEYPAD_4x3_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
					#elif (KEYPAD_NUM_COLS == 4)
						return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    1cd4:	8a 81       	ldd	r24, Y+2	; 0x02
    1cd6:	88 2f       	mov	r24, r24
    1cd8:	90 e0       	ldi	r25, 0x00	; 0
    1cda:	88 0f       	add	r24, r24
    1cdc:	99 1f       	adc	r25, r25
    1cde:	88 0f       	add	r24, r24
    1ce0:	99 1f       	adc	r25, r25
    1ce2:	98 2f       	mov	r25, r24
    1ce4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ce6:	89 0f       	add	r24, r25
    1ce8:	8f 5f       	subi	r24, 0xFF	; 255
    1cea:	0e 94 8b 0e 	call	0x1d16	; 0x1d16 <KEYPAD_4x4_adjustKeyNumber>
					#endif
				}
			}
		}
	}	
}
    1cee:	0f 90       	pop	r0
    1cf0:	0f 90       	pop	r0
    1cf2:	0f 90       	pop	r0
    1cf4:	cf 91       	pop	r28
    1cf6:	df 91       	pop	r29
    1cf8:	08 95       	ret
			/* Set the column output pin and clear the rest pins value */
			keypad_port_value = (1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
#endif
			GPIO_writePort(KEYPAD_PORT_ID,keypad_port_value);

			for(row=0;row<KEYPAD_NUM_ROWS;row++) /* loop for rows */
    1cfa:	8a 81       	ldd	r24, Y+2	; 0x02
    1cfc:	8f 5f       	subi	r24, 0xFF	; 255
    1cfe:	8a 83       	std	Y+2, r24	; 0x02
    1d00:	8a 81       	ldd	r24, Y+2	; 0x02
    1d02:	84 30       	cpi	r24, 0x04	; 4
    1d04:	08 f3       	brcs	.-62     	; 0x1cc8 <KEYPAD_getPressedKey+0x54>
{
	uint8 col,row;
	uint8 keypad_port_value = 0;
	while(1)
	{
		for(col=0;col<KEYPAD_NUM_COLS;col++) /* loop for columns */
    1d06:	8b 81       	ldd	r24, Y+3	; 0x03
    1d08:	8f 5f       	subi	r24, 0xFF	; 255
    1d0a:	8b 83       	std	Y+3, r24	; 0x03
    1d0c:	8b 81       	ldd	r24, Y+3	; 0x03
    1d0e:	84 30       	cpi	r24, 0x04	; 4
    1d10:	08 f4       	brcc	.+2      	; 0x1d14 <KEYPAD_getPressedKey+0xa0>
    1d12:	b9 cf       	rjmp	.-142    	; 0x1c86 <KEYPAD_getPressedKey+0x12>
    1d14:	b6 cf       	rjmp	.-148    	; 0x1c82 <KEYPAD_getPressedKey+0xe>

00001d16 <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    1d16:	df 93       	push	r29
    1d18:	cf 93       	push	r28
    1d1a:	00 d0       	rcall	.+0      	; 0x1d1c <KEYPAD_4x4_adjustKeyNumber+0x6>
    1d1c:	00 d0       	rcall	.+0      	; 0x1d1e <KEYPAD_4x4_adjustKeyNumber+0x8>
    1d1e:	cd b7       	in	r28, 0x3d	; 61
    1d20:	de b7       	in	r29, 0x3e	; 62
    1d22:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    1d24:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    1d26:	8a 81       	ldd	r24, Y+2	; 0x02
    1d28:	28 2f       	mov	r18, r24
    1d2a:	30 e0       	ldi	r19, 0x00	; 0
    1d2c:	3c 83       	std	Y+4, r19	; 0x04
    1d2e:	2b 83       	std	Y+3, r18	; 0x03
    1d30:	8b 81       	ldd	r24, Y+3	; 0x03
    1d32:	9c 81       	ldd	r25, Y+4	; 0x04
    1d34:	88 30       	cpi	r24, 0x08	; 8
    1d36:	91 05       	cpc	r25, r1
    1d38:	09 f4       	brne	.+2      	; 0x1d3c <KEYPAD_4x4_adjustKeyNumber+0x26>
    1d3a:	70 c0       	rjmp	.+224    	; 0x1e1c <KEYPAD_4x4_adjustKeyNumber+0x106>
    1d3c:	2b 81       	ldd	r18, Y+3	; 0x03
    1d3e:	3c 81       	ldd	r19, Y+4	; 0x04
    1d40:	29 30       	cpi	r18, 0x09	; 9
    1d42:	31 05       	cpc	r19, r1
    1d44:	5c f5       	brge	.+86     	; 0x1d9c <KEYPAD_4x4_adjustKeyNumber+0x86>
    1d46:	8b 81       	ldd	r24, Y+3	; 0x03
    1d48:	9c 81       	ldd	r25, Y+4	; 0x04
    1d4a:	84 30       	cpi	r24, 0x04	; 4
    1d4c:	91 05       	cpc	r25, r1
    1d4e:	09 f4       	brne	.+2      	; 0x1d52 <KEYPAD_4x4_adjustKeyNumber+0x3c>
    1d50:	59 c0       	rjmp	.+178    	; 0x1e04 <KEYPAD_4x4_adjustKeyNumber+0xee>
    1d52:	2b 81       	ldd	r18, Y+3	; 0x03
    1d54:	3c 81       	ldd	r19, Y+4	; 0x04
    1d56:	25 30       	cpi	r18, 0x05	; 5
    1d58:	31 05       	cpc	r19, r1
    1d5a:	9c f4       	brge	.+38     	; 0x1d82 <KEYPAD_4x4_adjustKeyNumber+0x6c>
    1d5c:	8b 81       	ldd	r24, Y+3	; 0x03
    1d5e:	9c 81       	ldd	r25, Y+4	; 0x04
    1d60:	82 30       	cpi	r24, 0x02	; 2
    1d62:	91 05       	cpc	r25, r1
    1d64:	09 f4       	brne	.+2      	; 0x1d68 <KEYPAD_4x4_adjustKeyNumber+0x52>
    1d66:	48 c0       	rjmp	.+144    	; 0x1df8 <KEYPAD_4x4_adjustKeyNumber+0xe2>
    1d68:	2b 81       	ldd	r18, Y+3	; 0x03
    1d6a:	3c 81       	ldd	r19, Y+4	; 0x04
    1d6c:	23 30       	cpi	r18, 0x03	; 3
    1d6e:	31 05       	cpc	r19, r1
    1d70:	0c f0       	brlt	.+2      	; 0x1d74 <KEYPAD_4x4_adjustKeyNumber+0x5e>
    1d72:	45 c0       	rjmp	.+138    	; 0x1dfe <KEYPAD_4x4_adjustKeyNumber+0xe8>
    1d74:	8b 81       	ldd	r24, Y+3	; 0x03
    1d76:	9c 81       	ldd	r25, Y+4	; 0x04
    1d78:	81 30       	cpi	r24, 0x01	; 1
    1d7a:	91 05       	cpc	r25, r1
    1d7c:	09 f4       	brne	.+2      	; 0x1d80 <KEYPAD_4x4_adjustKeyNumber+0x6a>
    1d7e:	39 c0       	rjmp	.+114    	; 0x1df2 <KEYPAD_4x4_adjustKeyNumber+0xdc>
    1d80:	67 c0       	rjmp	.+206    	; 0x1e50 <KEYPAD_4x4_adjustKeyNumber+0x13a>
    1d82:	2b 81       	ldd	r18, Y+3	; 0x03
    1d84:	3c 81       	ldd	r19, Y+4	; 0x04
    1d86:	26 30       	cpi	r18, 0x06	; 6
    1d88:	31 05       	cpc	r19, r1
    1d8a:	09 f4       	brne	.+2      	; 0x1d8e <KEYPAD_4x4_adjustKeyNumber+0x78>
    1d8c:	41 c0       	rjmp	.+130    	; 0x1e10 <KEYPAD_4x4_adjustKeyNumber+0xfa>
    1d8e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d90:	9c 81       	ldd	r25, Y+4	; 0x04
    1d92:	87 30       	cpi	r24, 0x07	; 7
    1d94:	91 05       	cpc	r25, r1
    1d96:	0c f0       	brlt	.+2      	; 0x1d9a <KEYPAD_4x4_adjustKeyNumber+0x84>
    1d98:	3e c0       	rjmp	.+124    	; 0x1e16 <KEYPAD_4x4_adjustKeyNumber+0x100>
    1d9a:	37 c0       	rjmp	.+110    	; 0x1e0a <KEYPAD_4x4_adjustKeyNumber+0xf4>
    1d9c:	2b 81       	ldd	r18, Y+3	; 0x03
    1d9e:	3c 81       	ldd	r19, Y+4	; 0x04
    1da0:	2c 30       	cpi	r18, 0x0C	; 12
    1da2:	31 05       	cpc	r19, r1
    1da4:	09 f4       	brne	.+2      	; 0x1da8 <KEYPAD_4x4_adjustKeyNumber+0x92>
    1da6:	46 c0       	rjmp	.+140    	; 0x1e34 <KEYPAD_4x4_adjustKeyNumber+0x11e>
    1da8:	8b 81       	ldd	r24, Y+3	; 0x03
    1daa:	9c 81       	ldd	r25, Y+4	; 0x04
    1dac:	8d 30       	cpi	r24, 0x0D	; 13
    1dae:	91 05       	cpc	r25, r1
    1db0:	5c f4       	brge	.+22     	; 0x1dc8 <KEYPAD_4x4_adjustKeyNumber+0xb2>
    1db2:	2b 81       	ldd	r18, Y+3	; 0x03
    1db4:	3c 81       	ldd	r19, Y+4	; 0x04
    1db6:	2a 30       	cpi	r18, 0x0A	; 10
    1db8:	31 05       	cpc	r19, r1
    1dba:	b1 f1       	breq	.+108    	; 0x1e28 <KEYPAD_4x4_adjustKeyNumber+0x112>
    1dbc:	8b 81       	ldd	r24, Y+3	; 0x03
    1dbe:	9c 81       	ldd	r25, Y+4	; 0x04
    1dc0:	8b 30       	cpi	r24, 0x0B	; 11
    1dc2:	91 05       	cpc	r25, r1
    1dc4:	a4 f5       	brge	.+104    	; 0x1e2e <KEYPAD_4x4_adjustKeyNumber+0x118>
    1dc6:	2d c0       	rjmp	.+90     	; 0x1e22 <KEYPAD_4x4_adjustKeyNumber+0x10c>
    1dc8:	2b 81       	ldd	r18, Y+3	; 0x03
    1dca:	3c 81       	ldd	r19, Y+4	; 0x04
    1dcc:	2e 30       	cpi	r18, 0x0E	; 14
    1dce:	31 05       	cpc	r19, r1
    1dd0:	b9 f1       	breq	.+110    	; 0x1e40 <KEYPAD_4x4_adjustKeyNumber+0x12a>
    1dd2:	8b 81       	ldd	r24, Y+3	; 0x03
    1dd4:	9c 81       	ldd	r25, Y+4	; 0x04
    1dd6:	8e 30       	cpi	r24, 0x0E	; 14
    1dd8:	91 05       	cpc	r25, r1
    1dda:	7c f1       	brlt	.+94     	; 0x1e3a <KEYPAD_4x4_adjustKeyNumber+0x124>
    1ddc:	2b 81       	ldd	r18, Y+3	; 0x03
    1dde:	3c 81       	ldd	r19, Y+4	; 0x04
    1de0:	2f 30       	cpi	r18, 0x0F	; 15
    1de2:	31 05       	cpc	r19, r1
    1de4:	79 f1       	breq	.+94     	; 0x1e44 <KEYPAD_4x4_adjustKeyNumber+0x12e>
    1de6:	8b 81       	ldd	r24, Y+3	; 0x03
    1de8:	9c 81       	ldd	r25, Y+4	; 0x04
    1dea:	80 31       	cpi	r24, 0x10	; 16
    1dec:	91 05       	cpc	r25, r1
    1dee:	69 f1       	breq	.+90     	; 0x1e4a <KEYPAD_4x4_adjustKeyNumber+0x134>
    1df0:	2f c0       	rjmp	.+94     	; 0x1e50 <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
		case 1: keypad_button = 7;
    1df2:	87 e0       	ldi	r24, 0x07	; 7
    1df4:	89 83       	std	Y+1, r24	; 0x01
    1df6:	2e c0       	rjmp	.+92     	; 0x1e54 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 2: keypad_button = 8;
    1df8:	88 e0       	ldi	r24, 0x08	; 8
    1dfa:	89 83       	std	Y+1, r24	; 0x01
    1dfc:	2b c0       	rjmp	.+86     	; 0x1e54 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 3: keypad_button = 9;
    1dfe:	89 e0       	ldi	r24, 0x09	; 9
    1e00:	89 83       	std	Y+1, r24	; 0x01
    1e02:	28 c0       	rjmp	.+80     	; 0x1e54 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 4: keypad_button = '%'; // ASCII Code of %
    1e04:	85 e2       	ldi	r24, 0x25	; 37
    1e06:	89 83       	std	Y+1, r24	; 0x01
    1e08:	25 c0       	rjmp	.+74     	; 0x1e54 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 5: keypad_button = 4;
    1e0a:	84 e0       	ldi	r24, 0x04	; 4
    1e0c:	89 83       	std	Y+1, r24	; 0x01
    1e0e:	22 c0       	rjmp	.+68     	; 0x1e54 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 6: keypad_button = 5;
    1e10:	85 e0       	ldi	r24, 0x05	; 5
    1e12:	89 83       	std	Y+1, r24	; 0x01
    1e14:	1f c0       	rjmp	.+62     	; 0x1e54 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 7: keypad_button = 6;
    1e16:	86 e0       	ldi	r24, 0x06	; 6
    1e18:	89 83       	std	Y+1, r24	; 0x01
    1e1a:	1c c0       	rjmp	.+56     	; 0x1e54 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
    1e1c:	8a e2       	ldi	r24, 0x2A	; 42
    1e1e:	89 83       	std	Y+1, r24	; 0x01
    1e20:	19 c0       	rjmp	.+50     	; 0x1e54 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;		
		case 9: keypad_button = 1;
    1e22:	81 e0       	ldi	r24, 0x01	; 1
    1e24:	89 83       	std	Y+1, r24	; 0x01
    1e26:	16 c0       	rjmp	.+44     	; 0x1e54 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 10: keypad_button = 2;
    1e28:	82 e0       	ldi	r24, 0x02	; 2
    1e2a:	89 83       	std	Y+1, r24	; 0x01
    1e2c:	13 c0       	rjmp	.+38     	; 0x1e54 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 11: keypad_button = 3;
    1e2e:	83 e0       	ldi	r24, 0x03	; 3
    1e30:	89 83       	std	Y+1, r24	; 0x01
    1e32:	10 c0       	rjmp	.+32     	; 0x1e54 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 12: keypad_button = '-'; /* ASCII Code of '-' */
    1e34:	8d e2       	ldi	r24, 0x2D	; 45
    1e36:	89 83       	std	Y+1, r24	; 0x01
    1e38:	0d c0       	rjmp	.+26     	; 0x1e54 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 13: keypad_button = 13;  /* ASCII of Enter */
    1e3a:	8d e0       	ldi	r24, 0x0D	; 13
    1e3c:	89 83       	std	Y+1, r24	; 0x01
    1e3e:	0a c0       	rjmp	.+20     	; 0x1e54 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;			
		case 14: keypad_button = 0;
    1e40:	19 82       	std	Y+1, r1	; 0x01
    1e42:	08 c0       	rjmp	.+16     	; 0x1e54 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 15: keypad_button = '='; /* ASCII Code of '=' */
    1e44:	8d e3       	ldi	r24, 0x3D	; 61
    1e46:	89 83       	std	Y+1, r24	; 0x01
    1e48:	05 c0       	rjmp	.+10     	; 0x1e54 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
    1e4a:	8b e2       	ldi	r24, 0x2B	; 43
    1e4c:	89 83       	std	Y+1, r24	; 0x01
    1e4e:	02 c0       	rjmp	.+4      	; 0x1e54 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		default: keypad_button = button_number;
    1e50:	8a 81       	ldd	r24, Y+2	; 0x02
    1e52:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
    1e54:	89 81       	ldd	r24, Y+1	; 0x01
} 
    1e56:	0f 90       	pop	r0
    1e58:	0f 90       	pop	r0
    1e5a:	0f 90       	pop	r0
    1e5c:	0f 90       	pop	r0
    1e5e:	cf 91       	pop	r28
    1e60:	df 91       	pop	r29
    1e62:	08 95       	ret

00001e64 <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    1e64:	df 93       	push	r29
    1e66:	cf 93       	push	r28
    1e68:	cd b7       	in	r28, 0x3d	; 61
    1e6a:	de b7       	in	r29, 0x3e	; 62
	/* Configure the direction for RS, RW and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    1e6c:	83 e0       	ldi	r24, 0x03	; 3
    1e6e:	64 e0       	ldi	r22, 0x04	; 4
    1e70:	41 e0       	ldi	r20, 0x01	; 1
    1e72:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_RW_PORT_ID,LCD_RW_PIN_ID,PIN_OUTPUT);
    1e76:	83 e0       	ldi	r24, 0x03	; 3
    1e78:	65 e0       	ldi	r22, 0x05	; 5
    1e7a:	41 e0       	ldi	r20, 0x01	; 1
    1e7c:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    1e80:	83 e0       	ldi	r24, 0x03	; 3
    1e82:	66 e0       	ldi	r22, 0x06	; 6
    1e84:	41 e0       	ldi	r20, 0x01	; 1
    1e86:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <GPIO_setupPinDirection>

	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
    1e8a:	82 e0       	ldi	r24, 0x02	; 2
    1e8c:	6f ef       	ldi	r22, 0xFF	; 255
    1e8e:	0e 94 6d 0d 	call	0x1ada	; 0x1ada <GPIO_setupPortDirection>

	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE); /* use 2-line lcd + 8-bit Data Mode + 5*7 dot display Mode */
    1e92:	88 e3       	ldi	r24, 0x38	; 56
    1e94:	0e 94 55 0f 	call	0x1eaa	; 0x1eaa <LCD_sendCommand>
	
	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    1e98:	8c e0       	ldi	r24, 0x0C	; 12
    1e9a:	0e 94 55 0f 	call	0x1eaa	; 0x1eaa <LCD_sendCommand>
	
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    1e9e:	81 e0       	ldi	r24, 0x01	; 1
    1ea0:	0e 94 55 0f 	call	0x1eaa	; 0x1eaa <LCD_sendCommand>
}
    1ea4:	cf 91       	pop	r28
    1ea6:	df 91       	pop	r29
    1ea8:	08 95       	ret

00001eaa <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    1eaa:	df 93       	push	r29
    1eac:	cf 93       	push	r28
    1eae:	cd b7       	in	r28, 0x3d	; 61
    1eb0:	de b7       	in	r29, 0x3e	; 62
    1eb2:	e9 97       	sbiw	r28, 0x39	; 57
    1eb4:	0f b6       	in	r0, 0x3f	; 63
    1eb6:	f8 94       	cli
    1eb8:	de bf       	out	0x3e, r29	; 62
    1eba:	0f be       	out	0x3f, r0	; 63
    1ebc:	cd bf       	out	0x3d, r28	; 61
    1ebe:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    1ec0:	83 e0       	ldi	r24, 0x03	; 3
    1ec2:	64 e0       	ldi	r22, 0x04	; 4
    1ec4:	40 e0       	ldi	r20, 0x00	; 0
    1ec6:	0e 94 e7 0b 	call	0x17ce	; 0x17ce <GPIO_writePin>
	GPIO_writePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW); /* write data to LCD so RW=0 */
    1eca:	83 e0       	ldi	r24, 0x03	; 3
    1ecc:	65 e0       	ldi	r22, 0x05	; 5
    1ece:	40 e0       	ldi	r20, 0x00	; 0
    1ed0:	0e 94 e7 0b 	call	0x17ce	; 0x17ce <GPIO_writePin>
    1ed4:	80 e0       	ldi	r24, 0x00	; 0
    1ed6:	90 e0       	ldi	r25, 0x00	; 0
    1ed8:	a0 e8       	ldi	r26, 0x80	; 128
    1eda:	bf e3       	ldi	r27, 0x3F	; 63
    1edc:	8d ab       	std	Y+53, r24	; 0x35
    1ede:	9e ab       	std	Y+54, r25	; 0x36
    1ee0:	af ab       	std	Y+55, r26	; 0x37
    1ee2:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ee4:	6d a9       	ldd	r22, Y+53	; 0x35
    1ee6:	7e a9       	ldd	r23, Y+54	; 0x36
    1ee8:	8f a9       	ldd	r24, Y+55	; 0x37
    1eea:	98 ad       	ldd	r25, Y+56	; 0x38
    1eec:	20 e0       	ldi	r18, 0x00	; 0
    1eee:	30 e0       	ldi	r19, 0x00	; 0
    1ef0:	4a e7       	ldi	r20, 0x7A	; 122
    1ef2:	53 e4       	ldi	r21, 0x43	; 67
    1ef4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ef8:	dc 01       	movw	r26, r24
    1efa:	cb 01       	movw	r24, r22
    1efc:	89 ab       	std	Y+49, r24	; 0x31
    1efe:	9a ab       	std	Y+50, r25	; 0x32
    1f00:	ab ab       	std	Y+51, r26	; 0x33
    1f02:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1f04:	69 a9       	ldd	r22, Y+49	; 0x31
    1f06:	7a a9       	ldd	r23, Y+50	; 0x32
    1f08:	8b a9       	ldd	r24, Y+51	; 0x33
    1f0a:	9c a9       	ldd	r25, Y+52	; 0x34
    1f0c:	20 e0       	ldi	r18, 0x00	; 0
    1f0e:	30 e0       	ldi	r19, 0x00	; 0
    1f10:	40 e8       	ldi	r20, 0x80	; 128
    1f12:	5f e3       	ldi	r21, 0x3F	; 63
    1f14:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f18:	88 23       	and	r24, r24
    1f1a:	2c f4       	brge	.+10     	; 0x1f26 <LCD_sendCommand+0x7c>
		__ticks = 1;
    1f1c:	81 e0       	ldi	r24, 0x01	; 1
    1f1e:	90 e0       	ldi	r25, 0x00	; 0
    1f20:	98 ab       	std	Y+48, r25	; 0x30
    1f22:	8f a7       	std	Y+47, r24	; 0x2f
    1f24:	3f c0       	rjmp	.+126    	; 0x1fa4 <LCD_sendCommand+0xfa>
	else if (__tmp > 65535)
    1f26:	69 a9       	ldd	r22, Y+49	; 0x31
    1f28:	7a a9       	ldd	r23, Y+50	; 0x32
    1f2a:	8b a9       	ldd	r24, Y+51	; 0x33
    1f2c:	9c a9       	ldd	r25, Y+52	; 0x34
    1f2e:	20 e0       	ldi	r18, 0x00	; 0
    1f30:	3f ef       	ldi	r19, 0xFF	; 255
    1f32:	4f e7       	ldi	r20, 0x7F	; 127
    1f34:	57 e4       	ldi	r21, 0x47	; 71
    1f36:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f3a:	18 16       	cp	r1, r24
    1f3c:	4c f5       	brge	.+82     	; 0x1f90 <LCD_sendCommand+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f3e:	6d a9       	ldd	r22, Y+53	; 0x35
    1f40:	7e a9       	ldd	r23, Y+54	; 0x36
    1f42:	8f a9       	ldd	r24, Y+55	; 0x37
    1f44:	98 ad       	ldd	r25, Y+56	; 0x38
    1f46:	20 e0       	ldi	r18, 0x00	; 0
    1f48:	30 e0       	ldi	r19, 0x00	; 0
    1f4a:	40 e2       	ldi	r20, 0x20	; 32
    1f4c:	51 e4       	ldi	r21, 0x41	; 65
    1f4e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f52:	dc 01       	movw	r26, r24
    1f54:	cb 01       	movw	r24, r22
    1f56:	bc 01       	movw	r22, r24
    1f58:	cd 01       	movw	r24, r26
    1f5a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f5e:	dc 01       	movw	r26, r24
    1f60:	cb 01       	movw	r24, r22
    1f62:	98 ab       	std	Y+48, r25	; 0x30
    1f64:	8f a7       	std	Y+47, r24	; 0x2f
    1f66:	0f c0       	rjmp	.+30     	; 0x1f86 <LCD_sendCommand+0xdc>
    1f68:	89 e1       	ldi	r24, 0x19	; 25
    1f6a:	90 e0       	ldi	r25, 0x00	; 0
    1f6c:	9e a7       	std	Y+46, r25	; 0x2e
    1f6e:	8d a7       	std	Y+45, r24	; 0x2d
    1f70:	8d a5       	ldd	r24, Y+45	; 0x2d
    1f72:	9e a5       	ldd	r25, Y+46	; 0x2e
    1f74:	01 97       	sbiw	r24, 0x01	; 1
    1f76:	f1 f7       	brne	.-4      	; 0x1f74 <LCD_sendCommand+0xca>
    1f78:	9e a7       	std	Y+46, r25	; 0x2e
    1f7a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f7c:	8f a5       	ldd	r24, Y+47	; 0x2f
    1f7e:	98 a9       	ldd	r25, Y+48	; 0x30
    1f80:	01 97       	sbiw	r24, 0x01	; 1
    1f82:	98 ab       	std	Y+48, r25	; 0x30
    1f84:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f86:	8f a5       	ldd	r24, Y+47	; 0x2f
    1f88:	98 a9       	ldd	r25, Y+48	; 0x30
    1f8a:	00 97       	sbiw	r24, 0x00	; 0
    1f8c:	69 f7       	brne	.-38     	; 0x1f68 <LCD_sendCommand+0xbe>
    1f8e:	14 c0       	rjmp	.+40     	; 0x1fb8 <LCD_sendCommand+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f90:	69 a9       	ldd	r22, Y+49	; 0x31
    1f92:	7a a9       	ldd	r23, Y+50	; 0x32
    1f94:	8b a9       	ldd	r24, Y+51	; 0x33
    1f96:	9c a9       	ldd	r25, Y+52	; 0x34
    1f98:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f9c:	dc 01       	movw	r26, r24
    1f9e:	cb 01       	movw	r24, r22
    1fa0:	98 ab       	std	Y+48, r25	; 0x30
    1fa2:	8f a7       	std	Y+47, r24	; 0x2f
    1fa4:	8f a5       	ldd	r24, Y+47	; 0x2f
    1fa6:	98 a9       	ldd	r25, Y+48	; 0x30
    1fa8:	9c a7       	std	Y+44, r25	; 0x2c
    1faa:	8b a7       	std	Y+43, r24	; 0x2b
    1fac:	8b a5       	ldd	r24, Y+43	; 0x2b
    1fae:	9c a5       	ldd	r25, Y+44	; 0x2c
    1fb0:	01 97       	sbiw	r24, 0x01	; 1
    1fb2:	f1 f7       	brne	.-4      	; 0x1fb0 <LCD_sendCommand+0x106>
    1fb4:	9c a7       	std	Y+44, r25	; 0x2c
    1fb6:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    1fb8:	83 e0       	ldi	r24, 0x03	; 3
    1fba:	66 e0       	ldi	r22, 0x06	; 6
    1fbc:	41 e0       	ldi	r20, 0x01	; 1
    1fbe:	0e 94 e7 0b 	call	0x17ce	; 0x17ce <GPIO_writePin>
    1fc2:	80 e0       	ldi	r24, 0x00	; 0
    1fc4:	90 e0       	ldi	r25, 0x00	; 0
    1fc6:	a0 e8       	ldi	r26, 0x80	; 128
    1fc8:	bf e3       	ldi	r27, 0x3F	; 63
    1fca:	8f a3       	std	Y+39, r24	; 0x27
    1fcc:	98 a7       	std	Y+40, r25	; 0x28
    1fce:	a9 a7       	std	Y+41, r26	; 0x29
    1fd0:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fd2:	6f a1       	ldd	r22, Y+39	; 0x27
    1fd4:	78 a5       	ldd	r23, Y+40	; 0x28
    1fd6:	89 a5       	ldd	r24, Y+41	; 0x29
    1fd8:	9a a5       	ldd	r25, Y+42	; 0x2a
    1fda:	20 e0       	ldi	r18, 0x00	; 0
    1fdc:	30 e0       	ldi	r19, 0x00	; 0
    1fde:	4a e7       	ldi	r20, 0x7A	; 122
    1fe0:	53 e4       	ldi	r21, 0x43	; 67
    1fe2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fe6:	dc 01       	movw	r26, r24
    1fe8:	cb 01       	movw	r24, r22
    1fea:	8b a3       	std	Y+35, r24	; 0x23
    1fec:	9c a3       	std	Y+36, r25	; 0x24
    1fee:	ad a3       	std	Y+37, r26	; 0x25
    1ff0:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1ff2:	6b a1       	ldd	r22, Y+35	; 0x23
    1ff4:	7c a1       	ldd	r23, Y+36	; 0x24
    1ff6:	8d a1       	ldd	r24, Y+37	; 0x25
    1ff8:	9e a1       	ldd	r25, Y+38	; 0x26
    1ffa:	20 e0       	ldi	r18, 0x00	; 0
    1ffc:	30 e0       	ldi	r19, 0x00	; 0
    1ffe:	40 e8       	ldi	r20, 0x80	; 128
    2000:	5f e3       	ldi	r21, 0x3F	; 63
    2002:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2006:	88 23       	and	r24, r24
    2008:	2c f4       	brge	.+10     	; 0x2014 <LCD_sendCommand+0x16a>
		__ticks = 1;
    200a:	81 e0       	ldi	r24, 0x01	; 1
    200c:	90 e0       	ldi	r25, 0x00	; 0
    200e:	9a a3       	std	Y+34, r25	; 0x22
    2010:	89 a3       	std	Y+33, r24	; 0x21
    2012:	3f c0       	rjmp	.+126    	; 0x2092 <LCD_sendCommand+0x1e8>
	else if (__tmp > 65535)
    2014:	6b a1       	ldd	r22, Y+35	; 0x23
    2016:	7c a1       	ldd	r23, Y+36	; 0x24
    2018:	8d a1       	ldd	r24, Y+37	; 0x25
    201a:	9e a1       	ldd	r25, Y+38	; 0x26
    201c:	20 e0       	ldi	r18, 0x00	; 0
    201e:	3f ef       	ldi	r19, 0xFF	; 255
    2020:	4f e7       	ldi	r20, 0x7F	; 127
    2022:	57 e4       	ldi	r21, 0x47	; 71
    2024:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2028:	18 16       	cp	r1, r24
    202a:	4c f5       	brge	.+82     	; 0x207e <LCD_sendCommand+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    202c:	6f a1       	ldd	r22, Y+39	; 0x27
    202e:	78 a5       	ldd	r23, Y+40	; 0x28
    2030:	89 a5       	ldd	r24, Y+41	; 0x29
    2032:	9a a5       	ldd	r25, Y+42	; 0x2a
    2034:	20 e0       	ldi	r18, 0x00	; 0
    2036:	30 e0       	ldi	r19, 0x00	; 0
    2038:	40 e2       	ldi	r20, 0x20	; 32
    203a:	51 e4       	ldi	r21, 0x41	; 65
    203c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2040:	dc 01       	movw	r26, r24
    2042:	cb 01       	movw	r24, r22
    2044:	bc 01       	movw	r22, r24
    2046:	cd 01       	movw	r24, r26
    2048:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    204c:	dc 01       	movw	r26, r24
    204e:	cb 01       	movw	r24, r22
    2050:	9a a3       	std	Y+34, r25	; 0x22
    2052:	89 a3       	std	Y+33, r24	; 0x21
    2054:	0f c0       	rjmp	.+30     	; 0x2074 <LCD_sendCommand+0x1ca>
    2056:	89 e1       	ldi	r24, 0x19	; 25
    2058:	90 e0       	ldi	r25, 0x00	; 0
    205a:	98 a3       	std	Y+32, r25	; 0x20
    205c:	8f 8f       	std	Y+31, r24	; 0x1f
    205e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2060:	98 a1       	ldd	r25, Y+32	; 0x20
    2062:	01 97       	sbiw	r24, 0x01	; 1
    2064:	f1 f7       	brne	.-4      	; 0x2062 <LCD_sendCommand+0x1b8>
    2066:	98 a3       	std	Y+32, r25	; 0x20
    2068:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    206a:	89 a1       	ldd	r24, Y+33	; 0x21
    206c:	9a a1       	ldd	r25, Y+34	; 0x22
    206e:	01 97       	sbiw	r24, 0x01	; 1
    2070:	9a a3       	std	Y+34, r25	; 0x22
    2072:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2074:	89 a1       	ldd	r24, Y+33	; 0x21
    2076:	9a a1       	ldd	r25, Y+34	; 0x22
    2078:	00 97       	sbiw	r24, 0x00	; 0
    207a:	69 f7       	brne	.-38     	; 0x2056 <LCD_sendCommand+0x1ac>
    207c:	14 c0       	rjmp	.+40     	; 0x20a6 <LCD_sendCommand+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    207e:	6b a1       	ldd	r22, Y+35	; 0x23
    2080:	7c a1       	ldd	r23, Y+36	; 0x24
    2082:	8d a1       	ldd	r24, Y+37	; 0x25
    2084:	9e a1       	ldd	r25, Y+38	; 0x26
    2086:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    208a:	dc 01       	movw	r26, r24
    208c:	cb 01       	movw	r24, r22
    208e:	9a a3       	std	Y+34, r25	; 0x22
    2090:	89 a3       	std	Y+33, r24	; 0x21
    2092:	89 a1       	ldd	r24, Y+33	; 0x21
    2094:	9a a1       	ldd	r25, Y+34	; 0x22
    2096:	9e 8f       	std	Y+30, r25	; 0x1e
    2098:	8d 8f       	std	Y+29, r24	; 0x1d
    209a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    209c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    209e:	01 97       	sbiw	r24, 0x01	; 1
    20a0:	f1 f7       	brne	.-4      	; 0x209e <LCD_sendCommand+0x1f4>
    20a2:	9e 8f       	std	Y+30, r25	; 0x1e
    20a4:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
    20a6:	82 e0       	ldi	r24, 0x02	; 2
    20a8:	69 ad       	ldd	r22, Y+57	; 0x39
    20aa:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <GPIO_writePort>
    20ae:	80 e0       	ldi	r24, 0x00	; 0
    20b0:	90 e0       	ldi	r25, 0x00	; 0
    20b2:	a0 e8       	ldi	r26, 0x80	; 128
    20b4:	bf e3       	ldi	r27, 0x3F	; 63
    20b6:	89 8f       	std	Y+25, r24	; 0x19
    20b8:	9a 8f       	std	Y+26, r25	; 0x1a
    20ba:	ab 8f       	std	Y+27, r26	; 0x1b
    20bc:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20be:	69 8d       	ldd	r22, Y+25	; 0x19
    20c0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    20c2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    20c4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    20c6:	20 e0       	ldi	r18, 0x00	; 0
    20c8:	30 e0       	ldi	r19, 0x00	; 0
    20ca:	4a e7       	ldi	r20, 0x7A	; 122
    20cc:	53 e4       	ldi	r21, 0x43	; 67
    20ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20d2:	dc 01       	movw	r26, r24
    20d4:	cb 01       	movw	r24, r22
    20d6:	8d 8b       	std	Y+21, r24	; 0x15
    20d8:	9e 8b       	std	Y+22, r25	; 0x16
    20da:	af 8b       	std	Y+23, r26	; 0x17
    20dc:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    20de:	6d 89       	ldd	r22, Y+21	; 0x15
    20e0:	7e 89       	ldd	r23, Y+22	; 0x16
    20e2:	8f 89       	ldd	r24, Y+23	; 0x17
    20e4:	98 8d       	ldd	r25, Y+24	; 0x18
    20e6:	20 e0       	ldi	r18, 0x00	; 0
    20e8:	30 e0       	ldi	r19, 0x00	; 0
    20ea:	40 e8       	ldi	r20, 0x80	; 128
    20ec:	5f e3       	ldi	r21, 0x3F	; 63
    20ee:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    20f2:	88 23       	and	r24, r24
    20f4:	2c f4       	brge	.+10     	; 0x2100 <LCD_sendCommand+0x256>
		__ticks = 1;
    20f6:	81 e0       	ldi	r24, 0x01	; 1
    20f8:	90 e0       	ldi	r25, 0x00	; 0
    20fa:	9c 8b       	std	Y+20, r25	; 0x14
    20fc:	8b 8b       	std	Y+19, r24	; 0x13
    20fe:	3f c0       	rjmp	.+126    	; 0x217e <LCD_sendCommand+0x2d4>
	else if (__tmp > 65535)
    2100:	6d 89       	ldd	r22, Y+21	; 0x15
    2102:	7e 89       	ldd	r23, Y+22	; 0x16
    2104:	8f 89       	ldd	r24, Y+23	; 0x17
    2106:	98 8d       	ldd	r25, Y+24	; 0x18
    2108:	20 e0       	ldi	r18, 0x00	; 0
    210a:	3f ef       	ldi	r19, 0xFF	; 255
    210c:	4f e7       	ldi	r20, 0x7F	; 127
    210e:	57 e4       	ldi	r21, 0x47	; 71
    2110:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2114:	18 16       	cp	r1, r24
    2116:	4c f5       	brge	.+82     	; 0x216a <LCD_sendCommand+0x2c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2118:	69 8d       	ldd	r22, Y+25	; 0x19
    211a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    211c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    211e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2120:	20 e0       	ldi	r18, 0x00	; 0
    2122:	30 e0       	ldi	r19, 0x00	; 0
    2124:	40 e2       	ldi	r20, 0x20	; 32
    2126:	51 e4       	ldi	r21, 0x41	; 65
    2128:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    212c:	dc 01       	movw	r26, r24
    212e:	cb 01       	movw	r24, r22
    2130:	bc 01       	movw	r22, r24
    2132:	cd 01       	movw	r24, r26
    2134:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2138:	dc 01       	movw	r26, r24
    213a:	cb 01       	movw	r24, r22
    213c:	9c 8b       	std	Y+20, r25	; 0x14
    213e:	8b 8b       	std	Y+19, r24	; 0x13
    2140:	0f c0       	rjmp	.+30     	; 0x2160 <LCD_sendCommand+0x2b6>
    2142:	89 e1       	ldi	r24, 0x19	; 25
    2144:	90 e0       	ldi	r25, 0x00	; 0
    2146:	9a 8b       	std	Y+18, r25	; 0x12
    2148:	89 8b       	std	Y+17, r24	; 0x11
    214a:	89 89       	ldd	r24, Y+17	; 0x11
    214c:	9a 89       	ldd	r25, Y+18	; 0x12
    214e:	01 97       	sbiw	r24, 0x01	; 1
    2150:	f1 f7       	brne	.-4      	; 0x214e <LCD_sendCommand+0x2a4>
    2152:	9a 8b       	std	Y+18, r25	; 0x12
    2154:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2156:	8b 89       	ldd	r24, Y+19	; 0x13
    2158:	9c 89       	ldd	r25, Y+20	; 0x14
    215a:	01 97       	sbiw	r24, 0x01	; 1
    215c:	9c 8b       	std	Y+20, r25	; 0x14
    215e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2160:	8b 89       	ldd	r24, Y+19	; 0x13
    2162:	9c 89       	ldd	r25, Y+20	; 0x14
    2164:	00 97       	sbiw	r24, 0x00	; 0
    2166:	69 f7       	brne	.-38     	; 0x2142 <LCD_sendCommand+0x298>
    2168:	14 c0       	rjmp	.+40     	; 0x2192 <LCD_sendCommand+0x2e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    216a:	6d 89       	ldd	r22, Y+21	; 0x15
    216c:	7e 89       	ldd	r23, Y+22	; 0x16
    216e:	8f 89       	ldd	r24, Y+23	; 0x17
    2170:	98 8d       	ldd	r25, Y+24	; 0x18
    2172:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2176:	dc 01       	movw	r26, r24
    2178:	cb 01       	movw	r24, r22
    217a:	9c 8b       	std	Y+20, r25	; 0x14
    217c:	8b 8b       	std	Y+19, r24	; 0x13
    217e:	8b 89       	ldd	r24, Y+19	; 0x13
    2180:	9c 89       	ldd	r25, Y+20	; 0x14
    2182:	98 8b       	std	Y+16, r25	; 0x10
    2184:	8f 87       	std	Y+15, r24	; 0x0f
    2186:	8f 85       	ldd	r24, Y+15	; 0x0f
    2188:	98 89       	ldd	r25, Y+16	; 0x10
    218a:	01 97       	sbiw	r24, 0x01	; 1
    218c:	f1 f7       	brne	.-4      	; 0x218a <LCD_sendCommand+0x2e0>
    218e:	98 8b       	std	Y+16, r25	; 0x10
    2190:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2192:	83 e0       	ldi	r24, 0x03	; 3
    2194:	66 e0       	ldi	r22, 0x06	; 6
    2196:	40 e0       	ldi	r20, 0x00	; 0
    2198:	0e 94 e7 0b 	call	0x17ce	; 0x17ce <GPIO_writePin>
    219c:	80 e0       	ldi	r24, 0x00	; 0
    219e:	90 e0       	ldi	r25, 0x00	; 0
    21a0:	a0 e8       	ldi	r26, 0x80	; 128
    21a2:	bf e3       	ldi	r27, 0x3F	; 63
    21a4:	8b 87       	std	Y+11, r24	; 0x0b
    21a6:	9c 87       	std	Y+12, r25	; 0x0c
    21a8:	ad 87       	std	Y+13, r26	; 0x0d
    21aa:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21ac:	6b 85       	ldd	r22, Y+11	; 0x0b
    21ae:	7c 85       	ldd	r23, Y+12	; 0x0c
    21b0:	8d 85       	ldd	r24, Y+13	; 0x0d
    21b2:	9e 85       	ldd	r25, Y+14	; 0x0e
    21b4:	20 e0       	ldi	r18, 0x00	; 0
    21b6:	30 e0       	ldi	r19, 0x00	; 0
    21b8:	4a e7       	ldi	r20, 0x7A	; 122
    21ba:	53 e4       	ldi	r21, 0x43	; 67
    21bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21c0:	dc 01       	movw	r26, r24
    21c2:	cb 01       	movw	r24, r22
    21c4:	8f 83       	std	Y+7, r24	; 0x07
    21c6:	98 87       	std	Y+8, r25	; 0x08
    21c8:	a9 87       	std	Y+9, r26	; 0x09
    21ca:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    21cc:	6f 81       	ldd	r22, Y+7	; 0x07
    21ce:	78 85       	ldd	r23, Y+8	; 0x08
    21d0:	89 85       	ldd	r24, Y+9	; 0x09
    21d2:	9a 85       	ldd	r25, Y+10	; 0x0a
    21d4:	20 e0       	ldi	r18, 0x00	; 0
    21d6:	30 e0       	ldi	r19, 0x00	; 0
    21d8:	40 e8       	ldi	r20, 0x80	; 128
    21da:	5f e3       	ldi	r21, 0x3F	; 63
    21dc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    21e0:	88 23       	and	r24, r24
    21e2:	2c f4       	brge	.+10     	; 0x21ee <LCD_sendCommand+0x344>
		__ticks = 1;
    21e4:	81 e0       	ldi	r24, 0x01	; 1
    21e6:	90 e0       	ldi	r25, 0x00	; 0
    21e8:	9e 83       	std	Y+6, r25	; 0x06
    21ea:	8d 83       	std	Y+5, r24	; 0x05
    21ec:	3f c0       	rjmp	.+126    	; 0x226c <LCD_sendCommand+0x3c2>
	else if (__tmp > 65535)
    21ee:	6f 81       	ldd	r22, Y+7	; 0x07
    21f0:	78 85       	ldd	r23, Y+8	; 0x08
    21f2:	89 85       	ldd	r24, Y+9	; 0x09
    21f4:	9a 85       	ldd	r25, Y+10	; 0x0a
    21f6:	20 e0       	ldi	r18, 0x00	; 0
    21f8:	3f ef       	ldi	r19, 0xFF	; 255
    21fa:	4f e7       	ldi	r20, 0x7F	; 127
    21fc:	57 e4       	ldi	r21, 0x47	; 71
    21fe:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2202:	18 16       	cp	r1, r24
    2204:	4c f5       	brge	.+82     	; 0x2258 <LCD_sendCommand+0x3ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2206:	6b 85       	ldd	r22, Y+11	; 0x0b
    2208:	7c 85       	ldd	r23, Y+12	; 0x0c
    220a:	8d 85       	ldd	r24, Y+13	; 0x0d
    220c:	9e 85       	ldd	r25, Y+14	; 0x0e
    220e:	20 e0       	ldi	r18, 0x00	; 0
    2210:	30 e0       	ldi	r19, 0x00	; 0
    2212:	40 e2       	ldi	r20, 0x20	; 32
    2214:	51 e4       	ldi	r21, 0x41	; 65
    2216:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    221a:	dc 01       	movw	r26, r24
    221c:	cb 01       	movw	r24, r22
    221e:	bc 01       	movw	r22, r24
    2220:	cd 01       	movw	r24, r26
    2222:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2226:	dc 01       	movw	r26, r24
    2228:	cb 01       	movw	r24, r22
    222a:	9e 83       	std	Y+6, r25	; 0x06
    222c:	8d 83       	std	Y+5, r24	; 0x05
    222e:	0f c0       	rjmp	.+30     	; 0x224e <LCD_sendCommand+0x3a4>
    2230:	89 e1       	ldi	r24, 0x19	; 25
    2232:	90 e0       	ldi	r25, 0x00	; 0
    2234:	9c 83       	std	Y+4, r25	; 0x04
    2236:	8b 83       	std	Y+3, r24	; 0x03
    2238:	8b 81       	ldd	r24, Y+3	; 0x03
    223a:	9c 81       	ldd	r25, Y+4	; 0x04
    223c:	01 97       	sbiw	r24, 0x01	; 1
    223e:	f1 f7       	brne	.-4      	; 0x223c <LCD_sendCommand+0x392>
    2240:	9c 83       	std	Y+4, r25	; 0x04
    2242:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2244:	8d 81       	ldd	r24, Y+5	; 0x05
    2246:	9e 81       	ldd	r25, Y+6	; 0x06
    2248:	01 97       	sbiw	r24, 0x01	; 1
    224a:	9e 83       	std	Y+6, r25	; 0x06
    224c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    224e:	8d 81       	ldd	r24, Y+5	; 0x05
    2250:	9e 81       	ldd	r25, Y+6	; 0x06
    2252:	00 97       	sbiw	r24, 0x00	; 0
    2254:	69 f7       	brne	.-38     	; 0x2230 <LCD_sendCommand+0x386>
    2256:	14 c0       	rjmp	.+40     	; 0x2280 <LCD_sendCommand+0x3d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2258:	6f 81       	ldd	r22, Y+7	; 0x07
    225a:	78 85       	ldd	r23, Y+8	; 0x08
    225c:	89 85       	ldd	r24, Y+9	; 0x09
    225e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2260:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2264:	dc 01       	movw	r26, r24
    2266:	cb 01       	movw	r24, r22
    2268:	9e 83       	std	Y+6, r25	; 0x06
    226a:	8d 83       	std	Y+5, r24	; 0x05
    226c:	8d 81       	ldd	r24, Y+5	; 0x05
    226e:	9e 81       	ldd	r25, Y+6	; 0x06
    2270:	9a 83       	std	Y+2, r25	; 0x02
    2272:	89 83       	std	Y+1, r24	; 0x01
    2274:	89 81       	ldd	r24, Y+1	; 0x01
    2276:	9a 81       	ldd	r25, Y+2	; 0x02
    2278:	01 97       	sbiw	r24, 0x01	; 1
    227a:	f1 f7       	brne	.-4      	; 0x2278 <LCD_sendCommand+0x3ce>
    227c:	9a 83       	std	Y+2, r25	; 0x02
    227e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
}
    2280:	e9 96       	adiw	r28, 0x39	; 57
    2282:	0f b6       	in	r0, 0x3f	; 63
    2284:	f8 94       	cli
    2286:	de bf       	out	0x3e, r29	; 62
    2288:	0f be       	out	0x3f, r0	; 63
    228a:	cd bf       	out	0x3d, r28	; 61
    228c:	cf 91       	pop	r28
    228e:	df 91       	pop	r29
    2290:	08 95       	ret

00002292 <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    2292:	df 93       	push	r29
    2294:	cf 93       	push	r28
    2296:	cd b7       	in	r28, 0x3d	; 61
    2298:	de b7       	in	r29, 0x3e	; 62
    229a:	e9 97       	sbiw	r28, 0x39	; 57
    229c:	0f b6       	in	r0, 0x3f	; 63
    229e:	f8 94       	cli
    22a0:	de bf       	out	0x3e, r29	; 62
    22a2:	0f be       	out	0x3f, r0	; 63
    22a4:	cd bf       	out	0x3d, r28	; 61
    22a6:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    22a8:	83 e0       	ldi	r24, 0x03	; 3
    22aa:	64 e0       	ldi	r22, 0x04	; 4
    22ac:	41 e0       	ldi	r20, 0x01	; 1
    22ae:	0e 94 e7 0b 	call	0x17ce	; 0x17ce <GPIO_writePin>
	GPIO_writePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW); /* write data to LCD so RW=0 */
    22b2:	83 e0       	ldi	r24, 0x03	; 3
    22b4:	65 e0       	ldi	r22, 0x05	; 5
    22b6:	40 e0       	ldi	r20, 0x00	; 0
    22b8:	0e 94 e7 0b 	call	0x17ce	; 0x17ce <GPIO_writePin>
    22bc:	80 e0       	ldi	r24, 0x00	; 0
    22be:	90 e0       	ldi	r25, 0x00	; 0
    22c0:	a0 e8       	ldi	r26, 0x80	; 128
    22c2:	bf e3       	ldi	r27, 0x3F	; 63
    22c4:	8d ab       	std	Y+53, r24	; 0x35
    22c6:	9e ab       	std	Y+54, r25	; 0x36
    22c8:	af ab       	std	Y+55, r26	; 0x37
    22ca:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22cc:	6d a9       	ldd	r22, Y+53	; 0x35
    22ce:	7e a9       	ldd	r23, Y+54	; 0x36
    22d0:	8f a9       	ldd	r24, Y+55	; 0x37
    22d2:	98 ad       	ldd	r25, Y+56	; 0x38
    22d4:	20 e0       	ldi	r18, 0x00	; 0
    22d6:	30 e0       	ldi	r19, 0x00	; 0
    22d8:	4a e7       	ldi	r20, 0x7A	; 122
    22da:	53 e4       	ldi	r21, 0x43	; 67
    22dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22e0:	dc 01       	movw	r26, r24
    22e2:	cb 01       	movw	r24, r22
    22e4:	89 ab       	std	Y+49, r24	; 0x31
    22e6:	9a ab       	std	Y+50, r25	; 0x32
    22e8:	ab ab       	std	Y+51, r26	; 0x33
    22ea:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    22ec:	69 a9       	ldd	r22, Y+49	; 0x31
    22ee:	7a a9       	ldd	r23, Y+50	; 0x32
    22f0:	8b a9       	ldd	r24, Y+51	; 0x33
    22f2:	9c a9       	ldd	r25, Y+52	; 0x34
    22f4:	20 e0       	ldi	r18, 0x00	; 0
    22f6:	30 e0       	ldi	r19, 0x00	; 0
    22f8:	40 e8       	ldi	r20, 0x80	; 128
    22fa:	5f e3       	ldi	r21, 0x3F	; 63
    22fc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2300:	88 23       	and	r24, r24
    2302:	2c f4       	brge	.+10     	; 0x230e <LCD_displayCharacter+0x7c>
		__ticks = 1;
    2304:	81 e0       	ldi	r24, 0x01	; 1
    2306:	90 e0       	ldi	r25, 0x00	; 0
    2308:	98 ab       	std	Y+48, r25	; 0x30
    230a:	8f a7       	std	Y+47, r24	; 0x2f
    230c:	3f c0       	rjmp	.+126    	; 0x238c <LCD_displayCharacter+0xfa>
	else if (__tmp > 65535)
    230e:	69 a9       	ldd	r22, Y+49	; 0x31
    2310:	7a a9       	ldd	r23, Y+50	; 0x32
    2312:	8b a9       	ldd	r24, Y+51	; 0x33
    2314:	9c a9       	ldd	r25, Y+52	; 0x34
    2316:	20 e0       	ldi	r18, 0x00	; 0
    2318:	3f ef       	ldi	r19, 0xFF	; 255
    231a:	4f e7       	ldi	r20, 0x7F	; 127
    231c:	57 e4       	ldi	r21, 0x47	; 71
    231e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2322:	18 16       	cp	r1, r24
    2324:	4c f5       	brge	.+82     	; 0x2378 <LCD_displayCharacter+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2326:	6d a9       	ldd	r22, Y+53	; 0x35
    2328:	7e a9       	ldd	r23, Y+54	; 0x36
    232a:	8f a9       	ldd	r24, Y+55	; 0x37
    232c:	98 ad       	ldd	r25, Y+56	; 0x38
    232e:	20 e0       	ldi	r18, 0x00	; 0
    2330:	30 e0       	ldi	r19, 0x00	; 0
    2332:	40 e2       	ldi	r20, 0x20	; 32
    2334:	51 e4       	ldi	r21, 0x41	; 65
    2336:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    233a:	dc 01       	movw	r26, r24
    233c:	cb 01       	movw	r24, r22
    233e:	bc 01       	movw	r22, r24
    2340:	cd 01       	movw	r24, r26
    2342:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2346:	dc 01       	movw	r26, r24
    2348:	cb 01       	movw	r24, r22
    234a:	98 ab       	std	Y+48, r25	; 0x30
    234c:	8f a7       	std	Y+47, r24	; 0x2f
    234e:	0f c0       	rjmp	.+30     	; 0x236e <LCD_displayCharacter+0xdc>
    2350:	89 e1       	ldi	r24, 0x19	; 25
    2352:	90 e0       	ldi	r25, 0x00	; 0
    2354:	9e a7       	std	Y+46, r25	; 0x2e
    2356:	8d a7       	std	Y+45, r24	; 0x2d
    2358:	8d a5       	ldd	r24, Y+45	; 0x2d
    235a:	9e a5       	ldd	r25, Y+46	; 0x2e
    235c:	01 97       	sbiw	r24, 0x01	; 1
    235e:	f1 f7       	brne	.-4      	; 0x235c <LCD_displayCharacter+0xca>
    2360:	9e a7       	std	Y+46, r25	; 0x2e
    2362:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2364:	8f a5       	ldd	r24, Y+47	; 0x2f
    2366:	98 a9       	ldd	r25, Y+48	; 0x30
    2368:	01 97       	sbiw	r24, 0x01	; 1
    236a:	98 ab       	std	Y+48, r25	; 0x30
    236c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    236e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2370:	98 a9       	ldd	r25, Y+48	; 0x30
    2372:	00 97       	sbiw	r24, 0x00	; 0
    2374:	69 f7       	brne	.-38     	; 0x2350 <LCD_displayCharacter+0xbe>
    2376:	14 c0       	rjmp	.+40     	; 0x23a0 <LCD_displayCharacter+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2378:	69 a9       	ldd	r22, Y+49	; 0x31
    237a:	7a a9       	ldd	r23, Y+50	; 0x32
    237c:	8b a9       	ldd	r24, Y+51	; 0x33
    237e:	9c a9       	ldd	r25, Y+52	; 0x34
    2380:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2384:	dc 01       	movw	r26, r24
    2386:	cb 01       	movw	r24, r22
    2388:	98 ab       	std	Y+48, r25	; 0x30
    238a:	8f a7       	std	Y+47, r24	; 0x2f
    238c:	8f a5       	ldd	r24, Y+47	; 0x2f
    238e:	98 a9       	ldd	r25, Y+48	; 0x30
    2390:	9c a7       	std	Y+44, r25	; 0x2c
    2392:	8b a7       	std	Y+43, r24	; 0x2b
    2394:	8b a5       	ldd	r24, Y+43	; 0x2b
    2396:	9c a5       	ldd	r25, Y+44	; 0x2c
    2398:	01 97       	sbiw	r24, 0x01	; 1
    239a:	f1 f7       	brne	.-4      	; 0x2398 <LCD_displayCharacter+0x106>
    239c:	9c a7       	std	Y+44, r25	; 0x2c
    239e:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    23a0:	83 e0       	ldi	r24, 0x03	; 3
    23a2:	66 e0       	ldi	r22, 0x06	; 6
    23a4:	41 e0       	ldi	r20, 0x01	; 1
    23a6:	0e 94 e7 0b 	call	0x17ce	; 0x17ce <GPIO_writePin>
    23aa:	80 e0       	ldi	r24, 0x00	; 0
    23ac:	90 e0       	ldi	r25, 0x00	; 0
    23ae:	a0 e8       	ldi	r26, 0x80	; 128
    23b0:	bf e3       	ldi	r27, 0x3F	; 63
    23b2:	8f a3       	std	Y+39, r24	; 0x27
    23b4:	98 a7       	std	Y+40, r25	; 0x28
    23b6:	a9 a7       	std	Y+41, r26	; 0x29
    23b8:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23ba:	6f a1       	ldd	r22, Y+39	; 0x27
    23bc:	78 a5       	ldd	r23, Y+40	; 0x28
    23be:	89 a5       	ldd	r24, Y+41	; 0x29
    23c0:	9a a5       	ldd	r25, Y+42	; 0x2a
    23c2:	20 e0       	ldi	r18, 0x00	; 0
    23c4:	30 e0       	ldi	r19, 0x00	; 0
    23c6:	4a e7       	ldi	r20, 0x7A	; 122
    23c8:	53 e4       	ldi	r21, 0x43	; 67
    23ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23ce:	dc 01       	movw	r26, r24
    23d0:	cb 01       	movw	r24, r22
    23d2:	8b a3       	std	Y+35, r24	; 0x23
    23d4:	9c a3       	std	Y+36, r25	; 0x24
    23d6:	ad a3       	std	Y+37, r26	; 0x25
    23d8:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    23da:	6b a1       	ldd	r22, Y+35	; 0x23
    23dc:	7c a1       	ldd	r23, Y+36	; 0x24
    23de:	8d a1       	ldd	r24, Y+37	; 0x25
    23e0:	9e a1       	ldd	r25, Y+38	; 0x26
    23e2:	20 e0       	ldi	r18, 0x00	; 0
    23e4:	30 e0       	ldi	r19, 0x00	; 0
    23e6:	40 e8       	ldi	r20, 0x80	; 128
    23e8:	5f e3       	ldi	r21, 0x3F	; 63
    23ea:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    23ee:	88 23       	and	r24, r24
    23f0:	2c f4       	brge	.+10     	; 0x23fc <LCD_displayCharacter+0x16a>
		__ticks = 1;
    23f2:	81 e0       	ldi	r24, 0x01	; 1
    23f4:	90 e0       	ldi	r25, 0x00	; 0
    23f6:	9a a3       	std	Y+34, r25	; 0x22
    23f8:	89 a3       	std	Y+33, r24	; 0x21
    23fa:	3f c0       	rjmp	.+126    	; 0x247a <LCD_displayCharacter+0x1e8>
	else if (__tmp > 65535)
    23fc:	6b a1       	ldd	r22, Y+35	; 0x23
    23fe:	7c a1       	ldd	r23, Y+36	; 0x24
    2400:	8d a1       	ldd	r24, Y+37	; 0x25
    2402:	9e a1       	ldd	r25, Y+38	; 0x26
    2404:	20 e0       	ldi	r18, 0x00	; 0
    2406:	3f ef       	ldi	r19, 0xFF	; 255
    2408:	4f e7       	ldi	r20, 0x7F	; 127
    240a:	57 e4       	ldi	r21, 0x47	; 71
    240c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2410:	18 16       	cp	r1, r24
    2412:	4c f5       	brge	.+82     	; 0x2466 <LCD_displayCharacter+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2414:	6f a1       	ldd	r22, Y+39	; 0x27
    2416:	78 a5       	ldd	r23, Y+40	; 0x28
    2418:	89 a5       	ldd	r24, Y+41	; 0x29
    241a:	9a a5       	ldd	r25, Y+42	; 0x2a
    241c:	20 e0       	ldi	r18, 0x00	; 0
    241e:	30 e0       	ldi	r19, 0x00	; 0
    2420:	40 e2       	ldi	r20, 0x20	; 32
    2422:	51 e4       	ldi	r21, 0x41	; 65
    2424:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2428:	dc 01       	movw	r26, r24
    242a:	cb 01       	movw	r24, r22
    242c:	bc 01       	movw	r22, r24
    242e:	cd 01       	movw	r24, r26
    2430:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2434:	dc 01       	movw	r26, r24
    2436:	cb 01       	movw	r24, r22
    2438:	9a a3       	std	Y+34, r25	; 0x22
    243a:	89 a3       	std	Y+33, r24	; 0x21
    243c:	0f c0       	rjmp	.+30     	; 0x245c <LCD_displayCharacter+0x1ca>
    243e:	89 e1       	ldi	r24, 0x19	; 25
    2440:	90 e0       	ldi	r25, 0x00	; 0
    2442:	98 a3       	std	Y+32, r25	; 0x20
    2444:	8f 8f       	std	Y+31, r24	; 0x1f
    2446:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2448:	98 a1       	ldd	r25, Y+32	; 0x20
    244a:	01 97       	sbiw	r24, 0x01	; 1
    244c:	f1 f7       	brne	.-4      	; 0x244a <LCD_displayCharacter+0x1b8>
    244e:	98 a3       	std	Y+32, r25	; 0x20
    2450:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2452:	89 a1       	ldd	r24, Y+33	; 0x21
    2454:	9a a1       	ldd	r25, Y+34	; 0x22
    2456:	01 97       	sbiw	r24, 0x01	; 1
    2458:	9a a3       	std	Y+34, r25	; 0x22
    245a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    245c:	89 a1       	ldd	r24, Y+33	; 0x21
    245e:	9a a1       	ldd	r25, Y+34	; 0x22
    2460:	00 97       	sbiw	r24, 0x00	; 0
    2462:	69 f7       	brne	.-38     	; 0x243e <LCD_displayCharacter+0x1ac>
    2464:	14 c0       	rjmp	.+40     	; 0x248e <LCD_displayCharacter+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2466:	6b a1       	ldd	r22, Y+35	; 0x23
    2468:	7c a1       	ldd	r23, Y+36	; 0x24
    246a:	8d a1       	ldd	r24, Y+37	; 0x25
    246c:	9e a1       	ldd	r25, Y+38	; 0x26
    246e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2472:	dc 01       	movw	r26, r24
    2474:	cb 01       	movw	r24, r22
    2476:	9a a3       	std	Y+34, r25	; 0x22
    2478:	89 a3       	std	Y+33, r24	; 0x21
    247a:	89 a1       	ldd	r24, Y+33	; 0x21
    247c:	9a a1       	ldd	r25, Y+34	; 0x22
    247e:	9e 8f       	std	Y+30, r25	; 0x1e
    2480:	8d 8f       	std	Y+29, r24	; 0x1d
    2482:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2484:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2486:	01 97       	sbiw	r24, 0x01	; 1
    2488:	f1 f7       	brne	.-4      	; 0x2486 <LCD_displayCharacter+0x1f4>
    248a:	9e 8f       	std	Y+30, r25	; 0x1e
    248c:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
    248e:	82 e0       	ldi	r24, 0x02	; 2
    2490:	69 ad       	ldd	r22, Y+57	; 0x39
    2492:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <GPIO_writePort>
    2496:	80 e0       	ldi	r24, 0x00	; 0
    2498:	90 e0       	ldi	r25, 0x00	; 0
    249a:	a0 e8       	ldi	r26, 0x80	; 128
    249c:	bf e3       	ldi	r27, 0x3F	; 63
    249e:	89 8f       	std	Y+25, r24	; 0x19
    24a0:	9a 8f       	std	Y+26, r25	; 0x1a
    24a2:	ab 8f       	std	Y+27, r26	; 0x1b
    24a4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24a6:	69 8d       	ldd	r22, Y+25	; 0x19
    24a8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    24aa:	8b 8d       	ldd	r24, Y+27	; 0x1b
    24ac:	9c 8d       	ldd	r25, Y+28	; 0x1c
    24ae:	20 e0       	ldi	r18, 0x00	; 0
    24b0:	30 e0       	ldi	r19, 0x00	; 0
    24b2:	4a e7       	ldi	r20, 0x7A	; 122
    24b4:	53 e4       	ldi	r21, 0x43	; 67
    24b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24ba:	dc 01       	movw	r26, r24
    24bc:	cb 01       	movw	r24, r22
    24be:	8d 8b       	std	Y+21, r24	; 0x15
    24c0:	9e 8b       	std	Y+22, r25	; 0x16
    24c2:	af 8b       	std	Y+23, r26	; 0x17
    24c4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    24c6:	6d 89       	ldd	r22, Y+21	; 0x15
    24c8:	7e 89       	ldd	r23, Y+22	; 0x16
    24ca:	8f 89       	ldd	r24, Y+23	; 0x17
    24cc:	98 8d       	ldd	r25, Y+24	; 0x18
    24ce:	20 e0       	ldi	r18, 0x00	; 0
    24d0:	30 e0       	ldi	r19, 0x00	; 0
    24d2:	40 e8       	ldi	r20, 0x80	; 128
    24d4:	5f e3       	ldi	r21, 0x3F	; 63
    24d6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    24da:	88 23       	and	r24, r24
    24dc:	2c f4       	brge	.+10     	; 0x24e8 <LCD_displayCharacter+0x256>
		__ticks = 1;
    24de:	81 e0       	ldi	r24, 0x01	; 1
    24e0:	90 e0       	ldi	r25, 0x00	; 0
    24e2:	9c 8b       	std	Y+20, r25	; 0x14
    24e4:	8b 8b       	std	Y+19, r24	; 0x13
    24e6:	3f c0       	rjmp	.+126    	; 0x2566 <LCD_displayCharacter+0x2d4>
	else if (__tmp > 65535)
    24e8:	6d 89       	ldd	r22, Y+21	; 0x15
    24ea:	7e 89       	ldd	r23, Y+22	; 0x16
    24ec:	8f 89       	ldd	r24, Y+23	; 0x17
    24ee:	98 8d       	ldd	r25, Y+24	; 0x18
    24f0:	20 e0       	ldi	r18, 0x00	; 0
    24f2:	3f ef       	ldi	r19, 0xFF	; 255
    24f4:	4f e7       	ldi	r20, 0x7F	; 127
    24f6:	57 e4       	ldi	r21, 0x47	; 71
    24f8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    24fc:	18 16       	cp	r1, r24
    24fe:	4c f5       	brge	.+82     	; 0x2552 <LCD_displayCharacter+0x2c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2500:	69 8d       	ldd	r22, Y+25	; 0x19
    2502:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2504:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2506:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2508:	20 e0       	ldi	r18, 0x00	; 0
    250a:	30 e0       	ldi	r19, 0x00	; 0
    250c:	40 e2       	ldi	r20, 0x20	; 32
    250e:	51 e4       	ldi	r21, 0x41	; 65
    2510:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2514:	dc 01       	movw	r26, r24
    2516:	cb 01       	movw	r24, r22
    2518:	bc 01       	movw	r22, r24
    251a:	cd 01       	movw	r24, r26
    251c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2520:	dc 01       	movw	r26, r24
    2522:	cb 01       	movw	r24, r22
    2524:	9c 8b       	std	Y+20, r25	; 0x14
    2526:	8b 8b       	std	Y+19, r24	; 0x13
    2528:	0f c0       	rjmp	.+30     	; 0x2548 <LCD_displayCharacter+0x2b6>
    252a:	89 e1       	ldi	r24, 0x19	; 25
    252c:	90 e0       	ldi	r25, 0x00	; 0
    252e:	9a 8b       	std	Y+18, r25	; 0x12
    2530:	89 8b       	std	Y+17, r24	; 0x11
    2532:	89 89       	ldd	r24, Y+17	; 0x11
    2534:	9a 89       	ldd	r25, Y+18	; 0x12
    2536:	01 97       	sbiw	r24, 0x01	; 1
    2538:	f1 f7       	brne	.-4      	; 0x2536 <LCD_displayCharacter+0x2a4>
    253a:	9a 8b       	std	Y+18, r25	; 0x12
    253c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    253e:	8b 89       	ldd	r24, Y+19	; 0x13
    2540:	9c 89       	ldd	r25, Y+20	; 0x14
    2542:	01 97       	sbiw	r24, 0x01	; 1
    2544:	9c 8b       	std	Y+20, r25	; 0x14
    2546:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2548:	8b 89       	ldd	r24, Y+19	; 0x13
    254a:	9c 89       	ldd	r25, Y+20	; 0x14
    254c:	00 97       	sbiw	r24, 0x00	; 0
    254e:	69 f7       	brne	.-38     	; 0x252a <LCD_displayCharacter+0x298>
    2550:	14 c0       	rjmp	.+40     	; 0x257a <LCD_displayCharacter+0x2e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2552:	6d 89       	ldd	r22, Y+21	; 0x15
    2554:	7e 89       	ldd	r23, Y+22	; 0x16
    2556:	8f 89       	ldd	r24, Y+23	; 0x17
    2558:	98 8d       	ldd	r25, Y+24	; 0x18
    255a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    255e:	dc 01       	movw	r26, r24
    2560:	cb 01       	movw	r24, r22
    2562:	9c 8b       	std	Y+20, r25	; 0x14
    2564:	8b 8b       	std	Y+19, r24	; 0x13
    2566:	8b 89       	ldd	r24, Y+19	; 0x13
    2568:	9c 89       	ldd	r25, Y+20	; 0x14
    256a:	98 8b       	std	Y+16, r25	; 0x10
    256c:	8f 87       	std	Y+15, r24	; 0x0f
    256e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2570:	98 89       	ldd	r25, Y+16	; 0x10
    2572:	01 97       	sbiw	r24, 0x01	; 1
    2574:	f1 f7       	brne	.-4      	; 0x2572 <LCD_displayCharacter+0x2e0>
    2576:	98 8b       	std	Y+16, r25	; 0x10
    2578:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    257a:	83 e0       	ldi	r24, 0x03	; 3
    257c:	66 e0       	ldi	r22, 0x06	; 6
    257e:	40 e0       	ldi	r20, 0x00	; 0
    2580:	0e 94 e7 0b 	call	0x17ce	; 0x17ce <GPIO_writePin>
    2584:	80 e0       	ldi	r24, 0x00	; 0
    2586:	90 e0       	ldi	r25, 0x00	; 0
    2588:	a0 e8       	ldi	r26, 0x80	; 128
    258a:	bf e3       	ldi	r27, 0x3F	; 63
    258c:	8b 87       	std	Y+11, r24	; 0x0b
    258e:	9c 87       	std	Y+12, r25	; 0x0c
    2590:	ad 87       	std	Y+13, r26	; 0x0d
    2592:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2594:	6b 85       	ldd	r22, Y+11	; 0x0b
    2596:	7c 85       	ldd	r23, Y+12	; 0x0c
    2598:	8d 85       	ldd	r24, Y+13	; 0x0d
    259a:	9e 85       	ldd	r25, Y+14	; 0x0e
    259c:	20 e0       	ldi	r18, 0x00	; 0
    259e:	30 e0       	ldi	r19, 0x00	; 0
    25a0:	4a e7       	ldi	r20, 0x7A	; 122
    25a2:	53 e4       	ldi	r21, 0x43	; 67
    25a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25a8:	dc 01       	movw	r26, r24
    25aa:	cb 01       	movw	r24, r22
    25ac:	8f 83       	std	Y+7, r24	; 0x07
    25ae:	98 87       	std	Y+8, r25	; 0x08
    25b0:	a9 87       	std	Y+9, r26	; 0x09
    25b2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    25b4:	6f 81       	ldd	r22, Y+7	; 0x07
    25b6:	78 85       	ldd	r23, Y+8	; 0x08
    25b8:	89 85       	ldd	r24, Y+9	; 0x09
    25ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    25bc:	20 e0       	ldi	r18, 0x00	; 0
    25be:	30 e0       	ldi	r19, 0x00	; 0
    25c0:	40 e8       	ldi	r20, 0x80	; 128
    25c2:	5f e3       	ldi	r21, 0x3F	; 63
    25c4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    25c8:	88 23       	and	r24, r24
    25ca:	2c f4       	brge	.+10     	; 0x25d6 <LCD_displayCharacter+0x344>
		__ticks = 1;
    25cc:	81 e0       	ldi	r24, 0x01	; 1
    25ce:	90 e0       	ldi	r25, 0x00	; 0
    25d0:	9e 83       	std	Y+6, r25	; 0x06
    25d2:	8d 83       	std	Y+5, r24	; 0x05
    25d4:	3f c0       	rjmp	.+126    	; 0x2654 <LCD_displayCharacter+0x3c2>
	else if (__tmp > 65535)
    25d6:	6f 81       	ldd	r22, Y+7	; 0x07
    25d8:	78 85       	ldd	r23, Y+8	; 0x08
    25da:	89 85       	ldd	r24, Y+9	; 0x09
    25dc:	9a 85       	ldd	r25, Y+10	; 0x0a
    25de:	20 e0       	ldi	r18, 0x00	; 0
    25e0:	3f ef       	ldi	r19, 0xFF	; 255
    25e2:	4f e7       	ldi	r20, 0x7F	; 127
    25e4:	57 e4       	ldi	r21, 0x47	; 71
    25e6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    25ea:	18 16       	cp	r1, r24
    25ec:	4c f5       	brge	.+82     	; 0x2640 <LCD_displayCharacter+0x3ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25ee:	6b 85       	ldd	r22, Y+11	; 0x0b
    25f0:	7c 85       	ldd	r23, Y+12	; 0x0c
    25f2:	8d 85       	ldd	r24, Y+13	; 0x0d
    25f4:	9e 85       	ldd	r25, Y+14	; 0x0e
    25f6:	20 e0       	ldi	r18, 0x00	; 0
    25f8:	30 e0       	ldi	r19, 0x00	; 0
    25fa:	40 e2       	ldi	r20, 0x20	; 32
    25fc:	51 e4       	ldi	r21, 0x41	; 65
    25fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2602:	dc 01       	movw	r26, r24
    2604:	cb 01       	movw	r24, r22
    2606:	bc 01       	movw	r22, r24
    2608:	cd 01       	movw	r24, r26
    260a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    260e:	dc 01       	movw	r26, r24
    2610:	cb 01       	movw	r24, r22
    2612:	9e 83       	std	Y+6, r25	; 0x06
    2614:	8d 83       	std	Y+5, r24	; 0x05
    2616:	0f c0       	rjmp	.+30     	; 0x2636 <LCD_displayCharacter+0x3a4>
    2618:	89 e1       	ldi	r24, 0x19	; 25
    261a:	90 e0       	ldi	r25, 0x00	; 0
    261c:	9c 83       	std	Y+4, r25	; 0x04
    261e:	8b 83       	std	Y+3, r24	; 0x03
    2620:	8b 81       	ldd	r24, Y+3	; 0x03
    2622:	9c 81       	ldd	r25, Y+4	; 0x04
    2624:	01 97       	sbiw	r24, 0x01	; 1
    2626:	f1 f7       	brne	.-4      	; 0x2624 <LCD_displayCharacter+0x392>
    2628:	9c 83       	std	Y+4, r25	; 0x04
    262a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    262c:	8d 81       	ldd	r24, Y+5	; 0x05
    262e:	9e 81       	ldd	r25, Y+6	; 0x06
    2630:	01 97       	sbiw	r24, 0x01	; 1
    2632:	9e 83       	std	Y+6, r25	; 0x06
    2634:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2636:	8d 81       	ldd	r24, Y+5	; 0x05
    2638:	9e 81       	ldd	r25, Y+6	; 0x06
    263a:	00 97       	sbiw	r24, 0x00	; 0
    263c:	69 f7       	brne	.-38     	; 0x2618 <LCD_displayCharacter+0x386>
    263e:	14 c0       	rjmp	.+40     	; 0x2668 <LCD_displayCharacter+0x3d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2640:	6f 81       	ldd	r22, Y+7	; 0x07
    2642:	78 85       	ldd	r23, Y+8	; 0x08
    2644:	89 85       	ldd	r24, Y+9	; 0x09
    2646:	9a 85       	ldd	r25, Y+10	; 0x0a
    2648:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    264c:	dc 01       	movw	r26, r24
    264e:	cb 01       	movw	r24, r22
    2650:	9e 83       	std	Y+6, r25	; 0x06
    2652:	8d 83       	std	Y+5, r24	; 0x05
    2654:	8d 81       	ldd	r24, Y+5	; 0x05
    2656:	9e 81       	ldd	r25, Y+6	; 0x06
    2658:	9a 83       	std	Y+2, r25	; 0x02
    265a:	89 83       	std	Y+1, r24	; 0x01
    265c:	89 81       	ldd	r24, Y+1	; 0x01
    265e:	9a 81       	ldd	r25, Y+2	; 0x02
    2660:	01 97       	sbiw	r24, 0x01	; 1
    2662:	f1 f7       	brne	.-4      	; 0x2660 <LCD_displayCharacter+0x3ce>
    2664:	9a 83       	std	Y+2, r25	; 0x02
    2666:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
}
    2668:	e9 96       	adiw	r28, 0x39	; 57
    266a:	0f b6       	in	r0, 0x3f	; 63
    266c:	f8 94       	cli
    266e:	de bf       	out	0x3e, r29	; 62
    2670:	0f be       	out	0x3f, r0	; 63
    2672:	cd bf       	out	0x3d, r28	; 61
    2674:	cf 91       	pop	r28
    2676:	df 91       	pop	r29
    2678:	08 95       	ret

0000267a <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    267a:	df 93       	push	r29
    267c:	cf 93       	push	r28
    267e:	00 d0       	rcall	.+0      	; 0x2680 <LCD_displayString+0x6>
    2680:	0f 92       	push	r0
    2682:	cd b7       	in	r28, 0x3d	; 61
    2684:	de b7       	in	r29, 0x3e	; 62
    2686:	9b 83       	std	Y+3, r25	; 0x03
    2688:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    268a:	19 82       	std	Y+1, r1	; 0x01
    268c:	0e c0       	rjmp	.+28     	; 0x26aa <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    268e:	89 81       	ldd	r24, Y+1	; 0x01
    2690:	28 2f       	mov	r18, r24
    2692:	30 e0       	ldi	r19, 0x00	; 0
    2694:	8a 81       	ldd	r24, Y+2	; 0x02
    2696:	9b 81       	ldd	r25, Y+3	; 0x03
    2698:	fc 01       	movw	r30, r24
    269a:	e2 0f       	add	r30, r18
    269c:	f3 1f       	adc	r31, r19
    269e:	80 81       	ld	r24, Z
    26a0:	0e 94 49 11 	call	0x2292	; 0x2292 <LCD_displayCharacter>
		i++;
    26a4:	89 81       	ldd	r24, Y+1	; 0x01
    26a6:	8f 5f       	subi	r24, 0xFF	; 255
    26a8:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    26aa:	89 81       	ldd	r24, Y+1	; 0x01
    26ac:	28 2f       	mov	r18, r24
    26ae:	30 e0       	ldi	r19, 0x00	; 0
    26b0:	8a 81       	ldd	r24, Y+2	; 0x02
    26b2:	9b 81       	ldd	r25, Y+3	; 0x03
    26b4:	fc 01       	movw	r30, r24
    26b6:	e2 0f       	add	r30, r18
    26b8:	f3 1f       	adc	r31, r19
    26ba:	80 81       	ld	r24, Z
    26bc:	88 23       	and	r24, r24
    26be:	39 f7       	brne	.-50     	; 0x268e <LCD_displayString+0x14>
	{
		LCD_displayCharacter(Str[i]);
		i++;
	}

}
    26c0:	0f 90       	pop	r0
    26c2:	0f 90       	pop	r0
    26c4:	0f 90       	pop	r0
    26c6:	cf 91       	pop	r28
    26c8:	df 91       	pop	r29
    26ca:	08 95       	ret

000026cc <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    26cc:	df 93       	push	r29
    26ce:	cf 93       	push	r28
    26d0:	00 d0       	rcall	.+0      	; 0x26d2 <LCD_moveCursor+0x6>
    26d2:	00 d0       	rcall	.+0      	; 0x26d4 <LCD_moveCursor+0x8>
    26d4:	0f 92       	push	r0
    26d6:	cd b7       	in	r28, 0x3d	; 61
    26d8:	de b7       	in	r29, 0x3e	; 62
    26da:	8a 83       	std	Y+2, r24	; 0x02
    26dc:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    26de:	8a 81       	ldd	r24, Y+2	; 0x02
    26e0:	28 2f       	mov	r18, r24
    26e2:	30 e0       	ldi	r19, 0x00	; 0
    26e4:	3d 83       	std	Y+5, r19	; 0x05
    26e6:	2c 83       	std	Y+4, r18	; 0x04
    26e8:	8c 81       	ldd	r24, Y+4	; 0x04
    26ea:	9d 81       	ldd	r25, Y+5	; 0x05
    26ec:	81 30       	cpi	r24, 0x01	; 1
    26ee:	91 05       	cpc	r25, r1
    26f0:	c1 f0       	breq	.+48     	; 0x2722 <LCD_moveCursor+0x56>
    26f2:	2c 81       	ldd	r18, Y+4	; 0x04
    26f4:	3d 81       	ldd	r19, Y+5	; 0x05
    26f6:	22 30       	cpi	r18, 0x02	; 2
    26f8:	31 05       	cpc	r19, r1
    26fa:	2c f4       	brge	.+10     	; 0x2706 <LCD_moveCursor+0x3a>
    26fc:	8c 81       	ldd	r24, Y+4	; 0x04
    26fe:	9d 81       	ldd	r25, Y+5	; 0x05
    2700:	00 97       	sbiw	r24, 0x00	; 0
    2702:	61 f0       	breq	.+24     	; 0x271c <LCD_moveCursor+0x50>
    2704:	19 c0       	rjmp	.+50     	; 0x2738 <LCD_moveCursor+0x6c>
    2706:	2c 81       	ldd	r18, Y+4	; 0x04
    2708:	3d 81       	ldd	r19, Y+5	; 0x05
    270a:	22 30       	cpi	r18, 0x02	; 2
    270c:	31 05       	cpc	r19, r1
    270e:	69 f0       	breq	.+26     	; 0x272a <LCD_moveCursor+0x5e>
    2710:	8c 81       	ldd	r24, Y+4	; 0x04
    2712:	9d 81       	ldd	r25, Y+5	; 0x05
    2714:	83 30       	cpi	r24, 0x03	; 3
    2716:	91 05       	cpc	r25, r1
    2718:	61 f0       	breq	.+24     	; 0x2732 <LCD_moveCursor+0x66>
    271a:	0e c0       	rjmp	.+28     	; 0x2738 <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    271c:	8b 81       	ldd	r24, Y+3	; 0x03
    271e:	89 83       	std	Y+1, r24	; 0x01
    2720:	0b c0       	rjmp	.+22     	; 0x2738 <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    2722:	8b 81       	ldd	r24, Y+3	; 0x03
    2724:	80 5c       	subi	r24, 0xC0	; 192
    2726:	89 83       	std	Y+1, r24	; 0x01
    2728:	07 c0       	rjmp	.+14     	; 0x2738 <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    272a:	8b 81       	ldd	r24, Y+3	; 0x03
    272c:	80 5f       	subi	r24, 0xF0	; 240
    272e:	89 83       	std	Y+1, r24	; 0x01
    2730:	03 c0       	rjmp	.+6      	; 0x2738 <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    2732:	8b 81       	ldd	r24, Y+3	; 0x03
    2734:	80 5b       	subi	r24, 0xB0	; 176
    2736:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    2738:	89 81       	ldd	r24, Y+1	; 0x01
    273a:	80 68       	ori	r24, 0x80	; 128
    273c:	0e 94 55 0f 	call	0x1eaa	; 0x1eaa <LCD_sendCommand>
}
    2740:	0f 90       	pop	r0
    2742:	0f 90       	pop	r0
    2744:	0f 90       	pop	r0
    2746:	0f 90       	pop	r0
    2748:	0f 90       	pop	r0
    274a:	cf 91       	pop	r28
    274c:	df 91       	pop	r29
    274e:	08 95       	ret

00002750 <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    2750:	df 93       	push	r29
    2752:	cf 93       	push	r28
    2754:	00 d0       	rcall	.+0      	; 0x2756 <LCD_displayStringRowColumn+0x6>
    2756:	00 d0       	rcall	.+0      	; 0x2758 <LCD_displayStringRowColumn+0x8>
    2758:	cd b7       	in	r28, 0x3d	; 61
    275a:	de b7       	in	r29, 0x3e	; 62
    275c:	89 83       	std	Y+1, r24	; 0x01
    275e:	6a 83       	std	Y+2, r22	; 0x02
    2760:	5c 83       	std	Y+4, r21	; 0x04
    2762:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    2764:	89 81       	ldd	r24, Y+1	; 0x01
    2766:	6a 81       	ldd	r22, Y+2	; 0x02
    2768:	0e 94 66 13 	call	0x26cc	; 0x26cc <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    276c:	8b 81       	ldd	r24, Y+3	; 0x03
    276e:	9c 81       	ldd	r25, Y+4	; 0x04
    2770:	0e 94 3d 13 	call	0x267a	; 0x267a <LCD_displayString>
}
    2774:	0f 90       	pop	r0
    2776:	0f 90       	pop	r0
    2778:	0f 90       	pop	r0
    277a:	0f 90       	pop	r0
    277c:	cf 91       	pop	r28
    277e:	df 91       	pop	r29
    2780:	08 95       	ret

00002782 <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    2782:	df 93       	push	r29
    2784:	cf 93       	push	r28
    2786:	cd b7       	in	r28, 0x3d	; 61
    2788:	de b7       	in	r29, 0x3e	; 62
    278a:	62 97       	sbiw	r28, 0x12	; 18
    278c:	0f b6       	in	r0, 0x3f	; 63
    278e:	f8 94       	cli
    2790:	de bf       	out	0x3e, r29	; 62
    2792:	0f be       	out	0x3f, r0	; 63
    2794:	cd bf       	out	0x3d, r28	; 61
    2796:	9a 8b       	std	Y+18, r25	; 0x12
    2798:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    279a:	89 89       	ldd	r24, Y+17	; 0x11
    279c:	9a 89       	ldd	r25, Y+18	; 0x12
    279e:	9e 01       	movw	r18, r28
    27a0:	2f 5f       	subi	r18, 0xFF	; 255
    27a2:	3f 4f       	sbci	r19, 0xFF	; 255
    27a4:	b9 01       	movw	r22, r18
    27a6:	4a e0       	ldi	r20, 0x0A	; 10
    27a8:	50 e0       	ldi	r21, 0x00	; 0
    27aa:	0e 94 7f 18 	call	0x30fe	; 0x30fe <itoa>
   LCD_displayString(buff); /* Display the string */
    27ae:	ce 01       	movw	r24, r28
    27b0:	01 96       	adiw	r24, 0x01	; 1
    27b2:	0e 94 3d 13 	call	0x267a	; 0x267a <LCD_displayString>
}
    27b6:	62 96       	adiw	r28, 0x12	; 18
    27b8:	0f b6       	in	r0, 0x3f	; 63
    27ba:	f8 94       	cli
    27bc:	de bf       	out	0x3e, r29	; 62
    27be:	0f be       	out	0x3f, r0	; 63
    27c0:	cd bf       	out	0x3d, r28	; 61
    27c2:	cf 91       	pop	r28
    27c4:	df 91       	pop	r29
    27c6:	08 95       	ret

000027c8 <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    27c8:	df 93       	push	r29
    27ca:	cf 93       	push	r28
    27cc:	cd b7       	in	r28, 0x3d	; 61
    27ce:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    27d0:	81 e0       	ldi	r24, 0x01	; 1
    27d2:	0e 94 55 0f 	call	0x1eaa	; 0x1eaa <LCD_sendCommand>
}
    27d6:	cf 91       	pop	r28
    27d8:	df 91       	pop	r29
    27da:	08 95       	ret

000027dc <__vector_9>:
 *******************************************************************************/

/*************************************Timer0***********************************/

ISR(TIMER0_OVF_vect)
{
    27dc:	1f 92       	push	r1
    27de:	0f 92       	push	r0
    27e0:	0f b6       	in	r0, 0x3f	; 63
    27e2:	0f 92       	push	r0
    27e4:	11 24       	eor	r1, r1
    27e6:	2f 93       	push	r18
    27e8:	3f 93       	push	r19
    27ea:	4f 93       	push	r20
    27ec:	5f 93       	push	r21
    27ee:	6f 93       	push	r22
    27f0:	7f 93       	push	r23
    27f2:	8f 93       	push	r24
    27f4:	9f 93       	push	r25
    27f6:	af 93       	push	r26
    27f8:	bf 93       	push	r27
    27fa:	ef 93       	push	r30
    27fc:	ff 93       	push	r31
    27fe:	df 93       	push	r29
    2800:	cf 93       	push	r28
    2802:	cd b7       	in	r28, 0x3d	; 61
    2804:	de b7       	in	r29, 0x3e	; 62
	if(g_Timer0CallBackPtr != NULL_PTR)
    2806:	80 91 33 01 	lds	r24, 0x0133
    280a:	90 91 34 01 	lds	r25, 0x0134
    280e:	00 97       	sbiw	r24, 0x00	; 0
    2810:	29 f0       	breq	.+10     	; 0x281c <__vector_9+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_Timer0CallBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    2812:	e0 91 33 01 	lds	r30, 0x0133
    2816:	f0 91 34 01 	lds	r31, 0x0134
    281a:	09 95       	icall
	}
}
    281c:	cf 91       	pop	r28
    281e:	df 91       	pop	r29
    2820:	ff 91       	pop	r31
    2822:	ef 91       	pop	r30
    2824:	bf 91       	pop	r27
    2826:	af 91       	pop	r26
    2828:	9f 91       	pop	r25
    282a:	8f 91       	pop	r24
    282c:	7f 91       	pop	r23
    282e:	6f 91       	pop	r22
    2830:	5f 91       	pop	r21
    2832:	4f 91       	pop	r20
    2834:	3f 91       	pop	r19
    2836:	2f 91       	pop	r18
    2838:	0f 90       	pop	r0
    283a:	0f be       	out	0x3f, r0	; 63
    283c:	0f 90       	pop	r0
    283e:	1f 90       	pop	r1
    2840:	18 95       	reti

00002842 <__vector_19>:


ISR(TIMER0_COMP_vect)
{
    2842:	1f 92       	push	r1
    2844:	0f 92       	push	r0
    2846:	0f b6       	in	r0, 0x3f	; 63
    2848:	0f 92       	push	r0
    284a:	11 24       	eor	r1, r1
    284c:	2f 93       	push	r18
    284e:	3f 93       	push	r19
    2850:	4f 93       	push	r20
    2852:	5f 93       	push	r21
    2854:	6f 93       	push	r22
    2856:	7f 93       	push	r23
    2858:	8f 93       	push	r24
    285a:	9f 93       	push	r25
    285c:	af 93       	push	r26
    285e:	bf 93       	push	r27
    2860:	ef 93       	push	r30
    2862:	ff 93       	push	r31
    2864:	df 93       	push	r29
    2866:	cf 93       	push	r28
    2868:	cd b7       	in	r28, 0x3d	; 61
    286a:	de b7       	in	r29, 0x3e	; 62
	if(g_Timer0CallBackPtr != NULL_PTR)
    286c:	80 91 33 01 	lds	r24, 0x0133
    2870:	90 91 34 01 	lds	r25, 0x0134
    2874:	00 97       	sbiw	r24, 0x00	; 0
    2876:	29 f0       	breq	.+10     	; 0x2882 <__vector_19+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_Timer0CallBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    2878:	e0 91 33 01 	lds	r30, 0x0133
    287c:	f0 91 34 01 	lds	r31, 0x0134
    2880:	09 95       	icall
	}
}
    2882:	cf 91       	pop	r28
    2884:	df 91       	pop	r29
    2886:	ff 91       	pop	r31
    2888:	ef 91       	pop	r30
    288a:	bf 91       	pop	r27
    288c:	af 91       	pop	r26
    288e:	9f 91       	pop	r25
    2890:	8f 91       	pop	r24
    2892:	7f 91       	pop	r23
    2894:	6f 91       	pop	r22
    2896:	5f 91       	pop	r21
    2898:	4f 91       	pop	r20
    289a:	3f 91       	pop	r19
    289c:	2f 91       	pop	r18
    289e:	0f 90       	pop	r0
    28a0:	0f be       	out	0x3f, r0	; 63
    28a2:	0f 90       	pop	r0
    28a4:	1f 90       	pop	r1
    28a6:	18 95       	reti

000028a8 <__vector_8>:
/*************************************Timer1***********************************/

ISR(TIMER1_OVF_vect)
{
    28a8:	1f 92       	push	r1
    28aa:	0f 92       	push	r0
    28ac:	0f b6       	in	r0, 0x3f	; 63
    28ae:	0f 92       	push	r0
    28b0:	11 24       	eor	r1, r1
    28b2:	2f 93       	push	r18
    28b4:	3f 93       	push	r19
    28b6:	4f 93       	push	r20
    28b8:	5f 93       	push	r21
    28ba:	6f 93       	push	r22
    28bc:	7f 93       	push	r23
    28be:	8f 93       	push	r24
    28c0:	9f 93       	push	r25
    28c2:	af 93       	push	r26
    28c4:	bf 93       	push	r27
    28c6:	ef 93       	push	r30
    28c8:	ff 93       	push	r31
    28ca:	df 93       	push	r29
    28cc:	cf 93       	push	r28
    28ce:	cd b7       	in	r28, 0x3d	; 61
    28d0:	de b7       	in	r29, 0x3e	; 62
	if(g_Timer1CallBackPtr != NULL_PTR)
    28d2:	80 91 35 01 	lds	r24, 0x0135
    28d6:	90 91 36 01 	lds	r25, 0x0136
    28da:	00 97       	sbiw	r24, 0x00	; 0
    28dc:	29 f0       	breq	.+10     	; 0x28e8 <__vector_8+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_Timer1CallBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    28de:	e0 91 35 01 	lds	r30, 0x0135
    28e2:	f0 91 36 01 	lds	r31, 0x0136
    28e6:	09 95       	icall
	}
}
    28e8:	cf 91       	pop	r28
    28ea:	df 91       	pop	r29
    28ec:	ff 91       	pop	r31
    28ee:	ef 91       	pop	r30
    28f0:	bf 91       	pop	r27
    28f2:	af 91       	pop	r26
    28f4:	9f 91       	pop	r25
    28f6:	8f 91       	pop	r24
    28f8:	7f 91       	pop	r23
    28fa:	6f 91       	pop	r22
    28fc:	5f 91       	pop	r21
    28fe:	4f 91       	pop	r20
    2900:	3f 91       	pop	r19
    2902:	2f 91       	pop	r18
    2904:	0f 90       	pop	r0
    2906:	0f be       	out	0x3f, r0	; 63
    2908:	0f 90       	pop	r0
    290a:	1f 90       	pop	r1
    290c:	18 95       	reti

0000290e <__vector_6>:


ISR(TIMER1_COMPA_vect)
{
    290e:	1f 92       	push	r1
    2910:	0f 92       	push	r0
    2912:	0f b6       	in	r0, 0x3f	; 63
    2914:	0f 92       	push	r0
    2916:	11 24       	eor	r1, r1
    2918:	2f 93       	push	r18
    291a:	3f 93       	push	r19
    291c:	4f 93       	push	r20
    291e:	5f 93       	push	r21
    2920:	6f 93       	push	r22
    2922:	7f 93       	push	r23
    2924:	8f 93       	push	r24
    2926:	9f 93       	push	r25
    2928:	af 93       	push	r26
    292a:	bf 93       	push	r27
    292c:	ef 93       	push	r30
    292e:	ff 93       	push	r31
    2930:	df 93       	push	r29
    2932:	cf 93       	push	r28
    2934:	cd b7       	in	r28, 0x3d	; 61
    2936:	de b7       	in	r29, 0x3e	; 62
	if(g_Timer1CallBackPtr != NULL_PTR)
    2938:	80 91 35 01 	lds	r24, 0x0135
    293c:	90 91 36 01 	lds	r25, 0x0136
    2940:	00 97       	sbiw	r24, 0x00	; 0
    2942:	29 f0       	breq	.+10     	; 0x294e <__vector_6+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_Timer1CallBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    2944:	e0 91 35 01 	lds	r30, 0x0135
    2948:	f0 91 36 01 	lds	r31, 0x0136
    294c:	09 95       	icall
	}
}
    294e:	cf 91       	pop	r28
    2950:	df 91       	pop	r29
    2952:	ff 91       	pop	r31
    2954:	ef 91       	pop	r30
    2956:	bf 91       	pop	r27
    2958:	af 91       	pop	r26
    295a:	9f 91       	pop	r25
    295c:	8f 91       	pop	r24
    295e:	7f 91       	pop	r23
    2960:	6f 91       	pop	r22
    2962:	5f 91       	pop	r21
    2964:	4f 91       	pop	r20
    2966:	3f 91       	pop	r19
    2968:	2f 91       	pop	r18
    296a:	0f 90       	pop	r0
    296c:	0f be       	out	0x3f, r0	; 63
    296e:	0f 90       	pop	r0
    2970:	1f 90       	pop	r1
    2972:	18 95       	reti

00002974 <__vector_4>:
/*************************************Timer2***********************************/
ISR(TIMER2_OVF_vect)
{
    2974:	1f 92       	push	r1
    2976:	0f 92       	push	r0
    2978:	0f b6       	in	r0, 0x3f	; 63
    297a:	0f 92       	push	r0
    297c:	11 24       	eor	r1, r1
    297e:	2f 93       	push	r18
    2980:	3f 93       	push	r19
    2982:	4f 93       	push	r20
    2984:	5f 93       	push	r21
    2986:	6f 93       	push	r22
    2988:	7f 93       	push	r23
    298a:	8f 93       	push	r24
    298c:	9f 93       	push	r25
    298e:	af 93       	push	r26
    2990:	bf 93       	push	r27
    2992:	ef 93       	push	r30
    2994:	ff 93       	push	r31
    2996:	df 93       	push	r29
    2998:	cf 93       	push	r28
    299a:	cd b7       	in	r28, 0x3d	; 61
    299c:	de b7       	in	r29, 0x3e	; 62
	if(g_Timer2CallBackPtr != NULL_PTR)
    299e:	80 91 37 01 	lds	r24, 0x0137
    29a2:	90 91 38 01 	lds	r25, 0x0138
    29a6:	00 97       	sbiw	r24, 0x00	; 0
    29a8:	29 f0       	breq	.+10     	; 0x29b4 <__vector_4+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_Timer2CallBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    29aa:	e0 91 37 01 	lds	r30, 0x0137
    29ae:	f0 91 38 01 	lds	r31, 0x0138
    29b2:	09 95       	icall
	}
}
    29b4:	cf 91       	pop	r28
    29b6:	df 91       	pop	r29
    29b8:	ff 91       	pop	r31
    29ba:	ef 91       	pop	r30
    29bc:	bf 91       	pop	r27
    29be:	af 91       	pop	r26
    29c0:	9f 91       	pop	r25
    29c2:	8f 91       	pop	r24
    29c4:	7f 91       	pop	r23
    29c6:	6f 91       	pop	r22
    29c8:	5f 91       	pop	r21
    29ca:	4f 91       	pop	r20
    29cc:	3f 91       	pop	r19
    29ce:	2f 91       	pop	r18
    29d0:	0f 90       	pop	r0
    29d2:	0f be       	out	0x3f, r0	; 63
    29d4:	0f 90       	pop	r0
    29d6:	1f 90       	pop	r1
    29d8:	18 95       	reti

000029da <__vector_3>:


ISR(TIMER2_COMP_vect)
{
    29da:	1f 92       	push	r1
    29dc:	0f 92       	push	r0
    29de:	0f b6       	in	r0, 0x3f	; 63
    29e0:	0f 92       	push	r0
    29e2:	11 24       	eor	r1, r1
    29e4:	2f 93       	push	r18
    29e6:	3f 93       	push	r19
    29e8:	4f 93       	push	r20
    29ea:	5f 93       	push	r21
    29ec:	6f 93       	push	r22
    29ee:	7f 93       	push	r23
    29f0:	8f 93       	push	r24
    29f2:	9f 93       	push	r25
    29f4:	af 93       	push	r26
    29f6:	bf 93       	push	r27
    29f8:	ef 93       	push	r30
    29fa:	ff 93       	push	r31
    29fc:	df 93       	push	r29
    29fe:	cf 93       	push	r28
    2a00:	cd b7       	in	r28, 0x3d	; 61
    2a02:	de b7       	in	r29, 0x3e	; 62
	if(g_Timer2CallBackPtr != NULL_PTR)
    2a04:	80 91 37 01 	lds	r24, 0x0137
    2a08:	90 91 38 01 	lds	r25, 0x0138
    2a0c:	00 97       	sbiw	r24, 0x00	; 0
    2a0e:	29 f0       	breq	.+10     	; 0x2a1a <__vector_3+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_Timer2CallBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    2a10:	e0 91 37 01 	lds	r30, 0x0137
    2a14:	f0 91 38 01 	lds	r31, 0x0138
    2a18:	09 95       	icall
	}
}
    2a1a:	cf 91       	pop	r28
    2a1c:	df 91       	pop	r29
    2a1e:	ff 91       	pop	r31
    2a20:	ef 91       	pop	r30
    2a22:	bf 91       	pop	r27
    2a24:	af 91       	pop	r26
    2a26:	9f 91       	pop	r25
    2a28:	8f 91       	pop	r24
    2a2a:	7f 91       	pop	r23
    2a2c:	6f 91       	pop	r22
    2a2e:	5f 91       	pop	r21
    2a30:	4f 91       	pop	r20
    2a32:	3f 91       	pop	r19
    2a34:	2f 91       	pop	r18
    2a36:	0f 90       	pop	r0
    2a38:	0f be       	out	0x3f, r0	; 63
    2a3a:	0f 90       	pop	r0
    2a3c:	1f 90       	pop	r1
    2a3e:	18 95       	reti

00002a40 <Timer_init>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

void Timer_init(const TIMER_ConfigType * config_Ptr)
{
    2a40:	df 93       	push	r29
    2a42:	cf 93       	push	r28
    2a44:	00 d0       	rcall	.+0      	; 0x2a46 <Timer_init+0x6>
    2a46:	cd b7       	in	r28, 0x3d	; 61
    2a48:	de b7       	in	r29, 0x3e	; 62
    2a4a:	9a 83       	std	Y+2, r25	; 0x02
    2a4c:	89 83       	std	Y+1, r24	; 0x01
	if (config_Ptr->Timer_ID == TIMER0)
    2a4e:	e9 81       	ldd	r30, Y+1	; 0x01
    2a50:	fa 81       	ldd	r31, Y+2	; 0x02
    2a52:	80 81       	ld	r24, Z
    2a54:	88 23       	and	r24, r24
    2a56:	09 f0       	breq	.+2      	; 0x2a5a <Timer_init+0x1a>
    2a58:	70 c0       	rjmp	.+224    	; 0x2b3a <Timer_init+0xfa>
	{
		TCNT0 = (config_Ptr->Init_Value); /* Set Timer Initial Value to 0*/
    2a5a:	22 e5       	ldi	r18, 0x52	; 82
    2a5c:	30 e0       	ldi	r19, 0x00	; 0
    2a5e:	e9 81       	ldd	r30, Y+1	; 0x01
    2a60:	fa 81       	ldd	r31, Y+2	; 0x02
    2a62:	87 81       	ldd	r24, Z+7	; 0x07
    2a64:	90 85       	ldd	r25, Z+8	; 0x08
    2a66:	a1 85       	ldd	r26, Z+9	; 0x09
    2a68:	b2 85       	ldd	r27, Z+10	; 0x0a
    2a6a:	f9 01       	movw	r30, r18
    2a6c:	80 83       	st	Z, r24

		if (config_Ptr->mode == NORMAL)
    2a6e:	e9 81       	ldd	r30, Y+1	; 0x01
    2a70:	fa 81       	ldd	r31, Y+2	; 0x02
    2a72:	82 81       	ldd	r24, Z+2	; 0x02
    2a74:	88 23       	and	r24, r24
    2a76:	41 f4       	brne	.+16     	; 0x2a88 <Timer_init+0x48>
		{
			SET_BIT(TIMSK,OCIE0);
    2a78:	a9 e5       	ldi	r26, 0x59	; 89
    2a7a:	b0 e0       	ldi	r27, 0x00	; 0
    2a7c:	e9 e5       	ldi	r30, 0x59	; 89
    2a7e:	f0 e0       	ldi	r31, 0x00	; 0
    2a80:	80 81       	ld	r24, Z
    2a82:	82 60       	ori	r24, 0x02	; 2
    2a84:	8c 93       	st	X, r24
    2a86:	16 c0       	rjmp	.+44     	; 0x2ab4 <Timer_init+0x74>
		}
		else if (config_Ptr->mode == CTC)
    2a88:	e9 81       	ldd	r30, Y+1	; 0x01
    2a8a:	fa 81       	ldd	r31, Y+2	; 0x02
    2a8c:	82 81       	ldd	r24, Z+2	; 0x02
    2a8e:	82 30       	cpi	r24, 0x02	; 2
    2a90:	89 f4       	brne	.+34     	; 0x2ab4 <Timer_init+0x74>
		{
			SET_BIT(TIMSK,TOIE0);
    2a92:	a9 e5       	ldi	r26, 0x59	; 89
    2a94:	b0 e0       	ldi	r27, 0x00	; 0
    2a96:	e9 e5       	ldi	r30, 0x59	; 89
    2a98:	f0 e0       	ldi	r31, 0x00	; 0
    2a9a:	80 81       	ld	r24, Z
    2a9c:	81 60       	ori	r24, 0x01	; 1
    2a9e:	8c 93       	st	X, r24


			/*Set Timer compare Value*/
			OCR0 = (config_Ptr->Comp_Value) ;
    2aa0:	2c e5       	ldi	r18, 0x5C	; 92
    2aa2:	30 e0       	ldi	r19, 0x00	; 0
    2aa4:	e9 81       	ldd	r30, Y+1	; 0x01
    2aa6:	fa 81       	ldd	r31, Y+2	; 0x02
    2aa8:	83 81       	ldd	r24, Z+3	; 0x03
    2aaa:	94 81       	ldd	r25, Z+4	; 0x04
    2aac:	a5 81       	ldd	r26, Z+5	; 0x05
    2aae:	b6 81       	ldd	r27, Z+6	; 0x06
    2ab0:	f9 01       	movw	r30, r18
    2ab2:	80 83       	st	Z, r24
		/* Configure timer control register
		 * 1.Overflow mode & Compare mode FOC0 = 1
		 * 2.clock = F_CPU/8
		 */

		SET_BIT(TCCR0,FOC0);
    2ab4:	a3 e5       	ldi	r26, 0x53	; 83
    2ab6:	b0 e0       	ldi	r27, 0x00	; 0
    2ab8:	e3 e5       	ldi	r30, 0x53	; 83
    2aba:	f0 e0       	ldi	r31, 0x00	; 0
    2abc:	80 81       	ld	r24, Z
    2abe:	80 68       	ori	r24, 0x80	; 128
    2ac0:	8c 93       	st	X, r24

		/* CLOCK configuration */
		TCCR0 = (TCCR0 & 0xF8) | (config_Ptr->clock);
    2ac2:	a3 e5       	ldi	r26, 0x53	; 83
    2ac4:	b0 e0       	ldi	r27, 0x00	; 0
    2ac6:	e3 e5       	ldi	r30, 0x53	; 83
    2ac8:	f0 e0       	ldi	r31, 0x00	; 0
    2aca:	80 81       	ld	r24, Z
    2acc:	98 2f       	mov	r25, r24
    2ace:	98 7f       	andi	r25, 0xF8	; 248
    2ad0:	e9 81       	ldd	r30, Y+1	; 0x01
    2ad2:	fa 81       	ldd	r31, Y+2	; 0x02
    2ad4:	81 81       	ldd	r24, Z+1	; 0x01
    2ad6:	89 2b       	or	r24, r25
    2ad8:	8c 93       	st	X, r24

		/* MODE Configuration */
		TCCR0 = (TCCR0 & 0xB7) | (((config_Ptr->mode)&0x01)<<WGM00);
    2ada:	a3 e5       	ldi	r26, 0x53	; 83
    2adc:	b0 e0       	ldi	r27, 0x00	; 0
    2ade:	e3 e5       	ldi	r30, 0x53	; 83
    2ae0:	f0 e0       	ldi	r31, 0x00	; 0
    2ae2:	80 81       	ld	r24, Z
    2ae4:	28 2f       	mov	r18, r24
    2ae6:	27 7b       	andi	r18, 0xB7	; 183
    2ae8:	e9 81       	ldd	r30, Y+1	; 0x01
    2aea:	fa 81       	ldd	r31, Y+2	; 0x02
    2aec:	82 81       	ldd	r24, Z+2	; 0x02
    2aee:	88 2f       	mov	r24, r24
    2af0:	90 e0       	ldi	r25, 0x00	; 0
    2af2:	81 70       	andi	r24, 0x01	; 1
    2af4:	90 70       	andi	r25, 0x00	; 0
    2af6:	00 24       	eor	r0, r0
    2af8:	96 95       	lsr	r25
    2afa:	87 95       	ror	r24
    2afc:	07 94       	ror	r0
    2afe:	96 95       	lsr	r25
    2b00:	87 95       	ror	r24
    2b02:	07 94       	ror	r0
    2b04:	98 2f       	mov	r25, r24
    2b06:	80 2d       	mov	r24, r0
    2b08:	82 2b       	or	r24, r18
    2b0a:	8c 93       	st	X, r24
		TCCR0 = (TCCR0 & 0xB7) | (((config_Ptr->mode)&0x02)<<WGM01);
    2b0c:	a3 e5       	ldi	r26, 0x53	; 83
    2b0e:	b0 e0       	ldi	r27, 0x00	; 0
    2b10:	e3 e5       	ldi	r30, 0x53	; 83
    2b12:	f0 e0       	ldi	r31, 0x00	; 0
    2b14:	80 81       	ld	r24, Z
    2b16:	28 2f       	mov	r18, r24
    2b18:	27 7b       	andi	r18, 0xB7	; 183
    2b1a:	e9 81       	ldd	r30, Y+1	; 0x01
    2b1c:	fa 81       	ldd	r31, Y+2	; 0x02
    2b1e:	82 81       	ldd	r24, Z+2	; 0x02
    2b20:	88 2f       	mov	r24, r24
    2b22:	90 e0       	ldi	r25, 0x00	; 0
    2b24:	82 70       	andi	r24, 0x02	; 2
    2b26:	90 70       	andi	r25, 0x00	; 0
    2b28:	88 0f       	add	r24, r24
    2b2a:	99 1f       	adc	r25, r25
    2b2c:	88 0f       	add	r24, r24
    2b2e:	99 1f       	adc	r25, r25
    2b30:	88 0f       	add	r24, r24
    2b32:	99 1f       	adc	r25, r25
    2b34:	82 2b       	or	r24, r18
    2b36:	8c 93       	st	X, r24
    2b38:	bf c0       	rjmp	.+382    	; 0x2cb8 <Timer_init+0x278>

	}
	else if (config_Ptr -> Timer_ID == TIMER1)
    2b3a:	e9 81       	ldd	r30, Y+1	; 0x01
    2b3c:	fa 81       	ldd	r31, Y+2	; 0x02
    2b3e:	80 81       	ld	r24, Z
    2b40:	81 30       	cpi	r24, 0x01	; 1
    2b42:	09 f0       	breq	.+2      	; 0x2b46 <Timer_init+0x106>
    2b44:	5d c0       	rjmp	.+186    	; 0x2c00 <Timer_init+0x1c0>
		{
			TCCR1A =0;
    2b46:	ef e4       	ldi	r30, 0x4F	; 79
    2b48:	f0 e0       	ldi	r31, 0x00	; 0
    2b4a:	10 82       	st	Z, r1
			SET_BIT(TCCR1A,FOC1A); /* for non-PWM mode */
    2b4c:	af e4       	ldi	r26, 0x4F	; 79
    2b4e:	b0 e0       	ldi	r27, 0x00	; 0
    2b50:	ef e4       	ldi	r30, 0x4F	; 79
    2b52:	f0 e0       	ldi	r31, 0x00	; 0
    2b54:	80 81       	ld	r24, Z
    2b56:	88 60       	ori	r24, 0x08	; 8
    2b58:	8c 93       	st	X, r24
			SET_BIT(TCCR1A,FOC1B);
    2b5a:	af e4       	ldi	r26, 0x4F	; 79
    2b5c:	b0 e0       	ldi	r27, 0x00	; 0
    2b5e:	ef e4       	ldi	r30, 0x4F	; 79
    2b60:	f0 e0       	ldi	r31, 0x00	; 0
    2b62:	80 81       	ld	r24, Z
    2b64:	84 60       	ori	r24, 0x04	; 4
    2b66:	8c 93       	st	X, r24
			TCCR1B = config_Ptr -> clock;
    2b68:	ae e4       	ldi	r26, 0x4E	; 78
    2b6a:	b0 e0       	ldi	r27, 0x00	; 0
    2b6c:	e9 81       	ldd	r30, Y+1	; 0x01
    2b6e:	fa 81       	ldd	r31, Y+2	; 0x02
    2b70:	81 81       	ldd	r24, Z+1	; 0x01
    2b72:	8c 93       	st	X, r24
			TCNT1 = config_Ptr -> Init_Value;
    2b74:	2c e4       	ldi	r18, 0x4C	; 76
    2b76:	30 e0       	ldi	r19, 0x00	; 0
    2b78:	e9 81       	ldd	r30, Y+1	; 0x01
    2b7a:	fa 81       	ldd	r31, Y+2	; 0x02
    2b7c:	87 81       	ldd	r24, Z+7	; 0x07
    2b7e:	90 85       	ldd	r25, Z+8	; 0x08
    2b80:	a1 85       	ldd	r26, Z+9	; 0x09
    2b82:	b2 85       	ldd	r27, Z+10	; 0x0a
    2b84:	f9 01       	movw	r30, r18
    2b86:	91 83       	std	Z+1, r25	; 0x01
    2b88:	80 83       	st	Z, r24

			if (config_Ptr -> mode == NORMAL)
    2b8a:	e9 81       	ldd	r30, Y+1	; 0x01
    2b8c:	fa 81       	ldd	r31, Y+2	; 0x02
    2b8e:	82 81       	ldd	r24, Z+2	; 0x02
    2b90:	88 23       	and	r24, r24
    2b92:	79 f4       	brne	.+30     	; 0x2bb2 <Timer_init+0x172>
			{
				SET_BIT(TIMSK, TOIE1); /* enable interrupts for overflow mode */
    2b94:	a9 e5       	ldi	r26, 0x59	; 89
    2b96:	b0 e0       	ldi	r27, 0x00	; 0
    2b98:	e9 e5       	ldi	r30, 0x59	; 89
    2b9a:	f0 e0       	ldi	r31, 0x00	; 0
    2b9c:	80 81       	ld	r24, Z
    2b9e:	84 60       	ori	r24, 0x04	; 4
    2ba0:	8c 93       	st	X, r24
				SET_BIT(TIFR,TOV1);
    2ba2:	a8 e5       	ldi	r26, 0x58	; 88
    2ba4:	b0 e0       	ldi	r27, 0x00	; 0
    2ba6:	e8 e5       	ldi	r30, 0x58	; 88
    2ba8:	f0 e0       	ldi	r31, 0x00	; 0
    2baa:	80 81       	ld	r24, Z
    2bac:	84 60       	ori	r24, 0x04	; 4
    2bae:	8c 93       	st	X, r24
    2bb0:	83 c0       	rjmp	.+262    	; 0x2cb8 <Timer_init+0x278>

			}
			else if (config_Ptr -> mode == CTC)
    2bb2:	e9 81       	ldd	r30, Y+1	; 0x01
    2bb4:	fa 81       	ldd	r31, Y+2	; 0x02
    2bb6:	82 81       	ldd	r24, Z+2	; 0x02
    2bb8:	82 30       	cpi	r24, 0x02	; 2
    2bba:	09 f0       	breq	.+2      	; 0x2bbe <Timer_init+0x17e>
    2bbc:	7d c0       	rjmp	.+250    	; 0x2cb8 <Timer_init+0x278>
			{
				SET_BIT(TCCR1B, WGM12);
    2bbe:	ae e4       	ldi	r26, 0x4E	; 78
    2bc0:	b0 e0       	ldi	r27, 0x00	; 0
    2bc2:	ee e4       	ldi	r30, 0x4E	; 78
    2bc4:	f0 e0       	ldi	r31, 0x00	; 0
    2bc6:	80 81       	ld	r24, Z
    2bc8:	88 60       	ori	r24, 0x08	; 8
    2bca:	8c 93       	st	X, r24
				OCR1A = config_Ptr -> Comp_Value;
    2bcc:	2a e4       	ldi	r18, 0x4A	; 74
    2bce:	30 e0       	ldi	r19, 0x00	; 0
    2bd0:	e9 81       	ldd	r30, Y+1	; 0x01
    2bd2:	fa 81       	ldd	r31, Y+2	; 0x02
    2bd4:	83 81       	ldd	r24, Z+3	; 0x03
    2bd6:	94 81       	ldd	r25, Z+4	; 0x04
    2bd8:	a5 81       	ldd	r26, Z+5	; 0x05
    2bda:	b6 81       	ldd	r27, Z+6	; 0x06
    2bdc:	f9 01       	movw	r30, r18
    2bde:	91 83       	std	Z+1, r25	; 0x01
    2be0:	80 83       	st	Z, r24
				SET_BIT(TIMSK, OCIE1A); /* enable interrupts for CTC mode */
    2be2:	a9 e5       	ldi	r26, 0x59	; 89
    2be4:	b0 e0       	ldi	r27, 0x00	; 0
    2be6:	e9 e5       	ldi	r30, 0x59	; 89
    2be8:	f0 e0       	ldi	r31, 0x00	; 0
    2bea:	80 81       	ld	r24, Z
    2bec:	80 61       	ori	r24, 0x10	; 16
    2bee:	8c 93       	st	X, r24
				SET_BIT(TIFR,OCF1A); /* enable CTC flag */
    2bf0:	a8 e5       	ldi	r26, 0x58	; 88
    2bf2:	b0 e0       	ldi	r27, 0x00	; 0
    2bf4:	e8 e5       	ldi	r30, 0x58	; 88
    2bf6:	f0 e0       	ldi	r31, 0x00	; 0
    2bf8:	80 81       	ld	r24, Z
    2bfa:	80 61       	ori	r24, 0x10	; 16
    2bfc:	8c 93       	st	X, r24
    2bfe:	5c c0       	rjmp	.+184    	; 0x2cb8 <Timer_init+0x278>
			}
		}

	else if (config_Ptr -> Timer_ID == TIMER2)
    2c00:	e9 81       	ldd	r30, Y+1	; 0x01
    2c02:	fa 81       	ldd	r31, Y+2	; 0x02
    2c04:	80 81       	ld	r24, Z
    2c06:	82 30       	cpi	r24, 0x02	; 2
    2c08:	09 f0       	breq	.+2      	; 0x2c0c <Timer_init+0x1cc>
    2c0a:	56 c0       	rjmp	.+172    	; 0x2cb8 <Timer_init+0x278>
	{
		if (config_Ptr -> mode == NORMAL)
    2c0c:	e9 81       	ldd	r30, Y+1	; 0x01
    2c0e:	fa 81       	ldd	r31, Y+2	; 0x02
    2c10:	82 81       	ldd	r24, Z+2	; 0x02
    2c12:	88 23       	and	r24, r24
    2c14:	79 f4       	brne	.+30     	; 0x2c34 <Timer_init+0x1f4>
		{
			SET_BIT(TIMSK, TOIE2); /* enable interrupts for overflow mode */
    2c16:	a9 e5       	ldi	r26, 0x59	; 89
    2c18:	b0 e0       	ldi	r27, 0x00	; 0
    2c1a:	e9 e5       	ldi	r30, 0x59	; 89
    2c1c:	f0 e0       	ldi	r31, 0x00	; 0
    2c1e:	80 81       	ld	r24, Z
    2c20:	80 64       	ori	r24, 0x40	; 64
    2c22:	8c 93       	st	X, r24
			SET_BIT(TIFR,TOV2); /* enable overflow flag */
    2c24:	a8 e5       	ldi	r26, 0x58	; 88
    2c26:	b0 e0       	ldi	r27, 0x00	; 0
    2c28:	e8 e5       	ldi	r30, 0x58	; 88
    2c2a:	f0 e0       	ldi	r31, 0x00	; 0
    2c2c:	80 81       	ld	r24, Z
    2c2e:	80 64       	ori	r24, 0x40	; 64
    2c30:	8c 93       	st	X, r24
    2c32:	24 c0       	rjmp	.+72     	; 0x2c7c <Timer_init+0x23c>

		}
		else if (config_Ptr -> mode == CTC)
    2c34:	e9 81       	ldd	r30, Y+1	; 0x01
    2c36:	fa 81       	ldd	r31, Y+2	; 0x02
    2c38:	82 81       	ldd	r24, Z+2	; 0x02
    2c3a:	82 30       	cpi	r24, 0x02	; 2
    2c3c:	f9 f4       	brne	.+62     	; 0x2c7c <Timer_init+0x23c>
		{
			SET_BIT(TCCR0, WGM21);
    2c3e:	a3 e5       	ldi	r26, 0x53	; 83
    2c40:	b0 e0       	ldi	r27, 0x00	; 0
    2c42:	e3 e5       	ldi	r30, 0x53	; 83
    2c44:	f0 e0       	ldi	r31, 0x00	; 0
    2c46:	80 81       	ld	r24, Z
    2c48:	88 60       	ori	r24, 0x08	; 8
    2c4a:	8c 93       	st	X, r24
			OCR2 = config_Ptr -> Comp_Value;
    2c4c:	23 e4       	ldi	r18, 0x43	; 67
    2c4e:	30 e0       	ldi	r19, 0x00	; 0
    2c50:	e9 81       	ldd	r30, Y+1	; 0x01
    2c52:	fa 81       	ldd	r31, Y+2	; 0x02
    2c54:	83 81       	ldd	r24, Z+3	; 0x03
    2c56:	94 81       	ldd	r25, Z+4	; 0x04
    2c58:	a5 81       	ldd	r26, Z+5	; 0x05
    2c5a:	b6 81       	ldd	r27, Z+6	; 0x06
    2c5c:	f9 01       	movw	r30, r18
    2c5e:	80 83       	st	Z, r24
			SET_BIT(TIMSK, OCIE2); /* enable interrupts for CTC mode */
    2c60:	a9 e5       	ldi	r26, 0x59	; 89
    2c62:	b0 e0       	ldi	r27, 0x00	; 0
    2c64:	e9 e5       	ldi	r30, 0x59	; 89
    2c66:	f0 e0       	ldi	r31, 0x00	; 0
    2c68:	80 81       	ld	r24, Z
    2c6a:	80 68       	ori	r24, 0x80	; 128
    2c6c:	8c 93       	st	X, r24
			SET_BIT(TIFR,OCF2); /* enable CTC flag */
    2c6e:	a8 e5       	ldi	r26, 0x58	; 88
    2c70:	b0 e0       	ldi	r27, 0x00	; 0
    2c72:	e8 e5       	ldi	r30, 0x58	; 88
    2c74:	f0 e0       	ldi	r31, 0x00	; 0
    2c76:	80 81       	ld	r24, Z
    2c78:	80 68       	ori	r24, 0x80	; 128
    2c7a:	8c 93       	st	X, r24
		}

		SET_BIT(TCCR2, FOC2); /* for non-PWM */
    2c7c:	a5 e4       	ldi	r26, 0x45	; 69
    2c7e:	b0 e0       	ldi	r27, 0x00	; 0
    2c80:	e5 e4       	ldi	r30, 0x45	; 69
    2c82:	f0 e0       	ldi	r31, 0x00	; 0
    2c84:	80 81       	ld	r24, Z
    2c86:	80 68       	ori	r24, 0x80	; 128
    2c88:	8c 93       	st	X, r24
		TCNT2 = config_Ptr -> Init_Value;
    2c8a:	24 e4       	ldi	r18, 0x44	; 68
    2c8c:	30 e0       	ldi	r19, 0x00	; 0
    2c8e:	e9 81       	ldd	r30, Y+1	; 0x01
    2c90:	fa 81       	ldd	r31, Y+2	; 0x02
    2c92:	87 81       	ldd	r24, Z+7	; 0x07
    2c94:	90 85       	ldd	r25, Z+8	; 0x08
    2c96:	a1 85       	ldd	r26, Z+9	; 0x09
    2c98:	b2 85       	ldd	r27, Z+10	; 0x0a
    2c9a:	f9 01       	movw	r30, r18
    2c9c:	80 83       	st	Z, r24
		TCCR2 = 0;
    2c9e:	e5 e4       	ldi	r30, 0x45	; 69
    2ca0:	f0 e0       	ldi	r31, 0x00	; 0
    2ca2:	10 82       	st	Z, r1
		TCCR2 |= (config_Ptr -> clock);
    2ca4:	a5 e4       	ldi	r26, 0x45	; 69
    2ca6:	b0 e0       	ldi	r27, 0x00	; 0
    2ca8:	e5 e4       	ldi	r30, 0x45	; 69
    2caa:	f0 e0       	ldi	r31, 0x00	; 0
    2cac:	90 81       	ld	r25, Z
    2cae:	e9 81       	ldd	r30, Y+1	; 0x01
    2cb0:	fa 81       	ldd	r31, Y+2	; 0x02
    2cb2:	81 81       	ldd	r24, Z+1	; 0x01
    2cb4:	89 2b       	or	r24, r25
    2cb6:	8c 93       	st	X, r24


	}


}
    2cb8:	0f 90       	pop	r0
    2cba:	0f 90       	pop	r0
    2cbc:	cf 91       	pop	r28
    2cbe:	df 91       	pop	r29
    2cc0:	08 95       	ret

00002cc2 <Timer0_setCallBack>:


/*************************************Timer0***********************************/

void Timer0_setCallBack(void(*a_ptr)(void))
{
    2cc2:	df 93       	push	r29
    2cc4:	cf 93       	push	r28
    2cc6:	00 d0       	rcall	.+0      	; 0x2cc8 <Timer0_setCallBack+0x6>
    2cc8:	cd b7       	in	r28, 0x3d	; 61
    2cca:	de b7       	in	r29, 0x3e	; 62
    2ccc:	9a 83       	std	Y+2, r25	; 0x02
    2cce:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_Timer0CallBackPtr = a_ptr;
    2cd0:	89 81       	ldd	r24, Y+1	; 0x01
    2cd2:	9a 81       	ldd	r25, Y+2	; 0x02
    2cd4:	90 93 34 01 	sts	0x0134, r25
    2cd8:	80 93 33 01 	sts	0x0133, r24
}
    2cdc:	0f 90       	pop	r0
    2cde:	0f 90       	pop	r0
    2ce0:	cf 91       	pop	r28
    2ce2:	df 91       	pop	r29
    2ce4:	08 95       	ret

00002ce6 <Timer1_setCallBack>:


/*************************************Timer1***********************************/

void Timer1_setCallBack(void(*a_ptr)(void))
{
    2ce6:	df 93       	push	r29
    2ce8:	cf 93       	push	r28
    2cea:	00 d0       	rcall	.+0      	; 0x2cec <Timer1_setCallBack+0x6>
    2cec:	cd b7       	in	r28, 0x3d	; 61
    2cee:	de b7       	in	r29, 0x3e	; 62
    2cf0:	9a 83       	std	Y+2, r25	; 0x02
    2cf2:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_Timer1CallBackPtr = a_ptr;
    2cf4:	89 81       	ldd	r24, Y+1	; 0x01
    2cf6:	9a 81       	ldd	r25, Y+2	; 0x02
    2cf8:	90 93 36 01 	sts	0x0136, r25
    2cfc:	80 93 35 01 	sts	0x0135, r24
}
    2d00:	0f 90       	pop	r0
    2d02:	0f 90       	pop	r0
    2d04:	cf 91       	pop	r28
    2d06:	df 91       	pop	r29
    2d08:	08 95       	ret

00002d0a <Timer2_setCallBack>:


/*************************************Timer2***********************************/

void Timer2_setCallBack(void(*a_ptr)(void))
{
    2d0a:	df 93       	push	r29
    2d0c:	cf 93       	push	r28
    2d0e:	00 d0       	rcall	.+0      	; 0x2d10 <Timer2_setCallBack+0x6>
    2d10:	cd b7       	in	r28, 0x3d	; 61
    2d12:	de b7       	in	r29, 0x3e	; 62
    2d14:	9a 83       	std	Y+2, r25	; 0x02
    2d16:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_Timer2CallBackPtr = a_ptr;
    2d18:	89 81       	ldd	r24, Y+1	; 0x01
    2d1a:	9a 81       	ldd	r25, Y+2	; 0x02
    2d1c:	90 93 38 01 	sts	0x0138, r25
    2d20:	80 93 37 01 	sts	0x0137, r24
}
    2d24:	0f 90       	pop	r0
    2d26:	0f 90       	pop	r0
    2d28:	cf 91       	pop	r28
    2d2a:	df 91       	pop	r29
    2d2c:	08 95       	ret

00002d2e <Timer_DeInit>:


/********************************************************************************/
void Timer_DeInit(TIMER_ID Timer_ID)
{
    2d2e:	df 93       	push	r29
    2d30:	cf 93       	push	r28
    2d32:	0f 92       	push	r0
    2d34:	cd b7       	in	r28, 0x3d	; 61
    2d36:	de b7       	in	r29, 0x3e	; 62
    2d38:	89 83       	std	Y+1, r24	; 0x01
	if (Timer_ID == TIMER0)
    2d3a:	89 81       	ldd	r24, Y+1	; 0x01
    2d3c:	88 23       	and	r24, r24
    2d3e:	e1 f4       	brne	.+56     	; 0x2d78 <Timer_DeInit+0x4a>
	{
		TCCR0 = 0 ;
    2d40:	e3 e5       	ldi	r30, 0x53	; 83
    2d42:	f0 e0       	ldi	r31, 0x00	; 0
    2d44:	10 82       	st	Z, r1
		TCNT0 = 0 ;
    2d46:	e2 e5       	ldi	r30, 0x52	; 82
    2d48:	f0 e0       	ldi	r31, 0x00	; 0
    2d4a:	10 82       	st	Z, r1
		OCR0 = 0;
    2d4c:	ec e5       	ldi	r30, 0x5C	; 92
    2d4e:	f0 e0       	ldi	r31, 0x00	; 0
    2d50:	10 82       	st	Z, r1

		CLEAR_BIT(TIMSK,OCIE0) ;
    2d52:	a9 e5       	ldi	r26, 0x59	; 89
    2d54:	b0 e0       	ldi	r27, 0x00	; 0
    2d56:	e9 e5       	ldi	r30, 0x59	; 89
    2d58:	f0 e0       	ldi	r31, 0x00	; 0
    2d5a:	80 81       	ld	r24, Z
    2d5c:	8d 7f       	andi	r24, 0xFD	; 253
    2d5e:	8c 93       	st	X, r24
		CLEAR_BIT(TIMSK,TOIE0) ;
    2d60:	a9 e5       	ldi	r26, 0x59	; 89
    2d62:	b0 e0       	ldi	r27, 0x00	; 0
    2d64:	e9 e5       	ldi	r30, 0x59	; 89
    2d66:	f0 e0       	ldi	r31, 0x00	; 0
    2d68:	80 81       	ld	r24, Z
    2d6a:	8e 7f       	andi	r24, 0xFE	; 254
    2d6c:	8c 93       	st	X, r24

		g_Timer0CallBackPtr = NULL_PTR;
    2d6e:	10 92 34 01 	sts	0x0134, r1
    2d72:	10 92 33 01 	sts	0x0133, r1
    2d76:	42 c0       	rjmp	.+132    	; 0x2dfc <Timer_DeInit+0xce>
	}
	else if (Timer_ID == TIMER1)
    2d78:	89 81       	ldd	r24, Y+1	; 0x01
    2d7a:	81 30       	cpi	r24, 0x01	; 1
    2d7c:	09 f5       	brne	.+66     	; 0x2dc0 <Timer_DeInit+0x92>
	{
		TCCR1A =0;
    2d7e:	ef e4       	ldi	r30, 0x4F	; 79
    2d80:	f0 e0       	ldi	r31, 0x00	; 0
    2d82:	10 82       	st	Z, r1

		/* disable clock */
		TCCR1B = 0;
    2d84:	ee e4       	ldi	r30, 0x4E	; 78
    2d86:	f0 e0       	ldi	r31, 0x00	; 0
    2d88:	10 82       	st	Z, r1

		TCNT1 = 0;
    2d8a:	ec e4       	ldi	r30, 0x4C	; 76
    2d8c:	f0 e0       	ldi	r31, 0x00	; 0
    2d8e:	11 82       	std	Z+1, r1	; 0x01
    2d90:	10 82       	st	Z, r1

		/* disable interrupts for overflow mode */
		CLEAR_BIT(TIMSK, TOIE1);
    2d92:	a9 e5       	ldi	r26, 0x59	; 89
    2d94:	b0 e0       	ldi	r27, 0x00	; 0
    2d96:	e9 e5       	ldi	r30, 0x59	; 89
    2d98:	f0 e0       	ldi	r31, 0x00	; 0
    2d9a:	80 81       	ld	r24, Z
    2d9c:	8b 7f       	andi	r24, 0xFB	; 251
    2d9e:	8c 93       	st	X, r24

		/* clear compare value for CTC mode */
		OCR1A = 0;
    2da0:	ea e4       	ldi	r30, 0x4A	; 74
    2da2:	f0 e0       	ldi	r31, 0x00	; 0
    2da4:	11 82       	std	Z+1, r1	; 0x01
    2da6:	10 82       	st	Z, r1

		/* disable interrupts for CTC mode */
		CLEAR_BIT(TIMSK, OCIE1A);
    2da8:	a9 e5       	ldi	r26, 0x59	; 89
    2daa:	b0 e0       	ldi	r27, 0x00	; 0
    2dac:	e9 e5       	ldi	r30, 0x59	; 89
    2dae:	f0 e0       	ldi	r31, 0x00	; 0
    2db0:	80 81       	ld	r24, Z
    2db2:	8f 7e       	andi	r24, 0xEF	; 239
    2db4:	8c 93       	st	X, r24

		g_Timer1CallBackPtr = NULL_PTR;
    2db6:	10 92 36 01 	sts	0x0136, r1
    2dba:	10 92 35 01 	sts	0x0135, r1
    2dbe:	1e c0       	rjmp	.+60     	; 0x2dfc <Timer_DeInit+0xce>
	}
	else if (Timer_ID == TIMER2)
    2dc0:	89 81       	ldd	r24, Y+1	; 0x01
    2dc2:	82 30       	cpi	r24, 0x02	; 2
    2dc4:	d9 f4       	brne	.+54     	; 0x2dfc <Timer_DeInit+0xce>
	{

		TCCR2 = 0;
    2dc6:	e5 e4       	ldi	r30, 0x45	; 69
    2dc8:	f0 e0       	ldi	r31, 0x00	; 0
    2dca:	10 82       	st	Z, r1
		TCNT2 = 0; /* clear initial value */
    2dcc:	e4 e4       	ldi	r30, 0x44	; 68
    2dce:	f0 e0       	ldi	r31, 0x00	; 0
    2dd0:	10 82       	st	Z, r1

		OCR2 = 0; /* clear compare value for CTC mode*/
    2dd2:	e3 e4       	ldi	r30, 0x43	; 67
    2dd4:	f0 e0       	ldi	r31, 0x00	; 0
    2dd6:	10 82       	st	Z, r1

		CLEAR_BIT(TIMSK, OCIE2); /* disable interrupts for CTC mode */
    2dd8:	a9 e5       	ldi	r26, 0x59	; 89
    2dda:	b0 e0       	ldi	r27, 0x00	; 0
    2ddc:	e9 e5       	ldi	r30, 0x59	; 89
    2dde:	f0 e0       	ldi	r31, 0x00	; 0
    2de0:	80 81       	ld	r24, Z
    2de2:	8f 77       	andi	r24, 0x7F	; 127
    2de4:	8c 93       	st	X, r24
		CLEAR_BIT(TIMSK, TOIE2); /* disable interrupts for overflow mode */
    2de6:	a9 e5       	ldi	r26, 0x59	; 89
    2de8:	b0 e0       	ldi	r27, 0x00	; 0
    2dea:	e9 e5       	ldi	r30, 0x59	; 89
    2dec:	f0 e0       	ldi	r31, 0x00	; 0
    2dee:	80 81       	ld	r24, Z
    2df0:	8f 7b       	andi	r24, 0xBF	; 191
    2df2:	8c 93       	st	X, r24

		g_Timer2CallBackPtr = NULL_PTR;
    2df4:	10 92 38 01 	sts	0x0138, r1
    2df8:	10 92 37 01 	sts	0x0137, r1
	}

}
    2dfc:	0f 90       	pop	r0
    2dfe:	cf 91       	pop	r28
    2e00:	df 91       	pop	r29
    2e02:	08 95       	ret

00002e04 <UART_init>:
 *******************************************************************************/



void UART_init(uint32 baud_rate, UART_ConfigType * config_Ptr)
{
    2e04:	df 93       	push	r29
    2e06:	cf 93       	push	r28
    2e08:	cd b7       	in	r28, 0x3d	; 61
    2e0a:	de b7       	in	r29, 0x3e	; 62
    2e0c:	28 97       	sbiw	r28, 0x08	; 8
    2e0e:	0f b6       	in	r0, 0x3f	; 63
    2e10:	f8 94       	cli
    2e12:	de bf       	out	0x3e, r29	; 62
    2e14:	0f be       	out	0x3f, r0	; 63
    2e16:	cd bf       	out	0x3d, r28	; 61
    2e18:	6b 83       	std	Y+3, r22	; 0x03
    2e1a:	7c 83       	std	Y+4, r23	; 0x04
    2e1c:	8d 83       	std	Y+5, r24	; 0x05
    2e1e:	9e 83       	std	Y+6, r25	; 0x06
    2e20:	58 87       	std	Y+8, r21	; 0x08
    2e22:	4f 83       	std	Y+7, r20	; 0x07

	uint16 ubrr_value = 0 ;
    2e24:	1a 82       	std	Y+2, r1	; 0x02
    2e26:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
 	SET_BIT(UCSRA,U2X);
    2e28:	ab e2       	ldi	r26, 0x2B	; 43
    2e2a:	b0 e0       	ldi	r27, 0x00	; 0
    2e2c:	eb e2       	ldi	r30, 0x2B	; 43
    2e2e:	f0 e0       	ldi	r31, 0x00	; 0
    2e30:	80 81       	ld	r24, Z
    2e32:	82 60       	ori	r24, 0x02	; 2
    2e34:	8c 93       	st	X, r24

	SET_BIT(UCSRB,TXEN);
    2e36:	aa e2       	ldi	r26, 0x2A	; 42
    2e38:	b0 e0       	ldi	r27, 0x00	; 0
    2e3a:	ea e2       	ldi	r30, 0x2A	; 42
    2e3c:	f0 e0       	ldi	r31, 0x00	; 0
    2e3e:	80 81       	ld	r24, Z
    2e40:	88 60       	ori	r24, 0x08	; 8
    2e42:	8c 93       	st	X, r24
	SET_BIT(UCSRB,RXEN);
    2e44:	aa e2       	ldi	r26, 0x2A	; 42
    2e46:	b0 e0       	ldi	r27, 0x00	; 0
    2e48:	ea e2       	ldi	r30, 0x2A	; 42
    2e4a:	f0 e0       	ldi	r31, 0x00	; 0
    2e4c:	80 81       	ld	r24, Z
    2e4e:	80 61       	ori	r24, 0x10	; 16
    2e50:	8c 93       	st	X, r24

	UCSRC = (UCSRC & 0xF9) | ((config_Ptr->DATA_BIT_NUM) <<  UCSZ0);
    2e52:	a0 e4       	ldi	r26, 0x40	; 64
    2e54:	b0 e0       	ldi	r27, 0x00	; 0
    2e56:	e0 e4       	ldi	r30, 0x40	; 64
    2e58:	f0 e0       	ldi	r31, 0x00	; 0
    2e5a:	80 81       	ld	r24, Z
    2e5c:	28 2f       	mov	r18, r24
    2e5e:	29 7f       	andi	r18, 0xF9	; 249
    2e60:	ef 81       	ldd	r30, Y+7	; 0x07
    2e62:	f8 85       	ldd	r31, Y+8	; 0x08
    2e64:	81 81       	ldd	r24, Z+1	; 0x01
    2e66:	88 2f       	mov	r24, r24
    2e68:	90 e0       	ldi	r25, 0x00	; 0
    2e6a:	88 0f       	add	r24, r24
    2e6c:	99 1f       	adc	r25, r25
    2e6e:	82 2b       	or	r24, r18
    2e70:	8c 93       	st	X, r24


	UCSRC = (UCSRC & 0xCF) | ((config_Ptr->parity) <<  UPM0);
    2e72:	a0 e4       	ldi	r26, 0x40	; 64
    2e74:	b0 e0       	ldi	r27, 0x00	; 0
    2e76:	e0 e4       	ldi	r30, 0x40	; 64
    2e78:	f0 e0       	ldi	r31, 0x00	; 0
    2e7a:	80 81       	ld	r24, Z
    2e7c:	28 2f       	mov	r18, r24
    2e7e:	2f 7c       	andi	r18, 0xCF	; 207
    2e80:	ef 81       	ldd	r30, Y+7	; 0x07
    2e82:	f8 85       	ldd	r31, Y+8	; 0x08
    2e84:	80 81       	ld	r24, Z
    2e86:	88 2f       	mov	r24, r24
    2e88:	90 e0       	ldi	r25, 0x00	; 0
    2e8a:	82 95       	swap	r24
    2e8c:	92 95       	swap	r25
    2e8e:	90 7f       	andi	r25, 0xF0	; 240
    2e90:	98 27       	eor	r25, r24
    2e92:	80 7f       	andi	r24, 0xF0	; 240
    2e94:	98 27       	eor	r25, r24
    2e96:	82 2b       	or	r24, r18
    2e98:	8c 93       	st	X, r24


	UCSRC = (UCSRC & 0xF7) | ((config_Ptr->STOP_BIT) <<  USBS);
    2e9a:	a0 e4       	ldi	r26, 0x40	; 64
    2e9c:	b0 e0       	ldi	r27, 0x00	; 0
    2e9e:	e0 e4       	ldi	r30, 0x40	; 64
    2ea0:	f0 e0       	ldi	r31, 0x00	; 0
    2ea2:	80 81       	ld	r24, Z
    2ea4:	28 2f       	mov	r18, r24
    2ea6:	27 7f       	andi	r18, 0xF7	; 247
    2ea8:	ef 81       	ldd	r30, Y+7	; 0x07
    2eaa:	f8 85       	ldd	r31, Y+8	; 0x08
    2eac:	82 81       	ldd	r24, Z+2	; 0x02
    2eae:	88 2f       	mov	r24, r24
    2eb0:	90 e0       	ldi	r25, 0x00	; 0
    2eb2:	88 0f       	add	r24, r24
    2eb4:	99 1f       	adc	r25, r25
    2eb6:	88 0f       	add	r24, r24
    2eb8:	99 1f       	adc	r25, r25
    2eba:	88 0f       	add	r24, r24
    2ebc:	99 1f       	adc	r25, r25
    2ebe:	82 2b       	or	r24, r18
    2ec0:	8c 93       	st	X, r24




	ubrr_value = (uint16)(  ( (F_CPU / ((baud_rate) * 8UL) )  )- 1);
    2ec2:	8b 81       	ldd	r24, Y+3	; 0x03
    2ec4:	9c 81       	ldd	r25, Y+4	; 0x04
    2ec6:	ad 81       	ldd	r26, Y+5	; 0x05
    2ec8:	be 81       	ldd	r27, Y+6	; 0x06
    2eca:	88 0f       	add	r24, r24
    2ecc:	99 1f       	adc	r25, r25
    2ece:	aa 1f       	adc	r26, r26
    2ed0:	bb 1f       	adc	r27, r27
    2ed2:	88 0f       	add	r24, r24
    2ed4:	99 1f       	adc	r25, r25
    2ed6:	aa 1f       	adc	r26, r26
    2ed8:	bb 1f       	adc	r27, r27
    2eda:	88 0f       	add	r24, r24
    2edc:	99 1f       	adc	r25, r25
    2ede:	aa 1f       	adc	r26, r26
    2ee0:	bb 1f       	adc	r27, r27
    2ee2:	9c 01       	movw	r18, r24
    2ee4:	ad 01       	movw	r20, r26
    2ee6:	80 e4       	ldi	r24, 0x40	; 64
    2ee8:	92 e4       	ldi	r25, 0x42	; 66
    2eea:	af e0       	ldi	r26, 0x0F	; 15
    2eec:	b0 e0       	ldi	r27, 0x00	; 0
    2eee:	bc 01       	movw	r22, r24
    2ef0:	cd 01       	movw	r24, r26
    2ef2:	0e 94 26 18 	call	0x304c	; 0x304c <__udivmodsi4>
    2ef6:	da 01       	movw	r26, r20
    2ef8:	c9 01       	movw	r24, r18
    2efa:	01 97       	sbiw	r24, 0x01	; 1
    2efc:	9a 83       	std	Y+2, r25	; 0x02
    2efe:	89 83       	std	Y+1, r24	; 0x01

	UBRRH = ubrr_value>>8;
    2f00:	e0 e4       	ldi	r30, 0x40	; 64
    2f02:	f0 e0       	ldi	r31, 0x00	; 0
    2f04:	89 81       	ldd	r24, Y+1	; 0x01
    2f06:	9a 81       	ldd	r25, Y+2	; 0x02
    2f08:	89 2f       	mov	r24, r25
    2f0a:	99 27       	eor	r25, r25
    2f0c:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    2f0e:	e9 e2       	ldi	r30, 0x29	; 41
    2f10:	f0 e0       	ldi	r31, 0x00	; 0
    2f12:	89 81       	ldd	r24, Y+1	; 0x01
    2f14:	80 83       	st	Z, r24
}
    2f16:	28 96       	adiw	r28, 0x08	; 8
    2f18:	0f b6       	in	r0, 0x3f	; 63
    2f1a:	f8 94       	cli
    2f1c:	de bf       	out	0x3e, r29	; 62
    2f1e:	0f be       	out	0x3f, r0	; 63
    2f20:	cd bf       	out	0x3d, r28	; 61
    2f22:	cf 91       	pop	r28
    2f24:	df 91       	pop	r29
    2f26:	08 95       	ret

00002f28 <UART_sendByte>:



void UART_sendByte(const uint8 data)
{
    2f28:	df 93       	push	r29
    2f2a:	cf 93       	push	r28
    2f2c:	0f 92       	push	r0
    2f2e:	cd b7       	in	r28, 0x3d	; 61
    2f30:	de b7       	in	r29, 0x3e	; 62
    2f32:	89 83       	std	Y+1, r24	; 0x01
	while(BIT_IS_CLEAR(UCSRA , UDRE)){}
    2f34:	eb e2       	ldi	r30, 0x2B	; 43
    2f36:	f0 e0       	ldi	r31, 0x00	; 0
    2f38:	80 81       	ld	r24, Z
    2f3a:	88 2f       	mov	r24, r24
    2f3c:	90 e0       	ldi	r25, 0x00	; 0
    2f3e:	80 72       	andi	r24, 0x20	; 32
    2f40:	90 70       	andi	r25, 0x00	; 0
    2f42:	00 97       	sbiw	r24, 0x00	; 0
    2f44:	b9 f3       	breq	.-18     	; 0x2f34 <UART_sendByte+0xc>
	UDR = data;
    2f46:	ec e2       	ldi	r30, 0x2C	; 44
    2f48:	f0 e0       	ldi	r31, 0x00	; 0
    2f4a:	89 81       	ldd	r24, Y+1	; 0x01
    2f4c:	80 83       	st	Z, r24
}
    2f4e:	0f 90       	pop	r0
    2f50:	cf 91       	pop	r28
    2f52:	df 91       	pop	r29
    2f54:	08 95       	ret

00002f56 <UART_reciveByte>:

uint8 UART_reciveByte(void)
{
    2f56:	df 93       	push	r29
    2f58:	cf 93       	push	r28
    2f5a:	cd b7       	in	r28, 0x3d	; 61
    2f5c:	de b7       	in	r29, 0x3e	; 62
	while(BIT_IS_CLEAR(UCSRA , RXC)){}
    2f5e:	eb e2       	ldi	r30, 0x2B	; 43
    2f60:	f0 e0       	ldi	r31, 0x00	; 0
    2f62:	80 81       	ld	r24, Z
    2f64:	88 23       	and	r24, r24
    2f66:	dc f7       	brge	.-10     	; 0x2f5e <UART_reciveByte+0x8>
	return UDR;
    2f68:	ec e2       	ldi	r30, 0x2C	; 44
    2f6a:	f0 e0       	ldi	r31, 0x00	; 0
    2f6c:	80 81       	ld	r24, Z
}
    2f6e:	cf 91       	pop	r28
    2f70:	df 91       	pop	r29
    2f72:	08 95       	ret

00002f74 <UART_sendString>:



void UART_sendString(const uint8 *Str)
{
    2f74:	df 93       	push	r29
    2f76:	cf 93       	push	r28
    2f78:	00 d0       	rcall	.+0      	; 0x2f7a <UART_sendString+0x6>
    2f7a:	0f 92       	push	r0
    2f7c:	cd b7       	in	r28, 0x3d	; 61
    2f7e:	de b7       	in	r29, 0x3e	; 62
    2f80:	9b 83       	std	Y+3, r25	; 0x03
    2f82:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2f84:	19 82       	std	Y+1, r1	; 0x01
    2f86:	0e c0       	rjmp	.+28     	; 0x2fa4 <UART_sendString+0x30>

	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    2f88:	89 81       	ldd	r24, Y+1	; 0x01
    2f8a:	28 2f       	mov	r18, r24
    2f8c:	30 e0       	ldi	r19, 0x00	; 0
    2f8e:	8a 81       	ldd	r24, Y+2	; 0x02
    2f90:	9b 81       	ldd	r25, Y+3	; 0x03
    2f92:	fc 01       	movw	r30, r24
    2f94:	e2 0f       	add	r30, r18
    2f96:	f3 1f       	adc	r31, r19
    2f98:	80 81       	ld	r24, Z
    2f9a:	0e 94 94 17 	call	0x2f28	; 0x2f28 <UART_sendByte>
		i++;
    2f9e:	89 81       	ldd	r24, Y+1	; 0x01
    2fa0:	8f 5f       	subi	r24, 0xFF	; 255
    2fa2:	89 83       	std	Y+1, r24	; 0x01

void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	while(Str[i] != '\0')
    2fa4:	89 81       	ldd	r24, Y+1	; 0x01
    2fa6:	28 2f       	mov	r18, r24
    2fa8:	30 e0       	ldi	r19, 0x00	; 0
    2faa:	8a 81       	ldd	r24, Y+2	; 0x02
    2fac:	9b 81       	ldd	r25, Y+3	; 0x03
    2fae:	fc 01       	movw	r30, r24
    2fb0:	e2 0f       	add	r30, r18
    2fb2:	f3 1f       	adc	r31, r19
    2fb4:	80 81       	ld	r24, Z
    2fb6:	88 23       	and	r24, r24
    2fb8:	39 f7       	brne	.-50     	; 0x2f88 <UART_sendString+0x14>
	{
		UART_sendByte(Str[i]);
		i++;
	}
}
    2fba:	0f 90       	pop	r0
    2fbc:	0f 90       	pop	r0
    2fbe:	0f 90       	pop	r0
    2fc0:	cf 91       	pop	r28
    2fc2:	df 91       	pop	r29
    2fc4:	08 95       	ret

00002fc6 <UART_receiveString>:

void UART_receiveString(uint8 *Str)
{
    2fc6:	0f 93       	push	r16
    2fc8:	1f 93       	push	r17
    2fca:	df 93       	push	r29
    2fcc:	cf 93       	push	r28
    2fce:	00 d0       	rcall	.+0      	; 0x2fd0 <UART_receiveString+0xa>
    2fd0:	0f 92       	push	r0
    2fd2:	cd b7       	in	r28, 0x3d	; 61
    2fd4:	de b7       	in	r29, 0x3e	; 62
    2fd6:	9b 83       	std	Y+3, r25	; 0x03
    2fd8:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0 ;
    2fda:	19 82       	std	Y+1, r1	; 0x01

	Str[i] = UART_reciveByte();
    2fdc:	89 81       	ldd	r24, Y+1	; 0x01
    2fde:	28 2f       	mov	r18, r24
    2fe0:	30 e0       	ldi	r19, 0x00	; 0
    2fe2:	8a 81       	ldd	r24, Y+2	; 0x02
    2fe4:	9b 81       	ldd	r25, Y+3	; 0x03
    2fe6:	8c 01       	movw	r16, r24
    2fe8:	02 0f       	add	r16, r18
    2fea:	13 1f       	adc	r17, r19
    2fec:	0e 94 ab 17 	call	0x2f56	; 0x2f56 <UART_reciveByte>
    2ff0:	f8 01       	movw	r30, r16
    2ff2:	80 83       	st	Z, r24
    2ff4:	0f c0       	rjmp	.+30     	; 0x3014 <UART_receiveString+0x4e>

	while (Str[i] != '#')
	{
		i++;
    2ff6:	89 81       	ldd	r24, Y+1	; 0x01
    2ff8:	8f 5f       	subi	r24, 0xFF	; 255
    2ffa:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_reciveByte();
    2ffc:	89 81       	ldd	r24, Y+1	; 0x01
    2ffe:	28 2f       	mov	r18, r24
    3000:	30 e0       	ldi	r19, 0x00	; 0
    3002:	8a 81       	ldd	r24, Y+2	; 0x02
    3004:	9b 81       	ldd	r25, Y+3	; 0x03
    3006:	8c 01       	movw	r16, r24
    3008:	02 0f       	add	r16, r18
    300a:	13 1f       	adc	r17, r19
    300c:	0e 94 ab 17 	call	0x2f56	; 0x2f56 <UART_reciveByte>
    3010:	f8 01       	movw	r30, r16
    3012:	80 83       	st	Z, r24
{
	uint8 i = 0 ;

	Str[i] = UART_reciveByte();

	while (Str[i] != '#')
    3014:	89 81       	ldd	r24, Y+1	; 0x01
    3016:	28 2f       	mov	r18, r24
    3018:	30 e0       	ldi	r19, 0x00	; 0
    301a:	8a 81       	ldd	r24, Y+2	; 0x02
    301c:	9b 81       	ldd	r25, Y+3	; 0x03
    301e:	fc 01       	movw	r30, r24
    3020:	e2 0f       	add	r30, r18
    3022:	f3 1f       	adc	r31, r19
    3024:	80 81       	ld	r24, Z
    3026:	83 32       	cpi	r24, 0x23	; 35
    3028:	31 f7       	brne	.-52     	; 0x2ff6 <UART_receiveString+0x30>
	{
		i++;
		Str[i] = UART_reciveByte();

	}
	Str[i] = '\0';
    302a:	89 81       	ldd	r24, Y+1	; 0x01
    302c:	28 2f       	mov	r18, r24
    302e:	30 e0       	ldi	r19, 0x00	; 0
    3030:	8a 81       	ldd	r24, Y+2	; 0x02
    3032:	9b 81       	ldd	r25, Y+3	; 0x03
    3034:	fc 01       	movw	r30, r24
    3036:	e2 0f       	add	r30, r18
    3038:	f3 1f       	adc	r31, r19
    303a:	10 82       	st	Z, r1

}
    303c:	0f 90       	pop	r0
    303e:	0f 90       	pop	r0
    3040:	0f 90       	pop	r0
    3042:	cf 91       	pop	r28
    3044:	df 91       	pop	r29
    3046:	1f 91       	pop	r17
    3048:	0f 91       	pop	r16
    304a:	08 95       	ret

0000304c <__udivmodsi4>:
    304c:	a1 e2       	ldi	r26, 0x21	; 33
    304e:	1a 2e       	mov	r1, r26
    3050:	aa 1b       	sub	r26, r26
    3052:	bb 1b       	sub	r27, r27
    3054:	fd 01       	movw	r30, r26
    3056:	0d c0       	rjmp	.+26     	; 0x3072 <__udivmodsi4_ep>

00003058 <__udivmodsi4_loop>:
    3058:	aa 1f       	adc	r26, r26
    305a:	bb 1f       	adc	r27, r27
    305c:	ee 1f       	adc	r30, r30
    305e:	ff 1f       	adc	r31, r31
    3060:	a2 17       	cp	r26, r18
    3062:	b3 07       	cpc	r27, r19
    3064:	e4 07       	cpc	r30, r20
    3066:	f5 07       	cpc	r31, r21
    3068:	20 f0       	brcs	.+8      	; 0x3072 <__udivmodsi4_ep>
    306a:	a2 1b       	sub	r26, r18
    306c:	b3 0b       	sbc	r27, r19
    306e:	e4 0b       	sbc	r30, r20
    3070:	f5 0b       	sbc	r31, r21

00003072 <__udivmodsi4_ep>:
    3072:	66 1f       	adc	r22, r22
    3074:	77 1f       	adc	r23, r23
    3076:	88 1f       	adc	r24, r24
    3078:	99 1f       	adc	r25, r25
    307a:	1a 94       	dec	r1
    307c:	69 f7       	brne	.-38     	; 0x3058 <__udivmodsi4_loop>
    307e:	60 95       	com	r22
    3080:	70 95       	com	r23
    3082:	80 95       	com	r24
    3084:	90 95       	com	r25
    3086:	9b 01       	movw	r18, r22
    3088:	ac 01       	movw	r20, r24
    308a:	bd 01       	movw	r22, r26
    308c:	cf 01       	movw	r24, r30
    308e:	08 95       	ret

00003090 <__prologue_saves__>:
    3090:	2f 92       	push	r2
    3092:	3f 92       	push	r3
    3094:	4f 92       	push	r4
    3096:	5f 92       	push	r5
    3098:	6f 92       	push	r6
    309a:	7f 92       	push	r7
    309c:	8f 92       	push	r8
    309e:	9f 92       	push	r9
    30a0:	af 92       	push	r10
    30a2:	bf 92       	push	r11
    30a4:	cf 92       	push	r12
    30a6:	df 92       	push	r13
    30a8:	ef 92       	push	r14
    30aa:	ff 92       	push	r15
    30ac:	0f 93       	push	r16
    30ae:	1f 93       	push	r17
    30b0:	cf 93       	push	r28
    30b2:	df 93       	push	r29
    30b4:	cd b7       	in	r28, 0x3d	; 61
    30b6:	de b7       	in	r29, 0x3e	; 62
    30b8:	ca 1b       	sub	r28, r26
    30ba:	db 0b       	sbc	r29, r27
    30bc:	0f b6       	in	r0, 0x3f	; 63
    30be:	f8 94       	cli
    30c0:	de bf       	out	0x3e, r29	; 62
    30c2:	0f be       	out	0x3f, r0	; 63
    30c4:	cd bf       	out	0x3d, r28	; 61
    30c6:	09 94       	ijmp

000030c8 <__epilogue_restores__>:
    30c8:	2a 88       	ldd	r2, Y+18	; 0x12
    30ca:	39 88       	ldd	r3, Y+17	; 0x11
    30cc:	48 88       	ldd	r4, Y+16	; 0x10
    30ce:	5f 84       	ldd	r5, Y+15	; 0x0f
    30d0:	6e 84       	ldd	r6, Y+14	; 0x0e
    30d2:	7d 84       	ldd	r7, Y+13	; 0x0d
    30d4:	8c 84       	ldd	r8, Y+12	; 0x0c
    30d6:	9b 84       	ldd	r9, Y+11	; 0x0b
    30d8:	aa 84       	ldd	r10, Y+10	; 0x0a
    30da:	b9 84       	ldd	r11, Y+9	; 0x09
    30dc:	c8 84       	ldd	r12, Y+8	; 0x08
    30de:	df 80       	ldd	r13, Y+7	; 0x07
    30e0:	ee 80       	ldd	r14, Y+6	; 0x06
    30e2:	fd 80       	ldd	r15, Y+5	; 0x05
    30e4:	0c 81       	ldd	r16, Y+4	; 0x04
    30e6:	1b 81       	ldd	r17, Y+3	; 0x03
    30e8:	aa 81       	ldd	r26, Y+2	; 0x02
    30ea:	b9 81       	ldd	r27, Y+1	; 0x01
    30ec:	ce 0f       	add	r28, r30
    30ee:	d1 1d       	adc	r29, r1
    30f0:	0f b6       	in	r0, 0x3f	; 63
    30f2:	f8 94       	cli
    30f4:	de bf       	out	0x3e, r29	; 62
    30f6:	0f be       	out	0x3f, r0	; 63
    30f8:	cd bf       	out	0x3d, r28	; 61
    30fa:	ed 01       	movw	r28, r26
    30fc:	08 95       	ret

000030fe <itoa>:
    30fe:	fb 01       	movw	r30, r22
    3100:	9f 01       	movw	r18, r30
    3102:	e8 94       	clt
    3104:	42 30       	cpi	r20, 0x02	; 2
    3106:	c4 f0       	brlt	.+48     	; 0x3138 <itoa+0x3a>
    3108:	45 32       	cpi	r20, 0x25	; 37
    310a:	b4 f4       	brge	.+44     	; 0x3138 <itoa+0x3a>
    310c:	4a 30       	cpi	r20, 0x0A	; 10
    310e:	29 f4       	brne	.+10     	; 0x311a <itoa+0x1c>
    3110:	97 fb       	bst	r25, 7
    3112:	1e f4       	brtc	.+6      	; 0x311a <itoa+0x1c>
    3114:	90 95       	com	r25
    3116:	81 95       	neg	r24
    3118:	9f 4f       	sbci	r25, 0xFF	; 255
    311a:	64 2f       	mov	r22, r20
    311c:	77 27       	eor	r23, r23
    311e:	0e 94 b0 18 	call	0x3160	; 0x3160 <__udivmodhi4>
    3122:	80 5d       	subi	r24, 0xD0	; 208
    3124:	8a 33       	cpi	r24, 0x3A	; 58
    3126:	0c f0       	brlt	.+2      	; 0x312a <itoa+0x2c>
    3128:	89 5d       	subi	r24, 0xD9	; 217
    312a:	81 93       	st	Z+, r24
    312c:	cb 01       	movw	r24, r22
    312e:	00 97       	sbiw	r24, 0x00	; 0
    3130:	a1 f7       	brne	.-24     	; 0x311a <itoa+0x1c>
    3132:	16 f4       	brtc	.+4      	; 0x3138 <itoa+0x3a>
    3134:	5d e2       	ldi	r21, 0x2D	; 45
    3136:	51 93       	st	Z+, r21
    3138:	10 82       	st	Z, r1
    313a:	c9 01       	movw	r24, r18
    313c:	0c 94 a0 18 	jmp	0x3140	; 0x3140 <strrev>

00003140 <strrev>:
    3140:	dc 01       	movw	r26, r24
    3142:	fc 01       	movw	r30, r24
    3144:	67 2f       	mov	r22, r23
    3146:	71 91       	ld	r23, Z+
    3148:	77 23       	and	r23, r23
    314a:	e1 f7       	brne	.-8      	; 0x3144 <strrev+0x4>
    314c:	32 97       	sbiw	r30, 0x02	; 2
    314e:	04 c0       	rjmp	.+8      	; 0x3158 <strrev+0x18>
    3150:	7c 91       	ld	r23, X
    3152:	6d 93       	st	X+, r22
    3154:	70 83       	st	Z, r23
    3156:	62 91       	ld	r22, -Z
    3158:	ae 17       	cp	r26, r30
    315a:	bf 07       	cpc	r27, r31
    315c:	c8 f3       	brcs	.-14     	; 0x3150 <strrev+0x10>
    315e:	08 95       	ret

00003160 <__udivmodhi4>:
    3160:	aa 1b       	sub	r26, r26
    3162:	bb 1b       	sub	r27, r27
    3164:	51 e1       	ldi	r21, 0x11	; 17
    3166:	07 c0       	rjmp	.+14     	; 0x3176 <__udivmodhi4_ep>

00003168 <__udivmodhi4_loop>:
    3168:	aa 1f       	adc	r26, r26
    316a:	bb 1f       	adc	r27, r27
    316c:	a6 17       	cp	r26, r22
    316e:	b7 07       	cpc	r27, r23
    3170:	10 f0       	brcs	.+4      	; 0x3176 <__udivmodhi4_ep>
    3172:	a6 1b       	sub	r26, r22
    3174:	b7 0b       	sbc	r27, r23

00003176 <__udivmodhi4_ep>:
    3176:	88 1f       	adc	r24, r24
    3178:	99 1f       	adc	r25, r25
    317a:	5a 95       	dec	r21
    317c:	a9 f7       	brne	.-22     	; 0x3168 <__udivmodhi4_loop>
    317e:	80 95       	com	r24
    3180:	90 95       	com	r25
    3182:	bc 01       	movw	r22, r24
    3184:	cd 01       	movw	r24, r26
    3186:	08 95       	ret

00003188 <_exit>:
    3188:	f8 94       	cli

0000318a <__stop_program>:
    318a:	ff cf       	rjmp	.-2      	; 0x318a <__stop_program>
